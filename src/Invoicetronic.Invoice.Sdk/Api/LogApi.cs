/*
 * Italian eInvoice API v1
 *
 * The [Italian eInvoice API][2] is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Invoicetronic.Invoice.Sdk.Client;
using Invoicetronic.Invoice.Sdk.Model;

namespace Invoicetronic.Invoice.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List events
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> LogGet(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List events
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> LogGetWithHttpInfo(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Event</returns>
        Event LogIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> LogIdGetWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List events
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> LogGetAsync(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List events
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> LogGetWithHttpInfoAsync(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> LogIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> LogIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogApi : ILogApiSync, ILogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogApi : ILogApi
    {
        private Invoicetronic.Invoice.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogApi(string basePath)
        {
            this.Configuration = Invoicetronic.Invoice.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Invoice.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Invoice.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogApi(Invoicetronic.Invoice.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.Invoice.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Invoice.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LogApi(Invoicetronic.Invoice.Sdk.Client.ISynchronousClient client, Invoicetronic.Invoice.Sdk.Client.IAsynchronousClient asyncClient, Invoicetronic.Invoice.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.Invoice.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List events Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> LogGet(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Event>> localVarResponse = LogGetWithHttpInfo(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List events Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Event>> LogGetWithHttpInfo(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (endpoint != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endpoint", endpoint));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (apiVerion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "api_verion", apiVerion));
            }
            if (statusCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status_code", statusCode));
            }
            if (dateCreatedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_created_from", dateCreatedFrom));
            }
            if (dateCreatedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_created_to", dateCreatedTo));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (success != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "success", success));
            }
            if (dateTimeFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_time_from", dateTimeFrom));
            }
            if (dateTimeTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_time_to", dateTimeTo));
            }

            localVarRequestOptions.Operation = "LogApi.LogGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Event>>("/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List events Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> LogGetAsync(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Event>> localVarResponse = await LogGetWithHttpInfoAsync(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List events Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Event>>> LogGetWithHttpInfoAsync(int? companyId = default(int?), string endpoint = default(string), string method = default(string), int? apiVerion = default(int?), int? statusCode = default(int?), DateTime? dateCreatedFrom = default(DateTime?), DateTime? dateCreatedTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string query = default(string), bool? success = default(bool?), DateTime? dateTimeFrom = default(DateTime?), DateTime? dateTimeTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (endpoint != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "endpoint", endpoint));
            }
            if (method != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "method", method));
            }
            if (apiVerion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "api_verion", apiVerion));
            }
            if (statusCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status_code", statusCode));
            }
            if (dateCreatedFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_created_from", dateCreatedFrom));
            }
            if (dateCreatedTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_created_to", dateCreatedTo));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (success != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "success", success));
            }
            if (dateTimeFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_time_from", dateTimeFrom));
            }
            if (dateTimeTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_time_to", dateTimeTo));
            }

            localVarRequestOptions.Operation = "LogApi.LogGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Event>>("/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an event by id Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Event</returns>
        public Event LogIdGet(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<Event> localVarResponse = LogIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an event by id Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Event</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<Event> LogIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LogApi.LogIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Event>("/log/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an event by id Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> LogIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<Event> localVarResponse = await LogIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an event by id Every API operation is logged and can be retrieved here.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<Event>> LogIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LogApi.LogIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Event>("/log/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LogIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
