/*
 * Italian eInvoice API
 *
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Invoicetronic.Invoice.Sdk.Client;
using Invoicetronic.Invoice.Sdk.Model;

namespace Invoicetronic.Invoice.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpdateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List updates
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Update&gt;</returns>
        List<Update> InvoiceV1UpdateGet(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List updates
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Update&gt;</returns>
        ApiResponse<List<Update>> InvoiceV1UpdateGetWithHttpInfo(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get an update by id
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Update</returns>
        Update InvoiceV1UpdateIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get an update by id
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Update</returns>
        ApiResponse<Update> InvoiceV1UpdateIdGetWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpdateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List updates
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Update&gt;</returns>
        System.Threading.Tasks.Task<List<Update>> InvoiceV1UpdateGetAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List updates
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Update&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Update>>> InvoiceV1UpdateGetWithHttpInfoAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get an update by id
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Update</returns>
        System.Threading.Tasks.Task<Update> InvoiceV1UpdateIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get an update by id
        /// </summary>
        /// <remarks>
        /// Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Update)</returns>
        System.Threading.Tasks.Task<ApiResponse<Update>> InvoiceV1UpdateIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUpdateApi : IUpdateApiSync, IUpdateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UpdateApi : IUpdateApi
    {
        private Invoicetronic.Invoice.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UpdateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UpdateApi(string basePath)
        {
            this.Configuration = Invoicetronic.Invoice.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Invoice.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Invoice.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UpdateApi(Invoicetronic.Invoice.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.Invoice.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Invoice.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UpdateApi(Invoicetronic.Invoice.Sdk.Client.ISynchronousClient client, Invoicetronic.Invoice.Sdk.Client.IAsynchronousClient asyncClient, Invoicetronic.Invoice.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.Invoice.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List updates Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Update&gt;</returns>
        public List<Update> InvoiceV1UpdateGet(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Update>> localVarResponse = InvoiceV1UpdateGetWithHttpInfo(companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List updates Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Update&gt;</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Update>> InvoiceV1UpdateGetWithHttpInfo(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (unread != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "unread", unread));
            }
            if (sendId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "send_id", sendId));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UpdateApi.InvoiceV1UpdateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Update>>("/invoice/v1/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1UpdateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List updates Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Update&gt;</returns>
        public async System.Threading.Tasks.Task<List<Update>> InvoiceV1UpdateGetAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Update>> localVarResponse = await InvoiceV1UpdateGetWithHttpInfoAsync(companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List updates Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Update&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<Update>>> InvoiceV1UpdateGetWithHttpInfoAsync(int? companyId = default(int?), string identifier = default(string), bool? unread = default(bool?), int? sendId = default(int?), string state = default(string), DateTime? lastUpdateFrom = default(DateTime?), DateTime? lastUpdateTo = default(DateTime?), DateTime? dateSentFrom = default(DateTime?), DateTime? dateSentTo = default(DateTime?), int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (unread != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "unread", unread));
            }
            if (sendId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "send_id", sendId));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "UpdateApi.InvoiceV1UpdateGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Update>>("/invoice/v1/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1UpdateGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an update by id Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Update</returns>
        public Update InvoiceV1UpdateIdGet(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<Update> localVarResponse = InvoiceV1UpdateIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an update by id Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Update</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<Update> InvoiceV1UpdateIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UpdateApi.InvoiceV1UpdateIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Update>("/invoice/v1/update/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1UpdateIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an update by id Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Update</returns>
        public async System.Threading.Tasks.Task<Update> InvoiceV1UpdateIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<Update> localVarResponse = await InvoiceV1UpdateIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an update by id Updates are notifications that are sent by the SDI about the status of sent invoices.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Update)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<Update>> InvoiceV1UpdateIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UpdateApi.InvoiceV1UpdateIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Update>("/invoice/v1/update/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvoiceV1UpdateIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
