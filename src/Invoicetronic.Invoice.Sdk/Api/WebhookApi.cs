/*
 * Italian eInvoice API v1
 *
 * The [Italian eInvoice API][2] is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Invoicetronic.Invoice.Sdk.Client;
using Invoicetronic.Invoice.Sdk.Model;

namespace Invoicetronic.Invoice.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WebHook&gt;</returns>
        List<WebHook> WebhookGet(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0);

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WebHook&gt;</returns>
        ApiResponse<List<WebHook>> WebhookGetWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        WebHook WebhookIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        ApiResponse<WebHook> WebhookIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        WebHook WebhookIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        ApiResponse<WebHook> WebhookIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        WebHook WebhookPost(WebHook webHook, int operationIndex = 0);

        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        ApiResponse<WebHook> WebhookPostWithHttpInfo(WebHook webHook, int operationIndex = 0);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        WebHook WebhookPut(WebHook webHook, int operationIndex = 0);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        ApiResponse<WebHook> WebhookPutWithHttpInfo(WebHook webHook, int operationIndex = 0);
        /// <summary>
        /// List webhook history items
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WebHookHistory&gt;</returns>
        List<WebHookHistory> WebhookhistoryGet(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0);

        /// <summary>
        /// List webhook history items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WebHookHistory&gt;</returns>
        ApiResponse<List<WebHookHistory>> WebhookhistoryGetWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0);
        /// <summary>
        /// Get a webhook history item by id
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHookHistory</returns>
        WebHookHistory WebhookhistoryIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get a webhook history item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHookHistory</returns>
        ApiResponse<WebHookHistory> WebhookhistoryIdGetWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WebHook&gt;</returns>
        System.Threading.Tasks.Task<List<WebHook>> WebhookGetAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WebHook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WebHook>>> WebhookGetWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        System.Threading.Tasks.Task<WebHook> WebhookIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebHook>> WebhookIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        System.Threading.Tasks.Task<WebHook> WebhookIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a webhook by id
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebHook>> WebhookIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        System.Threading.Tasks.Task<WebHook> WebhookPostAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebHook>> WebhookPostWithHttpInfoAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        System.Threading.Tasks.Task<WebHook> WebhookPutAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebHook>> WebhookPutWithHttpInfoAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List webhook history items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WebHookHistory&gt;</returns>
        System.Threading.Tasks.Task<List<WebHookHistory>> WebhookhistoryGetAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List webhook history items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WebHookHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WebHookHistory>>> WebhookhistoryGetWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a webhook history item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHookHistory</returns>
        System.Threading.Tasks.Task<WebHookHistory> WebhookhistoryIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a webhook history item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHookHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebHookHistory>> WebhookhistoryIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IWebhookApiSync, IWebhookApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private Invoicetronic.Invoice.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(string basePath)
        {
            this.Configuration = Invoicetronic.Invoice.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Invoice.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Invoice.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(Invoicetronic.Invoice.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.Invoice.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Invoice.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Invoicetronic.Invoice.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhookApi(Invoicetronic.Invoice.Sdk.Client.ISynchronousClient client, Invoicetronic.Invoice.Sdk.Client.IAsynchronousClient asyncClient, Invoicetronic.Invoice.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.Invoice.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.Invoice.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.Invoice.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List webhooks Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WebHook&gt;</returns>
        public List<WebHook> WebhookGet(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHook>> localVarResponse = WebhookGetWithHttpInfo(page, pageSize, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WebHook&gt;</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHook>> WebhookGetWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WebHook>>("/webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WebHook&gt;</returns>
        public async System.Threading.Tasks.Task<List<WebHook>> WebhookGetAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHook>> localVarResponse = await WebhookGetWithHttpInfoAsync(page, pageSize, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WebHook&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHook>>> WebhookGetWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WebHook>>("/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        public WebHook WebhookIdDelete(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = WebhookIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> WebhookIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.WebhookIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<WebHook>("/webhook/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        public async System.Threading.Tasks.Task<WebHook> WebhookIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = await WebhookIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook>> WebhookIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.WebhookIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<WebHook>("/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        public WebHook WebhookIdGet(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = WebhookIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> WebhookIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.WebhookIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebHook>("/webhook/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        public async System.Threading.Tasks.Task<WebHook> WebhookIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = await WebhookIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook by id Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook>> WebhookIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.WebhookIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebHook>("/webhook/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        public WebHook WebhookPost(WebHook webHook, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = WebhookPostWithHttpInfo(webHook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> WebhookPostWithHttpInfo(WebHook webHook, int operationIndex = 0)
        {
            // verify the required parameter 'webHook' is set
            if (webHook == null)
            {
                throw new Invoicetronic.Invoice.Sdk.Client.ApiException(400, "Missing required parameter 'webHook' when calling WebhookApi->WebhookPost");
            }

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webHook;

            localVarRequestOptions.Operation = "WebhookApi.WebhookPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebHook>("/webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        public async System.Threading.Tasks.Task<WebHook> WebhookPostAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = await WebhookPostWithHttpInfoAsync(webHook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook>> WebhookPostWithHttpInfoAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'webHook' is set
            if (webHook == null)
            {
                throw new Invoicetronic.Invoice.Sdk.Client.ApiException(400, "Missing required parameter 'webHook' when calling WebhookApi->WebhookPost");
            }


            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webHook;

            localVarRequestOptions.Operation = "WebhookApi.WebhookPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebHook>("/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHook</returns>
        public WebHook WebhookPut(WebHook webHook, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = WebhookPutWithHttpInfo(webHook);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHook</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> WebhookPutWithHttpInfo(WebHook webHook, int operationIndex = 0)
        {
            // verify the required parameter 'webHook' is set
            if (webHook == null)
            {
                throw new Invoicetronic.Invoice.Sdk.Client.ApiException(400, "Missing required parameter 'webHook' when calling WebhookApi->WebhookPut");
            }

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webHook;

            localVarRequestOptions.Operation = "WebhookApi.WebhookPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebHook>("/webhook", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHook</returns>
        public async System.Threading.Tasks.Task<WebHook> WebhookPutAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook> localVarResponse = await WebhookPutWithHttpInfoAsync(webHook, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Webhooks are used to notify external services about write events that occur in the API. You can subscribe to specific events and receive a notification when they occur.
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webHook"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHook)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHook>> WebhookPutWithHttpInfoAsync(WebHook webHook, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'webHook' is set
            if (webHook == null)
            {
                throw new Invoicetronic.Invoice.Sdk.Client.ApiException(400, "Missing required parameter 'webHook' when calling WebhookApi->WebhookPut");
            }


            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webHook;

            localVarRequestOptions.Operation = "WebhookApi.WebhookPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<WebHook>("/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook history items 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;WebHookHistory&gt;</returns>
        public List<WebHookHistory> WebhookhistoryGet(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHookHistory>> localVarResponse = WebhookhistoryGetWithHttpInfo(page, pageSize, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook history items 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;WebHookHistory&gt;</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHookHistory>> WebhookhistoryGetWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookhistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WebHookHistory>>("/webhookhistory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookhistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhook history items 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WebHookHistory&gt;</returns>
        public async System.Threading.Tasks.Task<List<WebHookHistory>> WebhookhistoryGetAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHookHistory>> localVarResponse = await WebhookhistoryGetWithHttpInfoAsync(page, pageSize, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhook history items 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WebHookHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<List<WebHookHistory>>> WebhookhistoryGetWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "WebhookApi.WebhookhistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WebHookHistory>>("/webhookhistory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookhistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook history item by id 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebHookHistory</returns>
        public WebHookHistory WebhookhistoryIdGet(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHookHistory> localVarResponse = WebhookhistoryIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook history item by id 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebHookHistory</returns>
        public Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHookHistory> WebhookhistoryIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.WebhookhistoryIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebHookHistory>("/webhookhistory/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookhistoryIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a webhook history item by id 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebHookHistory</returns>
        public async System.Threading.Tasks.Task<WebHookHistory> WebhookhistoryIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHookHistory> localVarResponse = await WebhookhistoryIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a webhook history item by id 
        /// </summary>
        /// <exception cref="Invoicetronic.Invoice.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebHookHistory)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Invoice.Sdk.Client.ApiResponse<WebHookHistory>> WebhookhistoryIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Invoicetronic.Invoice.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Invoice.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Invoicetronic.Invoice.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Invoice.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "WebhookApi.WebhookhistoryIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Invoice.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebHookHistory>("/webhookhistory/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WebhookhistoryIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
