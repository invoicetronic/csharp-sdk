/*
 * Italian eInvoice API
 *
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1] (Interchange Service). The API is designed by Invoicetronic to be simple and easy to use, abstracting away the Interchange Service's complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see:  - [Invoicetronic website][2] - [Invoice API reference][3]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/ [3]: https://api.invoicetronic.com/invoice/v1/docs 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.Invoice.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.Invoice.Sdk.Model
{
    /// <summary>
    /// CedentePrestatore
    /// </summary>
    [DataContract(Name = "CedentePrestatore")]
    public partial class CedentePrestatore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CedentePrestatore" /> class.
        /// </summary>
        /// <param name="datiAnagrafici">datiAnagrafici.</param>
        /// <param name="sede">sede.</param>
        /// <param name="stabileOrganizzazione">stabileOrganizzazione.</param>
        /// <param name="iscrizioneRea">iscrizioneRea.</param>
        /// <param name="contatti">contatti.</param>
        /// <param name="riferimentoAmministrazione">riferimentoAmministrazione.</param>
        public CedentePrestatore(DatiAnagraficiCedentePrestatore datiAnagrafici = default(DatiAnagraficiCedentePrestatore), SedeCedentePrestatore sede = default(SedeCedentePrestatore), StabileOrganizzazione stabileOrganizzazione = default(StabileOrganizzazione), IscrizioneREA iscrizioneRea = default(IscrizioneREA), Contatti contatti = default(Contatti), string riferimentoAmministrazione = default(string))
        {
            this.DatiAnagrafici = datiAnagrafici;
            this.Sede = sede;
            this.StabileOrganizzazione = stabileOrganizzazione;
            this.IscrizioneRea = iscrizioneRea;
            this.Contatti = contatti;
            this.RiferimentoAmministrazione = riferimentoAmministrazione;
        }

        /// <summary>
        /// Gets or Sets DatiAnagrafici
        /// </summary>
        [DataMember(Name = "dati_anagrafici", EmitDefaultValue = false)]
        public DatiAnagraficiCedentePrestatore DatiAnagrafici { get; set; }

        /// <summary>
        /// Gets or Sets Sede
        /// </summary>
        [DataMember(Name = "sede", EmitDefaultValue = false)]
        public SedeCedentePrestatore Sede { get; set; }

        /// <summary>
        /// Gets or Sets StabileOrganizzazione
        /// </summary>
        [DataMember(Name = "stabile_organizzazione", EmitDefaultValue = false)]
        public StabileOrganizzazione StabileOrganizzazione { get; set; }

        /// <summary>
        /// Gets or Sets IscrizioneRea
        /// </summary>
        [DataMember(Name = "iscrizione_rea", EmitDefaultValue = false)]
        public IscrizioneREA IscrizioneRea { get; set; }

        /// <summary>
        /// Gets or Sets Contatti
        /// </summary>
        [DataMember(Name = "contatti", EmitDefaultValue = false)]
        public Contatti Contatti { get; set; }

        /// <summary>
        /// Gets or Sets RiferimentoAmministrazione
        /// </summary>
        [DataMember(Name = "riferimento_amministrazione", EmitDefaultValue = true)]
        public string RiferimentoAmministrazione { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CedentePrestatore {\n");
            sb.Append("  DatiAnagrafici: ").Append(DatiAnagrafici).Append("\n");
            sb.Append("  Sede: ").Append(Sede).Append("\n");
            sb.Append("  StabileOrganizzazione: ").Append(StabileOrganizzazione).Append("\n");
            sb.Append("  IscrizioneRea: ").Append(IscrizioneRea).Append("\n");
            sb.Append("  Contatti: ").Append(Contatti).Append("\n");
            sb.Append("  RiferimentoAmministrazione: ").Append(RiferimentoAmministrazione).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
