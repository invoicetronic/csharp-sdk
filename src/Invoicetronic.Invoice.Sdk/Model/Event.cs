/*
 * Italian eInvoice API
 *
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. The API also provides advanced features as encryption at rest, invoice validation, multiple upload formats, webhooks, event logging, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.Invoice.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.Invoice.Sdk.Model
{
    /// <summary>
    /// Event
    /// </summary>
    [DataContract(Name = "Event")]
    public partial class Event : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="id">Unique identifier. Leave it at 0 for new records as it will be set automatically..</param>
        /// <param name="created">Creation date. It is set automatically..</param>
        /// <param name="varVersion">Row version, for optimistic concurrency. It is set automatically..</param>
        /// <param name="userId">User id..</param>
        /// <param name="apiKeyId">Api key id..</param>
        /// <param name="companyId">Company id..</param>
        /// <param name="method">Request method..</param>
        /// <param name="query">Request query..</param>
        /// <param name="endpoint">API endpoint..</param>
        /// <param name="apiVersion">Api version..</param>
        /// <param name="statusCode">Status code returned by the API..</param>
        /// <param name="dateTime">Date and time of the request..</param>
        /// <param name="error">Response error..</param>
        /// <param name="responseBody">Response payload. It is guaranteed to be cyphered at rest..</param>
        public Event(int id = default(int), DateTime created = default(DateTime), int varVersion = default(int), int userId = default(int), int apiKeyId = default(int), int? companyId = default(int?), string method = default(string), string query = default(string), string endpoint = default(string), int apiVersion = default(int), int statusCode = default(int), DateTime dateTime = default(DateTime), string error = default(string), string responseBody = default(string))
        {
            this.Id = id;
            this.Created = created;
            this.VarVersion = varVersion;
            this.UserId = userId;
            this.ApiKeyId = apiKeyId;
            this.CompanyId = companyId;
            this.Method = method;
            this.Query = query;
            this.Endpoint = endpoint;
            this.ApiVersion = apiVersion;
            this.StatusCode = statusCode;
            this.DateTime = dateTime;
            this.Error = error;
            this.ResponseBody = responseBody;
        }

        /// <summary>
        /// Unique identifier. Leave it at 0 for new records as it will be set automatically.
        /// </summary>
        /// <value>Unique identifier. Leave it at 0 for new records as it will be set automatically.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Creation date. It is set automatically.
        /// </summary>
        /// <value>Creation date. It is set automatically.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Row version, for optimistic concurrency. It is set automatically.
        /// </summary>
        /// <value>Row version, for optimistic concurrency. It is set automatically.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// User id.
        /// </summary>
        /// <value>User id.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Api key id.
        /// </summary>
        /// <value>Api key id.</value>
        [DataMember(Name = "api_key_id", EmitDefaultValue = false)]
        public int ApiKeyId { get; set; }

        /// <summary>
        /// Company id.
        /// </summary>
        /// <value>Company id.</value>
        [DataMember(Name = "company_id", EmitDefaultValue = true)]
        public int? CompanyId { get; set; }

        /// <summary>
        /// Request method.
        /// </summary>
        /// <value>Request method.</value>
        [DataMember(Name = "method", EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// Request query.
        /// </summary>
        /// <value>Request query.</value>
        [DataMember(Name = "query", EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// API endpoint.
        /// </summary>
        /// <value>API endpoint.</value>
        [DataMember(Name = "endpoint", EmitDefaultValue = true)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Api version.
        /// </summary>
        /// <value>Api version.</value>
        [DataMember(Name = "api_version", EmitDefaultValue = false)]
        public int ApiVersion { get; set; }

        /// <summary>
        /// Status code returned by the API.
        /// </summary>
        /// <value>Status code returned by the API.</value>
        [DataMember(Name = "status_code", EmitDefaultValue = false)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Date and time of the request.
        /// </summary>
        /// <value>Date and time of the request.</value>
        [DataMember(Name = "date_time", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Response error.
        /// </summary>
        /// <value>Response error.</value>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// Wether the request was successful.
        /// </summary>
        /// <value>Wether the request was successful.</value>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; private set; }

        /// <summary>
        /// Returns false as Success should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSuccess()
        {
            return false;
        }
        /// <summary>
        /// Response payload. It is guaranteed to be cyphered at rest.
        /// </summary>
        /// <value>Response payload. It is guaranteed to be cyphered at rest.</value>
        [DataMember(Name = "response_body", EmitDefaultValue = true)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ApiKeyId: ").Append(ApiKeyId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
