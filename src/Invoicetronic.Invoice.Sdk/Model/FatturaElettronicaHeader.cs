/*
 * Italian eInvoice API
 *
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1] (Interchange Service). The API is designed by Invoicetronic to be simple and easy to use, abstracting away the Interchange Service's complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see:  - [Invoicetronic website][2] - [Invoice API reference][3]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/ [3]: https://api.invoicetronic.com/invoice/v1/docs 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.Invoice.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.Invoice.Sdk.Model
{
    /// <summary>
    /// FatturaElettronicaHeader
    /// </summary>
    [DataContract(Name = "FatturaElettronicaHeader")]
    public partial class FatturaElettronicaHeader : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FatturaElettronicaHeader" /> class.
        /// </summary>
        /// <param name="datiTrasmissione">datiTrasmissione.</param>
        /// <param name="cedentePrestatore">cedentePrestatore.</param>
        /// <param name="rappresentanteFiscale">rappresentanteFiscale.</param>
        /// <param name="cessionarioCommittente">cessionarioCommittente.</param>
        /// <param name="terzoIntermediarioOSoggettoEmittente">terzoIntermediarioOSoggettoEmittente.</param>
        /// <param name="soggettoEmittente">soggettoEmittente.</param>
        public FatturaElettronicaHeader(DatiTrasmissione datiTrasmissione = default(DatiTrasmissione), CedentePrestatore cedentePrestatore = default(CedentePrestatore), RappresentanteFiscale rappresentanteFiscale = default(RappresentanteFiscale), CessionarioCommittente cessionarioCommittente = default(CessionarioCommittente), TerzoIntermediarioOSoggettoEmittente terzoIntermediarioOSoggettoEmittente = default(TerzoIntermediarioOSoggettoEmittente), string soggettoEmittente = default(string))
        {
            this.DatiTrasmissione = datiTrasmissione;
            this.CedentePrestatore = cedentePrestatore;
            this.RappresentanteFiscale = rappresentanteFiscale;
            this.CessionarioCommittente = cessionarioCommittente;
            this.TerzoIntermediarioOSoggettoEmittente = terzoIntermediarioOSoggettoEmittente;
            this.SoggettoEmittente = soggettoEmittente;
        }

        /// <summary>
        /// Gets or Sets DatiTrasmissione
        /// </summary>
        [DataMember(Name = "dati_trasmissione", EmitDefaultValue = false)]
        public DatiTrasmissione DatiTrasmissione { get; set; }

        /// <summary>
        /// Gets or Sets CedentePrestatore
        /// </summary>
        [DataMember(Name = "cedente_prestatore", EmitDefaultValue = false)]
        public CedentePrestatore CedentePrestatore { get; set; }

        /// <summary>
        /// Gets or Sets RappresentanteFiscale
        /// </summary>
        [DataMember(Name = "RappresentanteFiscale", EmitDefaultValue = false)]
        public RappresentanteFiscale RappresentanteFiscale { get; set; }

        /// <summary>
        /// Gets or Sets CessionarioCommittente
        /// </summary>
        [DataMember(Name = "cessionario_committente", EmitDefaultValue = false)]
        public CessionarioCommittente CessionarioCommittente { get; set; }

        /// <summary>
        /// Gets or Sets TerzoIntermediarioOSoggettoEmittente
        /// </summary>
        [DataMember(Name = "terzo_intermediario_o_soggetto_emittente", EmitDefaultValue = false)]
        public TerzoIntermediarioOSoggettoEmittente TerzoIntermediarioOSoggettoEmittente { get; set; }

        /// <summary>
        /// Gets or Sets SoggettoEmittente
        /// </summary>
        [DataMember(Name = "soggetto_emittente", EmitDefaultValue = true)]
        public string SoggettoEmittente { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FatturaElettronicaHeader {\n");
            sb.Append("  DatiTrasmissione: ").Append(DatiTrasmissione).Append("\n");
            sb.Append("  CedentePrestatore: ").Append(CedentePrestatore).Append("\n");
            sb.Append("  RappresentanteFiscale: ").Append(RappresentanteFiscale).Append("\n");
            sb.Append("  CessionarioCommittente: ").Append(CessionarioCommittente).Append("\n");
            sb.Append("  TerzoIntermediarioOSoggettoEmittente: ").Append(TerzoIntermediarioOSoggettoEmittente).Append("\n");
            sb.Append("  SoggettoEmittente: ").Append(SoggettoEmittente).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
