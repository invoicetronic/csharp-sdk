/*
 * Italian eInvoice API
 *
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.Invoice.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.Invoice.Sdk.Model
{
    /// <summary>
    /// IdTrasmittente
    /// </summary>
    [DataContract(Name = "IdTrasmittente")]
    public partial class IdTrasmittente : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdTrasmittente" /> class.
        /// </summary>
        /// <param name="idPaese">idPaese.</param>
        /// <param name="idCodice">idCodice.</param>
        public IdTrasmittente(string idPaese = default(string), string idCodice = default(string))
        {
            this.IdPaese = idPaese;
            this.IdCodice = idCodice;
        }

        /// <summary>
        /// Gets or Sets IdPaese
        /// </summary>
        [DataMember(Name = "id_paese", EmitDefaultValue = true)]
        public string IdPaese { get; set; }

        /// <summary>
        /// Gets or Sets IdCodice
        /// </summary>
        [DataMember(Name = "id_codice", EmitDefaultValue = true)]
        public string IdCodice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdTrasmittente {\n");
            sb.Append("  IdPaese: ").Append(IdPaese).Append("\n");
            sb.Append("  IdCodice: ").Append(IdCodice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
