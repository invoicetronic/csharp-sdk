/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Invoicetronic.Sdk.Api;
using Invoicetronic.Sdk.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Invoicetronic.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing CompanyApi
    /// </summary>
    public sealed class CompanyApiTests : ApiTestsBase
    {
        private readonly ICompanyApi _instance;

        public CompanyApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ICompanyApi>();
        }

        /// <summary>
        /// Test CompanyGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompanyGetAsyncTest()
        {
            Client.Option<int> page = default;
            Client.Option<int> pageSize = default;
            Client.Option<string> sort = default;
            var response = await _instance.CompanyGetAsync(page, pageSize, sort);
            var model = response.Ok();
            Assert.IsType<List<Company>>(model);
        }

        /// <summary>
        /// Test CompanyIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompanyIdDeleteAsyncTest()
        {
            int id = default;
            var response = await _instance.CompanyIdDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<Company>(model);
        }

        /// <summary>
        /// Test CompanyIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompanyIdGetAsyncTest()
        {
            int id = default;
            var response = await _instance.CompanyIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Company>(model);
        }

        /// <summary>
        /// Test CompanyPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompanyPostAsyncTest()
        {
            Company company = default;
            var response = await _instance.CompanyPostAsync(company);
            var model = response.Created();
            Assert.IsType<Company>(model);
        }

        /// <summary>
        /// Test CompanyPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CompanyPutAsyncTest()
        {
            Company company = default;
            var response = await _instance.CompanyPutAsync(company);
            var model = response.Ok();
            Assert.IsType<Company>(model);
        }
    }
}
