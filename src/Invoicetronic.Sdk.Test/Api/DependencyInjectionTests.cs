/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Api;
using Invoicetronic.Sdk.Extensions;
using Xunit;

namespace Invoicetronic.Sdk.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                BasicToken basicToken1 = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(basicToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureApi((context, services, options) =>
            {
                BasicToken basicToken1 = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(basicToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BasicToken basicToken1 = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(basicToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BasicToken basicToken1 = new BasicToken("<username>", "<password>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(basicToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var companyApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICompanyApi>();
            Assert.True(companyApi.HttpClient.BaseAddress != null);

            var logApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILogApi>();
            Assert.True(logApi.HttpClient.BaseAddress != null);

            var receiveApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReceiveApi>();
            Assert.True(receiveApi.HttpClient.BaseAddress != null);

            var sendApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISendApi>();
            Assert.True(sendApi.HttpClient.BaseAddress != null);

            var statusApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStatusApi>();
            Assert.True(statusApi.HttpClient.BaseAddress != null);

            var updateApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUpdateApi>();
            Assert.True(updateApi.HttpClient.BaseAddress != null);

            var webhookApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebhookApi>();
            Assert.True(webhookApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var companyApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICompanyApi>();
            Assert.True(companyApi.HttpClient.BaseAddress != null);

            var logApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILogApi>();
            Assert.True(logApi.HttpClient.BaseAddress != null);

            var receiveApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReceiveApi>();
            Assert.True(receiveApi.HttpClient.BaseAddress != null);

            var sendApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISendApi>();
            Assert.True(sendApi.HttpClient.BaseAddress != null);

            var statusApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStatusApi>();
            Assert.True(statusApi.HttpClient.BaseAddress != null);

            var updateApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUpdateApi>();
            Assert.True(updateApi.HttpClient.BaseAddress != null);

            var webhookApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebhookApi>();
            Assert.True(webhookApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var companyApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICompanyApi>();
            Assert.True(companyApi.HttpClient.BaseAddress != null);
            
            var logApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILogApi>();
            Assert.True(logApi.HttpClient.BaseAddress != null);
            
            var receiveApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReceiveApi>();
            Assert.True(receiveApi.HttpClient.BaseAddress != null);
            
            var sendApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISendApi>();
            Assert.True(sendApi.HttpClient.BaseAddress != null);
            
            var statusApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStatusApi>();
            Assert.True(statusApi.HttpClient.BaseAddress != null);
            
            var updateApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUpdateApi>();
            Assert.True(updateApi.HttpClient.BaseAddress != null);
            
            var webhookApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebhookApi>();
            Assert.True(webhookApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var companyApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICompanyApi>();
            Assert.True(companyApi.HttpClient.BaseAddress != null);

            var logApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILogApi>();
            Assert.True(logApi.HttpClient.BaseAddress != null);

            var receiveApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReceiveApi>();
            Assert.True(receiveApi.HttpClient.BaseAddress != null);

            var sendApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISendApi>();
            Assert.True(sendApi.HttpClient.BaseAddress != null);

            var statusApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStatusApi>();
            Assert.True(statusApi.HttpClient.BaseAddress != null);

            var updateApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUpdateApi>();
            Assert.True(updateApi.HttpClient.BaseAddress != null);

            var webhookApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebhookApi>();
            Assert.True(webhookApi.HttpClient.BaseAddress != null);
        }
    }
}
