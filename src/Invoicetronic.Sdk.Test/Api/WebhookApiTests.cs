/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Api;
// uncomment below to import models
//using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing WebhookApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhookApiTests : IDisposable
    {
        private WebhookApi instance;

        public WebhookApiTests()
        {
            instance = new WebhookApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhookApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WebhookApi
            //Assert.IsType<WebhookApi>(instance);
        }

        /// <summary>
        /// Test WebhookGet
        /// </summary>
        [Fact]
        public void WebhookGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? companyId = null;
            //int? page = null;
            //int? pageSize = null;
            //string sort = null;
            //string description = null;
            //bool? enabled = null;
            //string events = null;
            //string url = null;
            //var response = instance.WebhookGet(companyId, page, pageSize, sort, description, enabled, events, url);
            //Assert.IsType<List<WebHook>>(response);
        }

        /// <summary>
        /// Test WebhookIdDelete
        /// </summary>
        [Fact]
        public void WebhookIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.WebhookIdDelete(id);
            //Assert.IsType<WebHook>(response);
        }

        /// <summary>
        /// Test WebhookIdGet
        /// </summary>
        [Fact]
        public void WebhookIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.WebhookIdGet(id);
            //Assert.IsType<WebHook>(response);
        }

        /// <summary>
        /// Test WebhookPost
        /// </summary>
        [Fact]
        public void WebhookPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebHook webHook = null;
            //var response = instance.WebhookPost(webHook);
            //Assert.IsType<WebHook>(response);
        }

        /// <summary>
        /// Test WebhookPut
        /// </summary>
        [Fact]
        public void WebhookPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebHook webHook = null;
            //var response = instance.WebhookPut(webHook);
            //Assert.IsType<WebHook>(response);
        }

        /// <summary>
        /// Test WebhookhistoryGet
        /// </summary>
        [Fact]
        public void WebhookhistoryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string sort = null;
            //int? webhookId = null;
            //var response = instance.WebhookhistoryGet(page, pageSize, sort, webhookId);
            //Assert.IsType<List<WebHookHistory>>(response);
        }

        /// <summary>
        /// Test WebhookhistoryIdGet
        /// </summary>
        [Fact]
        public void WebhookhistoryIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.WebhookhistoryIdGet(id);
            //Assert.IsType<WebHookHistory>(response);
        }
    }
}
