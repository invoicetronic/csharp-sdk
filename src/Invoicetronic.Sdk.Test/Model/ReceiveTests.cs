/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Invoicetronic.Sdk.Model;
using Invoicetronic.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Invoicetronic.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing Receive
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ReceiveTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Receive
        //private Receive instance;

        public ReceiveTests()
        {
            // TODO uncomment below to create an instance of Receive
            //instance = new Receive();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Receive
        /// </summary>
        [Fact]
        public void ReceiveInstanceTest()
        {
            // TODO uncomment below to test "IsType" Receive
            //Assert.IsType<Receive>(instance);
        }

        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }

        /// <summary>
        /// Test the property 'Created'
        /// </summary>
        [Fact]
        public void CreatedTest()
        {
            // TODO unit test for the property 'Created'
        }

        /// <summary>
        /// Test the property 'VarVersion'
        /// </summary>
        [Fact]
        public void VarVersionTest()
        {
            // TODO unit test for the property 'VarVersion'
        }

        /// <summary>
        /// Test the property 'UserId'
        /// </summary>
        [Fact]
        public void UserIdTest()
        {
            // TODO unit test for the property 'UserId'
        }

        /// <summary>
        /// Test the property 'CompanyId'
        /// </summary>
        [Fact]
        public void CompanyIdTest()
        {
            // TODO unit test for the property 'CompanyId'
        }

        /// <summary>
        /// Test the property 'Committente'
        /// </summary>
        [Fact]
        public void CommittenteTest()
        {
            // TODO unit test for the property 'Committente'
        }

        /// <summary>
        /// Test the property 'Prestatore'
        /// </summary>
        [Fact]
        public void PrestatoreTest()
        {
            // TODO unit test for the property 'Prestatore'
        }

        /// <summary>
        /// Test the property 'Identifier'
        /// </summary>
        [Fact]
        public void IdentifierTest()
        {
            // TODO unit test for the property 'Identifier'
        }

        /// <summary>
        /// Test the property 'FileName'
        /// </summary>
        [Fact]
        public void FileNameTest()
        {
            // TODO unit test for the property 'FileName'
        }

        /// <summary>
        /// Test the property 'Format'
        /// </summary>
        [Fact]
        public void FormatTest()
        {
            // TODO unit test for the property 'Format'
        }

        /// <summary>
        /// Test the property 'Payload'
        /// </summary>
        [Fact]
        public void PayloadTest()
        {
            // TODO unit test for the property 'Payload'
        }

        /// <summary>
        /// Test the property 'LastUpdate'
        /// </summary>
        [Fact]
        public void LastUpdateTest()
        {
            // TODO unit test for the property 'LastUpdate'
        }

        /// <summary>
        /// Test the property 'DateSent'
        /// </summary>
        [Fact]
        public void DateSentTest()
        {
            // TODO unit test for the property 'DateSent'
        }

        /// <summary>
        /// Test the property 'Documents'
        /// </summary>
        [Fact]
        public void DocumentsTest()
        {
            // TODO unit test for the property 'Documents'
        }

        /// <summary>
        /// Test the property 'Encoding'
        /// </summary>
        [Fact]
        public void EncodingTest()
        {
            // TODO unit test for the property 'Encoding'
        }

        /// <summary>
        /// Test the property 'IsRead'
        /// </summary>
        [Fact]
        public void IsReadTest()
        {
            // TODO unit test for the property 'IsRead'
        }

        /// <summary>
        /// Test the property 'MessageId'
        /// </summary>
        [Fact]
        public void MessageIdTest()
        {
            // TODO unit test for the property 'MessageId'
        }
    }
}
