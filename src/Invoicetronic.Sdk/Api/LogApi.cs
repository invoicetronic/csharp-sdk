// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILogApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LogApiEvents Events { get; }

        /// <summary>
        /// List events
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogGetApiResponse"/>&gt;</returns>
        Task<ILogGetApiResponse> LogGetAsync(Option<int> companyId = default, Option<string> endpoint = default, Option<string> method = default, Option<int> apiVerion = default, Option<int> statusCode = default, Option<DateTime> dateCreatedFrom = default, Option<DateTime> dateCreatedTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, Option<string> query = default, Option<bool> success = default, Option<DateTime> dateTimeFrom = default, Option<DateTime> dateTimeTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List events
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </remarks>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogGetApiResponse"/>&gt;</returns>
        Task<ILogGetApiResponse> LogGetOrDefaultAsync(Option<int> companyId = default, Option<string> endpoint = default, Option<string> method = default, Option<int> apiVerion = default, Option<int> statusCode = default, Option<DateTime> dateCreatedFrom = default, Option<DateTime> dateCreatedTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, Option<string> query = default, Option<bool> success = default, Option<DateTime> dateTimeFrom = default, Option<DateTime> dateTimeTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogIdGetApiResponse"/>&gt;</returns>
        Task<ILogIdGetApiResponse> LogIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <remarks>
        /// Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </remarks>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogIdGetApiResponse"/>&gt;</returns>
        Task<ILogIdGetApiResponse> LogIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ILogGetApiResponse"/>
    /// </summary>
    public interface ILogGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<List<Event>>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ILogIdGetApiResponse"/>
    /// </summary>
    public interface ILogIdGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<Invoicetronic.Sdk.Model.Event>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LogApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnLogGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorLogGet;

        internal void ExecuteOnLogGet(LogApi.LogGetApiResponse apiResponse)
        {
            OnLogGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLogGet(Exception exception)
        {
            OnErrorLogGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnLogIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorLogIdGet;

        internal void ExecuteOnLogIdGet(LogApi.LogIdGetApiResponse apiResponse)
        {
            OnLogIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLogIdGet(Exception exception)
        {
            OnErrorLogIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LogApi : ILogApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LogApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LogApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogApi(ILogger<LogApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LogApiEvents logApiEvents,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LogApi>();
            HttpClient = httpClient;
            Events = logApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatLogGet(ref Option<int> companyId, ref Option<string> endpoint, ref Option<string> method, ref Option<int> apiVerion, ref Option<int> statusCode, ref Option<DateTime> dateCreatedFrom, ref Option<DateTime> dateCreatedTo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> sort, ref Option<string> query, ref Option<bool> success, ref Option<DateTime> dateTimeFrom, ref Option<DateTime> dateTimeTo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="endpoint"></param>
        /// <param name="method"></param>
        /// <param name="sort"></param>
        /// <param name="query"></param>
        /// <returns></returns>
        private void ValidateLogGet(Option<string> endpoint, Option<string> method, Option<string> sort, Option<string> query)
        {
            if (endpoint.IsSet && endpoint.Value == null)
                throw new ArgumentNullException(nameof(endpoint));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="endpoint"></param>
        /// <param name="method"></param>
        /// <param name="apiVerion"></param>
        /// <param name="statusCode"></param>
        /// <param name="dateCreatedFrom"></param>
        /// <param name="dateCreatedTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        /// <param name="query"></param>
        /// <param name="success"></param>
        /// <param name="dateTimeFrom"></param>
        /// <param name="dateTimeTo"></param>
        private void AfterLogGetDefaultImplementation(ILogGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> endpoint, Option<string> method, Option<int> apiVerion, Option<int> statusCode, Option<DateTime> dateCreatedFrom, Option<DateTime> dateCreatedTo, Option<int> page, Option<int> pageSize, Option<string> sort, Option<string> query, Option<bool> success, Option<DateTime> dateTimeFrom, Option<DateTime> dateTimeTo)
        {
            bool suppressDefaultLog = false;
            AfterLogGet(ref suppressDefaultLog, apiResponseLocalVar, companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="endpoint"></param>
        /// <param name="method"></param>
        /// <param name="apiVerion"></param>
        /// <param name="statusCode"></param>
        /// <param name="dateCreatedFrom"></param>
        /// <param name="dateCreatedTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        /// <param name="query"></param>
        /// <param name="success"></param>
        /// <param name="dateTimeFrom"></param>
        /// <param name="dateTimeTo"></param>
        partial void AfterLogGet(ref bool suppressDefaultLog, ILogGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> endpoint, Option<string> method, Option<int> apiVerion, Option<int> statusCode, Option<DateTime> dateCreatedFrom, Option<DateTime> dateCreatedTo, Option<int> page, Option<int> pageSize, Option<string> sort, Option<string> query, Option<bool> success, Option<DateTime> dateTimeFrom, Option<DateTime> dateTimeTo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="endpoint"></param>
        /// <param name="method"></param>
        /// <param name="apiVerion"></param>
        /// <param name="statusCode"></param>
        /// <param name="dateCreatedFrom"></param>
        /// <param name="dateCreatedTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        /// <param name="query"></param>
        /// <param name="success"></param>
        /// <param name="dateTimeFrom"></param>
        /// <param name="dateTimeTo"></param>
        private void OnErrorLogGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> endpoint, Option<string> method, Option<int> apiVerion, Option<int> statusCode, Option<DateTime> dateCreatedFrom, Option<DateTime> dateCreatedTo, Option<int> page, Option<int> pageSize, Option<string> sort, Option<string> query, Option<bool> success, Option<DateTime> dateTimeFrom, Option<DateTime> dateTimeTo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLogGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="endpoint"></param>
        /// <param name="method"></param>
        /// <param name="apiVerion"></param>
        /// <param name="statusCode"></param>
        /// <param name="dateCreatedFrom"></param>
        /// <param name="dateCreatedTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        /// <param name="query"></param>
        /// <param name="success"></param>
        /// <param name="dateTimeFrom"></param>
        /// <param name="dateTimeTo"></param>
        partial void OnErrorLogGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> endpoint, Option<string> method, Option<int> apiVerion, Option<int> statusCode, Option<DateTime> dateCreatedFrom, Option<DateTime> dateCreatedTo, Option<int> page, Option<int> pageSize, Option<string> sort, Option<string> query, Option<bool> success, Option<DateTime> dateTimeFrom, Option<DateTime> dateTimeTo);

        /// <summary>
        /// List events Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </summary>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogGetApiResponse"/>&gt;</returns>
        public async Task<ILogGetApiResponse> LogGetOrDefaultAsync(Option<int> companyId = default, Option<string> endpoint = default, Option<string> method = default, Option<int> apiVerion = default, Option<int> statusCode = default, Option<DateTime> dateCreatedFrom = default, Option<DateTime> dateCreatedTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, Option<string> query = default, Option<bool> success = default, Option<DateTime> dateTimeFrom = default, Option<DateTime> dateTimeTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LogGetAsync(companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List events Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="endpoint"> (optional)</param>
        /// <param name="method"> (optional)</param>
        /// <param name="apiVerion">Api version (optional)</param>
        /// <param name="statusCode">Response status code (optional)</param>
        /// <param name="dateCreatedFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateCreatedTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="success"> (optional)</param>
        /// <param name="dateTimeFrom">Date and time of the event (optional)</param>
        /// <param name="dateTimeTo">Date and time of the event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogGetApiResponse"/>&gt;</returns>
        public async Task<ILogGetApiResponse> LogGetAsync(Option<int> companyId = default, Option<string> endpoint = default, Option<string> method = default, Option<int> apiVerion = default, Option<int> statusCode = default, Option<DateTime> dateCreatedFrom = default, Option<DateTime> dateCreatedTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, Option<string> query = default, Option<bool> success = default, Option<DateTime> dateTimeFrom = default, Option<DateTime> dateTimeTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLogGet(endpoint, method, sort, query);

                FormatLogGet(ref companyId, ref endpoint, ref method, ref apiVerion, ref statusCode, ref dateCreatedFrom, ref dateCreatedTo, ref page, ref pageSize, ref sort, ref query, ref success, ref dateTimeFrom, ref dateTimeTo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/log"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/log");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (companyId.IsSet)
                        parseQueryStringLocalVar["company_id"] = ClientUtils.ParameterToString(companyId.Value);

                    if (endpoint.IsSet)
                        parseQueryStringLocalVar["endpoint"] = ClientUtils.ParameterToString(endpoint.Value);

                    if (method.IsSet)
                        parseQueryStringLocalVar["method"] = ClientUtils.ParameterToString(method.Value);

                    if (apiVerion.IsSet)
                        parseQueryStringLocalVar["api_verion"] = ClientUtils.ParameterToString(apiVerion.Value);

                    if (statusCode.IsSet)
                        parseQueryStringLocalVar["status_code"] = ClientUtils.ParameterToString(statusCode.Value);

                    if (dateCreatedFrom.IsSet)
                        parseQueryStringLocalVar["date_created_from"] = ClientUtils.ParameterToString(dateCreatedFrom.Value);

                    if (dateCreatedTo.IsSet)
                        parseQueryStringLocalVar["date_created_to"] = ClientUtils.ParameterToString(dateCreatedTo.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (query.IsSet)
                        parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query.Value);

                    if (success.IsSet)
                        parseQueryStringLocalVar["success"] = ClientUtils.ParameterToString(success.Value);

                    if (dateTimeFrom.IsSet)
                        parseQueryStringLocalVar["date_time_from"] = ClientUtils.ParameterToString(dateTimeFrom.Value);

                    if (dateTimeTo.IsSet)
                        parseQueryStringLocalVar["date_time_to"] = ClientUtils.ParameterToString(dateTimeTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<LogGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LogGetApiResponse>();

                        LogGetApiResponse apiResponseLocalVar = new LogGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/log", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLogGetDefaultImplementation(apiResponseLocalVar, companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo);

                        Events.ExecuteOnLogGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLogGetDefaultImplementation(e, "/log", uriBuilderLocalVar.Path, companyId, endpoint, method, apiVerion, statusCode, dateCreatedFrom, dateCreatedTo, page, pageSize, sort, query, success, dateTimeFrom, dateTimeTo);
                Events.ExecuteOnErrorLogGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LogGetApiResponse"/>
        /// </summary>
        public partial class LogGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ILogGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LogGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LogGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LogGetApiResponse(ILogger<LogGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Event> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Event>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<Event> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLogIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterLogIdGetDefaultImplementation(ILogIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterLogIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterLogIdGet(ref bool suppressDefaultLog, ILogIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorLogIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLogIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorLogIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Get an event by id Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </summary>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogIdGetApiResponse"/>&gt;</returns>
        public async Task<ILogIdGetApiResponse> LogIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LogIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an event by id Every API operation is logged and can be retrieved here. Log records are preserved for 15 days.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogIdGetApiResponse"/>&gt;</returns>
        public async Task<ILogIdGetApiResponse> LogIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatLogIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/log/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/log/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<LogIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LogIdGetApiResponse>();

                        LogIdGetApiResponse apiResponseLocalVar = new LogIdGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/log/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLogIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnLogIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLogIdGetDefaultImplementation(e, "/log/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorLogIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LogIdGetApiResponse"/>
        /// </summary>
        public partial class LogIdGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ILogIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LogIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LogIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LogIdGetApiResponse(ILogger<LogIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Event Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Event>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Invoicetronic.Sdk.Model.Event result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
