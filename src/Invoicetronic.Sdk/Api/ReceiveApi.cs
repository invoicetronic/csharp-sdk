// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IReceiveApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ReceiveApiEvents Events { get; }

        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveGetApiResponse"/>&gt;</returns>
        Task<IReceiveGetApiResponse> ReceiveGetAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveGetApiResponse"/>&gt;</returns>
        Task<IReceiveGetApiResponse> ReceiveGetOrDefaultAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdDeleteApiResponse"/>&gt;</returns>
        Task<IReceiveIdDeleteApiResponse> ReceiveIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdDeleteApiResponse"/>&gt;</returns>
        Task<IReceiveIdDeleteApiResponse> ReceiveIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdGetApiResponse"/>&gt;</returns>
        Task<IReceiveIdGetApiResponse> ReceiveIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdGetApiResponse"/>&gt;</returns>
        Task<IReceiveIdGetApiResponse> ReceiveIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IReceiveGetApiResponse"/>
    /// </summary>
    public interface IReceiveGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<List<Receive>>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IReceiveIdDeleteApiResponse"/>
    /// </summary>
    public interface IReceiveIdDeleteApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<Invoicetronic.Sdk.Model.Receive>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemHttpResult>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IReceiveIdGetApiResponse"/>
    /// </summary>
    public interface IReceiveIdGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<Invoicetronic.Sdk.Model.Receive>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ReceiveApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnReceiveGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorReceiveGet;

        internal void ExecuteOnReceiveGet(ReceiveApi.ReceiveGetApiResponse apiResponse)
        {
            OnReceiveGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReceiveGet(Exception exception)
        {
            OnErrorReceiveGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnReceiveIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorReceiveIdDelete;

        internal void ExecuteOnReceiveIdDelete(ReceiveApi.ReceiveIdDeleteApiResponse apiResponse)
        {
            OnReceiveIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReceiveIdDelete(Exception exception)
        {
            OnErrorReceiveIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnReceiveIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorReceiveIdGet;

        internal void ExecuteOnReceiveIdGet(ReceiveApi.ReceiveIdGetApiResponse apiResponse)
        {
            OnReceiveIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReceiveIdGet(Exception exception)
        {
            OnErrorReceiveIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ReceiveApi : IReceiveApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ReceiveApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ReceiveApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiveApi(ILogger<ReceiveApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ReceiveApiEvents receiveApiEvents,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ReceiveApi>();
            HttpClient = httpClient;
            Events = receiveApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatReceiveGet(ref Option<int> companyId, ref Option<string> identifier, ref Option<bool> unread, ref Option<string> committente, ref Option<string> prestatore, ref Option<string> fileName, ref Option<DateTime> lastUpdateFrom, ref Option<DateTime> lastUpdateTo, ref Option<DateTime> dateSentFrom, ref Option<DateTime> dateSentTo, ref Option<DateTime> documentDateFrom, ref Option<DateTime> documentDateTo, ref Option<string> documentNumber, ref Option<int> page, ref Option<int> pageSize, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="identifier"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="documentNumber"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateReceiveGet(Option<string> identifier, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<string> documentNumber, Option<string> sort)
        {
            if (identifier.IsSet && identifier.Value == null)
                throw new ArgumentNullException(nameof(identifier));

            if (committente.IsSet && committente.Value == null)
                throw new ArgumentNullException(nameof(committente));

            if (prestatore.IsSet && prestatore.Value == null)
                throw new ArgumentNullException(nameof(prestatore));

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName));

            if (documentNumber.IsSet && documentNumber.Value == null)
                throw new ArgumentNullException(nameof(documentNumber));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        private void AfterReceiveGetDefaultImplementation(IReceiveGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterReceiveGet(ref suppressDefaultLog, apiResponseLocalVar, companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        partial void AfterReceiveGet(ref bool suppressDefaultLog, IReceiveGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        private void OnErrorReceiveGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReceiveGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        partial void OnErrorReceiveGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort);

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveGetApiResponse"/>&gt;</returns>
        public async Task<IReceiveGetApiResponse> ReceiveGetOrDefaultAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReceiveGetAsync(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveGetApiResponse"/>&gt;</returns>
        public async Task<IReceiveGetApiResponse> ReceiveGetAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateReceiveGet(identifier, committente, prestatore, fileName, documentNumber, sort);

                FormatReceiveGet(ref companyId, ref identifier, ref unread, ref committente, ref prestatore, ref fileName, ref lastUpdateFrom, ref lastUpdateTo, ref dateSentFrom, ref dateSentTo, ref documentDateFrom, ref documentDateTo, ref documentNumber, ref page, ref pageSize, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/receive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/receive");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (companyId.IsSet)
                        parseQueryStringLocalVar["company_id"] = ClientUtils.ParameterToString(companyId.Value);

                    if (identifier.IsSet)
                        parseQueryStringLocalVar["identifier"] = ClientUtils.ParameterToString(identifier.Value);

                    if (unread.IsSet)
                        parseQueryStringLocalVar["unread"] = ClientUtils.ParameterToString(unread.Value);

                    if (committente.IsSet)
                        parseQueryStringLocalVar["committente"] = ClientUtils.ParameterToString(committente.Value);

                    if (prestatore.IsSet)
                        parseQueryStringLocalVar["prestatore"] = ClientUtils.ParameterToString(prestatore.Value);

                    if (fileName.IsSet)
                        parseQueryStringLocalVar["file_name"] = ClientUtils.ParameterToString(fileName.Value);

                    if (lastUpdateFrom.IsSet)
                        parseQueryStringLocalVar["last_update_from"] = ClientUtils.ParameterToString(lastUpdateFrom.Value);

                    if (lastUpdateTo.IsSet)
                        parseQueryStringLocalVar["last_update_to"] = ClientUtils.ParameterToString(lastUpdateTo.Value);

                    if (dateSentFrom.IsSet)
                        parseQueryStringLocalVar["date_sent_from"] = ClientUtils.ParameterToString(dateSentFrom.Value);

                    if (dateSentTo.IsSet)
                        parseQueryStringLocalVar["date_sent_to"] = ClientUtils.ParameterToString(dateSentTo.Value);

                    if (documentDateFrom.IsSet)
                        parseQueryStringLocalVar["document_date_from"] = ClientUtils.ParameterToString(documentDateFrom.Value);

                    if (documentDateTo.IsSet)
                        parseQueryStringLocalVar["document_date_to"] = ClientUtils.ParameterToString(documentDateTo.Value);

                    if (documentNumber.IsSet)
                        parseQueryStringLocalVar["document_number"] = ClientUtils.ParameterToString(documentNumber.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ReceiveGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReceiveGetApiResponse>();

                        ReceiveGetApiResponse apiResponseLocalVar = new ReceiveGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/receive", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReceiveGetDefaultImplementation(apiResponseLocalVar, companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);

                        Events.ExecuteOnReceiveGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReceiveGetDefaultImplementation(e, "/receive", uriBuilderLocalVar.Path, companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
                Events.ExecuteOnErrorReceiveGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReceiveGetApiResponse"/>
        /// </summary>
        public partial class ReceiveGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, IReceiveGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReceiveGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReceiveGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReceiveGetApiResponse(ILogger<ReceiveGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Receive> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Receive>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<Receive> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReceiveIdDelete(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterReceiveIdDeleteDefaultImplementation(IReceiveIdDeleteApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterReceiveIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterReceiveIdDelete(ref bool suppressDefaultLog, IReceiveIdDeleteApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorReceiveIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReceiveIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorReceiveIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IReceiveIdDeleteApiResponse> ReceiveIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReceiveIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IReceiveIdDeleteApiResponse> ReceiveIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatReceiveIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/receive/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/receive/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ReceiveIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReceiveIdDeleteApiResponse>();

                        ReceiveIdDeleteApiResponse apiResponseLocalVar = new ReceiveIdDeleteApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/receive/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReceiveIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnReceiveIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReceiveIdDeleteDefaultImplementation(e, "/receive/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorReceiveIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReceiveIdDeleteApiResponse"/>
        /// </summary>
        public partial class ReceiveIdDeleteApiResponse : Invoicetronic.Sdk.Client.ApiResponse, IReceiveIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReceiveIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReceiveIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReceiveIdDeleteApiResponse(ILogger<ReceiveIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Receive Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Receive>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Invoicetronic.Sdk.Model.Receive result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReceiveIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterReceiveIdGetDefaultImplementation(IReceiveIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterReceiveIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterReceiveIdGet(ref bool suppressDefaultLog, IReceiveIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorReceiveIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReceiveIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorReceiveIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdGetApiResponse"/>&gt;</returns>
        public async Task<IReceiveIdGetApiResponse> ReceiveIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReceiveIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReceiveIdGetApiResponse"/>&gt;</returns>
        public async Task<IReceiveIdGetApiResponse> ReceiveIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatReceiveIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/receive/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/receive/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ReceiveIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReceiveIdGetApiResponse>();

                        ReceiveIdGetApiResponse apiResponseLocalVar = new ReceiveIdGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/receive/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReceiveIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnReceiveIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReceiveIdGetDefaultImplementation(e, "/receive/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorReceiveIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReceiveIdGetApiResponse"/>
        /// </summary>
        public partial class ReceiveIdGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, IReceiveIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReceiveIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReceiveIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReceiveIdGetApiResponse(ILogger<ReceiveIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Receive Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Receive>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Invoicetronic.Sdk.Model.Receive result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
