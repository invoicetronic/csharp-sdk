/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiveApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>List&lt;Receive&gt;</returns>
        List<Receive> ReceiveGet(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default);

        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>ApiResponse of List&lt;Receive&gt;</returns>
        ApiResponse<List<Receive>> ReceiveGetWithHttpInfo(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default);
        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>Receive</returns>
        Receive ReceiveIdDelete(int id);

        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>ApiResponse of Receive</returns>
        ApiResponse<Receive> ReceiveIdDeleteWithHttpInfo(int id);
        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <returns>Receive</returns>
        Receive ReceiveIdGet(int id, bool? includePayload = default);

        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <returns>ApiResponse of Receive</returns>
        ApiResponse<Receive> ReceiveIdGetWithHttpInfo(int id, bool? includePayload = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiveApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Receive&gt;</returns>
        System.Threading.Tasks.Task<List<Receive>> ReceiveGetAsync(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List incoming invoices
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Receive&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Receive>>> ReceiveGetWithHttpInfoAsync(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        System.Threading.Tasks.Task<Receive> ReceiveIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receive>> ReceiveIdDeleteWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        System.Threading.Tasks.Task<Receive> ReceiveIdGetAsync(int id, bool? includePayload = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an incoming invoice by id
        /// </summary>
        /// <remarks>
        /// Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        System.Threading.Tasks.Task<ApiResponse<Receive>> ReceiveIdGetWithHttpInfoAsync(int id, bool? includePayload = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiveApi : IReceiveApiSync, IReceiveApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReceiveApi : IDisposable, IReceiveApi
    {
        private Invoicetronic.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ReceiveApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ReceiveApi(string basePath)
        {
            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ReceiveApi(Invoicetronic.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReceiveApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReceiveApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReceiveApi(HttpClient client, Invoicetronic.Sdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiveApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ReceiveApi(Invoicetronic.Sdk.Client.ISynchronousClient client, Invoicetronic.Sdk.Client.IAsynchronousClient asyncClient, Invoicetronic.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Invoicetronic.Sdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>List&lt;Receive&gt;</returns>
        public List<Receive> ReceiveGet(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<List<Receive>> localVarResponse = ReceiveGetWithHttpInfo(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>ApiResponse of List&lt;Receive&gt;</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<List<Receive>> ReceiveGetWithHttpInfo(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default)
        {
            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (unread != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "unread", unread));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (includePayload != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_payload", includePayload));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Receive>>("/receive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Receive&gt;</returns>
        public async System.Threading.Tasks.Task<List<Receive>> ReceiveGetAsync(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<List<Receive>> localVarResponse = await ReceiveGetWithHttpInfoAsync(companyId, identifier, unread, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, includePayload, page, pageSize, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming invoices Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional)</param>
        /// <param name="page">Page number. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Receive&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<List<Receive>>> ReceiveGetWithHttpInfoAsync(int? companyId = default, string identifier = default, bool? unread = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, bool? includePayload = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (unread != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "unread", unread));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (includePayload != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_payload", includePayload));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Receive>>("/receive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>Receive</returns>
        public Receive ReceiveIdDelete(int id)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Receive> localVarResponse = ReceiveIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>ApiResponse of Receive</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Receive> ReceiveIdDeleteWithHttpInfo(int id)
        {
            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Receive>("/receive/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        public async System.Threading.Tasks.Task<Receive> ReceiveIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Receive> localVarResponse = await ReceiveIdDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Receive>> ReceiveIdDeleteWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Receive>("/receive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <returns>Receive</returns>
        public Receive ReceiveIdGet(int id, bool? includePayload = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Receive> localVarResponse = ReceiveIdGetWithHttpInfo(id, includePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <returns>ApiResponse of Receive</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Receive> ReceiveIdGetWithHttpInfo(int id, bool? includePayload = default)
        {
            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includePayload != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_payload", includePayload));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Receive>("/receive/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Receive</returns>
        public async System.Threading.Tasks.Task<Receive> ReceiveIdGetAsync(int id, bool? includePayload = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Receive> localVarResponse = await ReceiveIdGetWithHttpInfoAsync(id, includePayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an incoming invoice by id Receive invoices are the invoices that are received from other companies. They are preserved for two years in the live environment and 24 hours in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="includePayload">Include payload in the response. Defaults to false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Receive)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Receive>> ReceiveIdGetWithHttpInfoAsync(int id, bool? includePayload = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includePayload != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_payload", includePayload));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Receive>("/receive/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReceiveIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
