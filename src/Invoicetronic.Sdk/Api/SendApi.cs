// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISendApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SendApiEvents Events { get; }

        /// <summary>
        /// Add an invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendFilePostApiResponse"/>&gt;</returns>
        Task<ISendFilePostApiResponse> SendFilePostAsync(System.IO.Stream file, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendFilePostApiResponse"/>&gt;</returns>
        Task<ISendFilePostApiResponse> SendFilePostOrDefaultAsync(System.IO.Stream file, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGetApiResponse"/>&gt;</returns>
        Task<ISendGetApiResponse> SendGetAsync(Option<int> companyId = default, Option<string> identifier = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGetApiResponse"/>&gt;</returns>
        Task<ISendGetApiResponse> SendGetOrDefaultAsync(Option<int> companyId = default, Option<string> identifier = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendIdGetApiResponse"/>&gt;</returns>
        Task<ISendIdGetApiResponse> SendIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendIdGetApiResponse"/>&gt;</returns>
        Task<ISendIdGetApiResponse> SendIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendJsonPostApiResponse"/>&gt;</returns>
        Task<ISendJsonPostApiResponse> SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendJsonPostApiResponse"/>&gt;</returns>
        Task<ISendJsonPostApiResponse> SendJsonPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendPostApiResponse"/>&gt;</returns>
        Task<ISendPostApiResponse> SendPostAsync(Send send, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendPostApiResponse"/>&gt;</returns>
        Task<ISendPostApiResponse> SendPostOrDefaultAsync(Send send, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateFilePostApiResponse"/>&gt;</returns>
        Task<ISendValidateFilePostApiResponse> SendValidateFilePostAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateFilePostApiResponse"/>&gt;</returns>
        Task<ISendValidateFilePostApiResponse> SendValidateFilePostOrDefaultAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateJsonPostApiResponse"/>&gt;</returns>
        Task<ISendValidateJsonPostApiResponse> SendValidateJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateJsonPostApiResponse"/>&gt;</returns>
        Task<ISendValidateJsonPostApiResponse> SendValidateJsonPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidatePostApiResponse"/>&gt;</returns>
        Task<ISendValidatePostApiResponse> SendValidatePostAsync(Send send, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidatePostApiResponse"/>&gt;</returns>
        Task<ISendValidatePostApiResponse> SendValidatePostOrDefaultAsync(Send send, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateXmlPostApiResponse"/>&gt;</returns>
        Task<ISendValidateXmlPostApiResponse> SendValidateXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateXmlPostApiResponse"/>&gt;</returns>
        Task<ISendValidateXmlPostApiResponse> SendValidateXmlPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendXmlPostApiResponse"/>&gt;</returns>
        Task<ISendXmlPostApiResponse> SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendXmlPostApiResponse"/>&gt;</returns>
        Task<ISendXmlPostApiResponse> SendXmlPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ISendFilePostApiResponse"/>
    /// </summary>
    public interface ISendFilePostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, ICreated<Invoicetronic.Sdk.Model.Send>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendGetApiResponse"/>
    /// </summary>
    public interface ISendGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<List<Send>>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ISendIdGetApiResponse"/>
    /// </summary>
    public interface ISendIdGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<Invoicetronic.Sdk.Model.Send>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISendJsonPostApiResponse"/>
    /// </summary>
    public interface ISendJsonPostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, ICreated<Invoicetronic.Sdk.Model.Send>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendPostApiResponse"/>
    /// </summary>
    public interface ISendPostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, ICreated<Invoicetronic.Sdk.Model.Send>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendValidateFilePostApiResponse"/>
    /// </summary>
    public interface ISendValidateFilePostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendValidateJsonPostApiResponse"/>
    /// </summary>
    public interface ISendValidateJsonPostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendValidatePostApiResponse"/>
    /// </summary>
    public interface ISendValidatePostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendValidateXmlPostApiResponse"/>
    /// </summary>
    public interface ISendValidateXmlPostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendXmlPostApiResponse"/>
    /// </summary>
    public interface ISendXmlPostApiResponse : Invoicetronic.Sdk.Client.IApiResponse, ICreated<Invoicetronic.Sdk.Model.Send>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>, IUnprocessableContent<Invoicetronic.Sdk.Model.ProblemDetails>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SendApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendFilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendFilePost;

        internal void ExecuteOnSendFilePost(SendApi.SendFilePostApiResponse apiResponse)
        {
            OnSendFilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendFilePost(Exception exception)
        {
            OnErrorSendFilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendGet;

        internal void ExecuteOnSendGet(SendApi.SendGetApiResponse apiResponse)
        {
            OnSendGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendGet(Exception exception)
        {
            OnErrorSendGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendIdGet;

        internal void ExecuteOnSendIdGet(SendApi.SendIdGetApiResponse apiResponse)
        {
            OnSendIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendIdGet(Exception exception)
        {
            OnErrorSendIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendJsonPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendJsonPost;

        internal void ExecuteOnSendJsonPost(SendApi.SendJsonPostApiResponse apiResponse)
        {
            OnSendJsonPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendJsonPost(Exception exception)
        {
            OnErrorSendJsonPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendPost;

        internal void ExecuteOnSendPost(SendApi.SendPostApiResponse apiResponse)
        {
            OnSendPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendPost(Exception exception)
        {
            OnErrorSendPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendValidateFilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendValidateFilePost;

        internal void ExecuteOnSendValidateFilePost(SendApi.SendValidateFilePostApiResponse apiResponse)
        {
            OnSendValidateFilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendValidateFilePost(Exception exception)
        {
            OnErrorSendValidateFilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendValidateJsonPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendValidateJsonPost;

        internal void ExecuteOnSendValidateJsonPost(SendApi.SendValidateJsonPostApiResponse apiResponse)
        {
            OnSendValidateJsonPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendValidateJsonPost(Exception exception)
        {
            OnErrorSendValidateJsonPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendValidatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendValidatePost;

        internal void ExecuteOnSendValidatePost(SendApi.SendValidatePostApiResponse apiResponse)
        {
            OnSendValidatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendValidatePost(Exception exception)
        {
            OnErrorSendValidatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendValidateXmlPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendValidateXmlPost;

        internal void ExecuteOnSendValidateXmlPost(SendApi.SendValidateXmlPostApiResponse apiResponse)
        {
            OnSendValidateXmlPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendValidateXmlPost(Exception exception)
        {
            OnErrorSendValidateXmlPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSendXmlPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSendXmlPost;

        internal void ExecuteOnSendXmlPost(SendApi.SendXmlPostApiResponse apiResponse)
        {
            OnSendXmlPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendXmlPost(Exception exception)
        {
            OnErrorSendXmlPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SendApi : ISendApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SendApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SendApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendApi(ILogger<SendApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SendApiEvents sendApiEvents,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SendApi>();
            HttpClient = httpClient;
            Events = sendApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatSendFilePost(ref System.IO.Stream file, ref Option<bool> validate, ref Option<string> signature);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <param name="signature"></param>
        /// <returns></returns>
        private void ValidateSendFilePost(System.IO.Stream file, Option<string> signature)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void AfterSendFilePostDefaultImplementation(ISendFilePostApiResponse apiResponseLocalVar, System.IO.Stream file, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLog = false;
            AfterSendFilePost(ref suppressDefaultLog, apiResponseLocalVar, file, validate, signature);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void AfterSendFilePost(ref bool suppressDefaultLog, ISendFilePostApiResponse apiResponseLocalVar, System.IO.Stream file, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void OnErrorSendFilePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendFilePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, file, validate, signature);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void OnErrorSendFilePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Add an invoice by file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendFilePostApiResponse"/>&gt;</returns>
        public async Task<ISendFilePostApiResponse> SendFilePostOrDefaultAsync(System.IO.Stream file, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendFilePostAsync(file, validate, signature, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add an invoice by file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendFilePostApiResponse"/>&gt;</returns>
        public async Task<ISendFilePostApiResponse> SendFilePostAsync(System.IO.Stream file, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendFilePost(file, signature);

                FormatSendFilePost(ref file, ref validate, ref signature);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/file");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validate.IsSet)
                        parseQueryStringLocalVar["validate"] = ClientUtils.ParameterToString(validate.Value);

                    if (signature.IsSet)
                        parseQueryStringLocalVar["signature"] = ClientUtils.ParameterToString(signature.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string, string>> formParameterLocalVars = new List<KeyValuePair<string, string>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendFilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendFilePostApiResponse>();

                        SendFilePostApiResponse apiResponseLocalVar = new SendFilePostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendFilePostDefaultImplementation(apiResponseLocalVar, file, validate, signature);

                        Events.ExecuteOnSendFilePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendFilePostDefaultImplementation(e, "/send/file", uriBuilderLocalVar.Path, file, validate, signature);
                Events.ExecuteOnErrorSendFilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendFilePostApiResponse"/>
        /// </summary>
        public partial class SendFilePostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendFilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendFilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendFilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendFilePostApiResponse(ILogger<SendFilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Send Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Send>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out Invoicetronic.Sdk.Model.Send result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendGet(ref Option<int> companyId, ref Option<string> identifier, ref Option<string> committente, ref Option<string> prestatore, ref Option<string> fileName, ref Option<DateTime> lastUpdateFrom, ref Option<DateTime> lastUpdateTo, ref Option<DateTime> dateSentFrom, ref Option<DateTime> dateSentTo, ref Option<DateTime> documentDateFrom, ref Option<DateTime> documentDateTo, ref Option<string> documentNumber, ref Option<int> page, ref Option<int> pageSize, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="identifier"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="documentNumber"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateSendGet(Option<string> identifier, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<string> documentNumber, Option<string> sort)
        {
            if (identifier.IsSet && identifier.Value == null)
                throw new ArgumentNullException(nameof(identifier));

            if (committente.IsSet && committente.Value == null)
                throw new ArgumentNullException(nameof(committente));

            if (prestatore.IsSet && prestatore.Value == null)
                throw new ArgumentNullException(nameof(prestatore));

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName));

            if (documentNumber.IsSet && documentNumber.Value == null)
                throw new ArgumentNullException(nameof(documentNumber));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        private void AfterSendGetDefaultImplementation(ISendGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> identifier, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterSendGet(ref suppressDefaultLog, apiResponseLocalVar, companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        partial void AfterSendGet(ref bool suppressDefaultLog, ISendGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> identifier, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        private void OnErrorSendGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> identifier, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="committente"></param>
        /// <param name="prestatore"></param>
        /// <param name="fileName"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="documentDateFrom"></param>
        /// <param name="documentDateTo"></param>
        /// <param name="documentNumber"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        partial void OnErrorSendGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> identifier, Option<string> committente, Option<string> prestatore, Option<string> fileName, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<DateTime> documentDateFrom, Option<DateTime> documentDateTo, Option<string> documentNumber, Option<int> page, Option<int> pageSize, Option<string> sort);

        /// <summary>
        /// List invoices test **markdown**.
        /// </summary>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGetApiResponse"/>&gt;</returns>
        public async Task<ISendGetApiResponse> SendGetOrDefaultAsync(Option<int> companyId = default, Option<string> identifier = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendGetAsync(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List invoices test **markdown**.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGetApiResponse"/>&gt;</returns>
        public async Task<ISendGetApiResponse> SendGetAsync(Option<int> companyId = default, Option<string> identifier = default, Option<string> committente = default, Option<string> prestatore = default, Option<string> fileName = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<DateTime> documentDateFrom = default, Option<DateTime> documentDateTo = default, Option<string> documentNumber = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendGet(identifier, committente, prestatore, fileName, documentNumber, sort);

                FormatSendGet(ref companyId, ref identifier, ref committente, ref prestatore, ref fileName, ref lastUpdateFrom, ref lastUpdateTo, ref dateSentFrom, ref dateSentTo, ref documentDateFrom, ref documentDateTo, ref documentNumber, ref page, ref pageSize, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (companyId.IsSet)
                        parseQueryStringLocalVar["company_id"] = ClientUtils.ParameterToString(companyId.Value);

                    if (identifier.IsSet)
                        parseQueryStringLocalVar["identifier"] = ClientUtils.ParameterToString(identifier.Value);

                    if (committente.IsSet)
                        parseQueryStringLocalVar["committente"] = ClientUtils.ParameterToString(committente.Value);

                    if (prestatore.IsSet)
                        parseQueryStringLocalVar["prestatore"] = ClientUtils.ParameterToString(prestatore.Value);

                    if (fileName.IsSet)
                        parseQueryStringLocalVar["file_name"] = ClientUtils.ParameterToString(fileName.Value);

                    if (lastUpdateFrom.IsSet)
                        parseQueryStringLocalVar["last_update_from"] = ClientUtils.ParameterToString(lastUpdateFrom.Value);

                    if (lastUpdateTo.IsSet)
                        parseQueryStringLocalVar["last_update_to"] = ClientUtils.ParameterToString(lastUpdateTo.Value);

                    if (dateSentFrom.IsSet)
                        parseQueryStringLocalVar["date_sent_from"] = ClientUtils.ParameterToString(dateSentFrom.Value);

                    if (dateSentTo.IsSet)
                        parseQueryStringLocalVar["date_sent_to"] = ClientUtils.ParameterToString(dateSentTo.Value);

                    if (documentDateFrom.IsSet)
                        parseQueryStringLocalVar["document_date_from"] = ClientUtils.ParameterToString(documentDateFrom.Value);

                    if (documentDateTo.IsSet)
                        parseQueryStringLocalVar["document_date_to"] = ClientUtils.ParameterToString(documentDateTo.Value);

                    if (documentNumber.IsSet)
                        parseQueryStringLocalVar["document_number"] = ClientUtils.ParameterToString(documentNumber.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendGetApiResponse>();

                        SendGetApiResponse apiResponseLocalVar = new SendGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendGetDefaultImplementation(apiResponseLocalVar, companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);

                        Events.ExecuteOnSendGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendGetDefaultImplementation(e, "/send", uriBuilderLocalVar.Path, companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
                Events.ExecuteOnErrorSendGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendGetApiResponse"/>
        /// </summary>
        public partial class SendGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendGetApiResponse(ILogger<SendGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Send> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Send>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<Send> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterSendIdGetDefaultImplementation(ISendIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterSendIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterSendIdGet(ref bool suppressDefaultLog, ISendIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorSendIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorSendIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Get a invoice by id Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendIdGetApiResponse"/>&gt;</returns>
        public async Task<ISendIdGetApiResponse> SendIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a invoice by id Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendIdGetApiResponse"/>&gt;</returns>
        public async Task<ISendIdGetApiResponse> SendIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSendIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendIdGetApiResponse>();

                        SendIdGetApiResponse apiResponseLocalVar = new SendIdGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnSendIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendIdGetDefaultImplementation(e, "/send/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorSendIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendIdGetApiResponse"/>
        /// </summary>
        public partial class SendIdGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendIdGetApiResponse(ILogger<SendIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Send Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Send>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Invoicetronic.Sdk.Model.Send result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendJsonPost(FatturaOrdinaria fatturaOrdinaria, ref Option<bool> validate, ref Option<string> signature);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="signature"></param>
        /// <returns></returns>
        private void ValidateSendJsonPost(FatturaOrdinaria fatturaOrdinaria, Option<string> signature)
        {
            if (fatturaOrdinaria == null)
                throw new ArgumentNullException(nameof(fatturaOrdinaria));

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void AfterSendJsonPostDefaultImplementation(ISendJsonPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLog = false;
            AfterSendJsonPost(ref suppressDefaultLog, apiResponseLocalVar, fatturaOrdinaria, validate, signature);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void AfterSendJsonPost(ref bool suppressDefaultLog, ISendJsonPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void OnErrorSendJsonPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendJsonPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fatturaOrdinaria, validate, signature);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void OnErrorSendJsonPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Add an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendJsonPostApiResponse"/>&gt;</returns>
        public async Task<ISendJsonPostApiResponse> SendJsonPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendJsonPostAsync(fatturaOrdinaria, validate, signature, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendJsonPostApiResponse"/>&gt;</returns>
        public async Task<ISendJsonPostApiResponse> SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendJsonPost(fatturaOrdinaria, signature);

                FormatSendJsonPost(fatturaOrdinaria, ref validate, ref signature);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/json"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/json");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validate.IsSet)
                        parseQueryStringLocalVar["validate"] = ClientUtils.ParameterToString(validate.Value);

                    if (signature.IsSet)
                        parseQueryStringLocalVar["signature"] = ClientUtils.ParameterToString(signature.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (fatturaOrdinaria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(fatturaOrdinaria, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendJsonPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendJsonPostApiResponse>();

                        SendJsonPostApiResponse apiResponseLocalVar = new SendJsonPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/json", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendJsonPostDefaultImplementation(apiResponseLocalVar, fatturaOrdinaria, validate, signature);

                        Events.ExecuteOnSendJsonPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendJsonPostDefaultImplementation(e, "/send/json", uriBuilderLocalVar.Path, fatturaOrdinaria, validate, signature);
                Events.ExecuteOnErrorSendJsonPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendJsonPostApiResponse"/>
        /// </summary>
        public partial class SendJsonPostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendJsonPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendJsonPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendJsonPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendJsonPostApiResponse(ILogger<SendJsonPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Send Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Send>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out Invoicetronic.Sdk.Model.Send result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendPost(Send send, ref Option<bool> validate, ref Option<string> signature);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="send"></param>
        /// <param name="signature"></param>
        /// <returns></returns>
        private void ValidateSendPost(Send send, Option<string> signature)
        {
            if (send == null)
                throw new ArgumentNullException(nameof(send));

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="send"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void AfterSendPostDefaultImplementation(ISendPostApiResponse apiResponseLocalVar, Send send, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLog = false;
            AfterSendPost(ref suppressDefaultLog, apiResponseLocalVar, send, validate, signature);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="send"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void AfterSendPost(ref bool suppressDefaultLog, ISendPostApiResponse apiResponseLocalVar, Send send, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="send"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void OnErrorSendPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Send send, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, send, validate, signature);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="send"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void OnErrorSendPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Send send, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Add an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendPostApiResponse"/>&gt;</returns>
        public async Task<ISendPostApiResponse> SendPostOrDefaultAsync(Send send, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendPostAsync(send, validate, signature, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendPostApiResponse"/>&gt;</returns>
        public async Task<ISendPostApiResponse> SendPostAsync(Send send, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendPost(send, signature);

                FormatSendPost(send, ref validate, ref signature);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validate.IsSet)
                        parseQueryStringLocalVar["validate"] = ClientUtils.ParameterToString(validate.Value);

                    if (signature.IsSet)
                        parseQueryStringLocalVar["signature"] = ClientUtils.ParameterToString(signature.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (send as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(send, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendPostApiResponse>();

                        SendPostApiResponse apiResponseLocalVar = new SendPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendPostDefaultImplementation(apiResponseLocalVar, send, validate, signature);

                        Events.ExecuteOnSendPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendPostDefaultImplementation(e, "/send", uriBuilderLocalVar.Path, send, validate, signature);
                Events.ExecuteOnErrorSendPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendPostApiResponse"/>
        /// </summary>
        public partial class SendPostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendPostApiResponse(ILogger<SendPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Send Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Send>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out Invoicetronic.Sdk.Model.Send result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendValidateFilePost(ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateSendValidateFilePost(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        private void AfterSendValidateFilePostDefaultImplementation(ISendValidateFilePostApiResponse apiResponseLocalVar, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterSendValidateFilePost(ref suppressDefaultLog, apiResponseLocalVar, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        partial void AfterSendValidateFilePost(ref bool suppressDefaultLog, ISendValidateFilePostApiResponse apiResponseLocalVar, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        private void OnErrorSendValidateFilePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendValidateFilePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        partial void OnErrorSendValidateFilePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file);

        /// <summary>
        /// Validate an invoice file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateFilePostApiResponse"/>&gt;</returns>
        public async Task<ISendValidateFilePostApiResponse> SendValidateFilePostOrDefaultAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendValidateFilePostAsync(file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Validate an invoice file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateFilePostApiResponse"/>&gt;</returns>
        public async Task<ISendValidateFilePostApiResponse> SendValidateFilePostAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendValidateFilePost(file);

                FormatSendValidateFilePost(ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/validate/file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/validate/file");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string, string>> formParameterLocalVars = new List<KeyValuePair<string, string>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendValidateFilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendValidateFilePostApiResponse>();

                        SendValidateFilePostApiResponse apiResponseLocalVar = new SendValidateFilePostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/validate/file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendValidateFilePostDefaultImplementation(apiResponseLocalVar, file);

                        Events.ExecuteOnSendValidateFilePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendValidateFilePostDefaultImplementation(e, "/send/validate/file", uriBuilderLocalVar.Path, file);
                Events.ExecuteOnErrorSendValidateFilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendValidateFilePostApiResponse"/>
        /// </summary>
        public partial class SendValidateFilePostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendValidateFilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendValidateFilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendValidateFilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendValidateFilePostApiResponse(ILogger<SendValidateFilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendValidateJsonPost(FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns></returns>
        private void ValidateSendValidateJsonPost(FatturaOrdinaria fatturaOrdinaria)
        {
            if (fatturaOrdinaria == null)
                throw new ArgumentNullException(nameof(fatturaOrdinaria));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        private void AfterSendValidateJsonPostDefaultImplementation(ISendValidateJsonPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria)
        {
            bool suppressDefaultLog = false;
            AfterSendValidateJsonPost(ref suppressDefaultLog, apiResponseLocalVar, fatturaOrdinaria);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        partial void AfterSendValidateJsonPost(ref bool suppressDefaultLog, ISendValidateJsonPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        private void OnErrorSendValidateJsonPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendValidateJsonPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fatturaOrdinaria);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        partial void OnErrorSendValidateJsonPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Validate an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateJsonPostApiResponse"/>&gt;</returns>
        public async Task<ISendValidateJsonPostApiResponse> SendValidateJsonPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendValidateJsonPostAsync(fatturaOrdinaria, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Validate an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateJsonPostApiResponse"/>&gt;</returns>
        public async Task<ISendValidateJsonPostApiResponse> SendValidateJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendValidateJsonPost(fatturaOrdinaria);

                FormatSendValidateJsonPost(fatturaOrdinaria);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/validate/json"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/validate/json");

                    httpRequestMessageLocalVar.Content = (fatturaOrdinaria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(fatturaOrdinaria, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendValidateJsonPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendValidateJsonPostApiResponse>();

                        SendValidateJsonPostApiResponse apiResponseLocalVar = new SendValidateJsonPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/validate/json", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendValidateJsonPostDefaultImplementation(apiResponseLocalVar, fatturaOrdinaria);

                        Events.ExecuteOnSendValidateJsonPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendValidateJsonPostDefaultImplementation(e, "/send/validate/json", uriBuilderLocalVar.Path, fatturaOrdinaria);
                Events.ExecuteOnErrorSendValidateJsonPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendValidateJsonPostApiResponse"/>
        /// </summary>
        public partial class SendValidateJsonPostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendValidateJsonPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendValidateJsonPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendValidateJsonPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendValidateJsonPostApiResponse(ILogger<SendValidateJsonPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendValidatePost(Send send);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="send"></param>
        /// <returns></returns>
        private void ValidateSendValidatePost(Send send)
        {
            if (send == null)
                throw new ArgumentNullException(nameof(send));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="send"></param>
        private void AfterSendValidatePostDefaultImplementation(ISendValidatePostApiResponse apiResponseLocalVar, Send send)
        {
            bool suppressDefaultLog = false;
            AfterSendValidatePost(ref suppressDefaultLog, apiResponseLocalVar, send);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="send"></param>
        partial void AfterSendValidatePost(ref bool suppressDefaultLog, ISendValidatePostApiResponse apiResponseLocalVar, Send send);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="send"></param>
        private void OnErrorSendValidatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Send send)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendValidatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, send);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="send"></param>
        partial void OnErrorSendValidatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Send send);

        /// <summary>
        /// Validate an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidatePostApiResponse"/>&gt;</returns>
        public async Task<ISendValidatePostApiResponse> SendValidatePostOrDefaultAsync(Send send, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendValidatePostAsync(send, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Validate an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidatePostApiResponse"/>&gt;</returns>
        public async Task<ISendValidatePostApiResponse> SendValidatePostAsync(Send send, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendValidatePost(send);

                FormatSendValidatePost(send);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/validate"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/validate");

                    httpRequestMessageLocalVar.Content = (send as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(send, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendValidatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendValidatePostApiResponse>();

                        SendValidatePostApiResponse apiResponseLocalVar = new SendValidatePostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/validate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendValidatePostDefaultImplementation(apiResponseLocalVar, send);

                        Events.ExecuteOnSendValidatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendValidatePostDefaultImplementation(e, "/send/validate", uriBuilderLocalVar.Path, send);
                Events.ExecuteOnErrorSendValidatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendValidatePostApiResponse"/>
        /// </summary>
        public partial class SendValidatePostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendValidatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendValidatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendValidatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendValidatePostApiResponse(ILogger<SendValidatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendValidateXmlPost(FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns></returns>
        private void ValidateSendValidateXmlPost(FatturaOrdinaria fatturaOrdinaria)
        {
            if (fatturaOrdinaria == null)
                throw new ArgumentNullException(nameof(fatturaOrdinaria));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        private void AfterSendValidateXmlPostDefaultImplementation(ISendValidateXmlPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria)
        {
            bool suppressDefaultLog = false;
            AfterSendValidateXmlPost(ref suppressDefaultLog, apiResponseLocalVar, fatturaOrdinaria);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        partial void AfterSendValidateXmlPost(ref bool suppressDefaultLog, ISendValidateXmlPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        private void OnErrorSendValidateXmlPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendValidateXmlPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fatturaOrdinaria);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        partial void OnErrorSendValidateXmlPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Validate an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateXmlPostApiResponse"/>&gt;</returns>
        public async Task<ISendValidateXmlPostApiResponse> SendValidateXmlPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendValidateXmlPostAsync(fatturaOrdinaria, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Validate an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendValidateXmlPostApiResponse"/>&gt;</returns>
        public async Task<ISendValidateXmlPostApiResponse> SendValidateXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendValidateXmlPost(fatturaOrdinaria);

                FormatSendValidateXmlPost(fatturaOrdinaria);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/validate/xml"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/validate/xml");

                    httpRequestMessageLocalVar.Content = (fatturaOrdinaria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(fatturaOrdinaria, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/xml"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendValidateXmlPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendValidateXmlPostApiResponse>();

                        SendValidateXmlPostApiResponse apiResponseLocalVar = new SendValidateXmlPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/validate/xml", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendValidateXmlPostDefaultImplementation(apiResponseLocalVar, fatturaOrdinaria);

                        Events.ExecuteOnSendValidateXmlPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendValidateXmlPostDefaultImplementation(e, "/send/validate/xml", uriBuilderLocalVar.Path, fatturaOrdinaria);
                Events.ExecuteOnErrorSendValidateXmlPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendValidateXmlPostApiResponse"/>
        /// </summary>
        public partial class SendValidateXmlPostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendValidateXmlPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendValidateXmlPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendValidateXmlPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendValidateXmlPostApiResponse(ILogger<SendValidateXmlPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendXmlPost(FatturaOrdinaria fatturaOrdinaria, ref Option<bool> validate, ref Option<string> signature);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="signature"></param>
        /// <returns></returns>
        private void ValidateSendXmlPost(FatturaOrdinaria fatturaOrdinaria, Option<string> signature)
        {
            if (fatturaOrdinaria == null)
                throw new ArgumentNullException(nameof(fatturaOrdinaria));

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void AfterSendXmlPostDefaultImplementation(ISendXmlPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLog = false;
            AfterSendXmlPost(ref suppressDefaultLog, apiResponseLocalVar, fatturaOrdinaria, validate, signature);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void AfterSendXmlPost(ref bool suppressDefaultLog, ISendXmlPostApiResponse apiResponseLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        private void OnErrorSendXmlPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendXmlPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fatturaOrdinaria, validate, signature);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate"></param>
        /// <param name="signature"></param>
        partial void OnErrorSendXmlPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FatturaOrdinaria fatturaOrdinaria, Option<bool> validate, Option<string> signature);

        /// <summary>
        /// Add an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendXmlPostApiResponse"/>&gt;</returns>
        public async Task<ISendXmlPostApiResponse> SendXmlPostOrDefaultAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendXmlPostAsync(fatturaOrdinaria, validate, signature, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendXmlPostApiResponse"/>&gt;</returns>
        public async Task<ISendXmlPostApiResponse> SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, Option<bool> validate = default, Option<string> signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendXmlPost(fatturaOrdinaria, signature);

                FormatSendXmlPost(fatturaOrdinaria, ref validate, ref signature);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/send/xml"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/send/xml");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validate.IsSet)
                        parseQueryStringLocalVar["validate"] = ClientUtils.ParameterToString(validate.Value);

                    if (signature.IsSet)
                        parseQueryStringLocalVar["signature"] = ClientUtils.ParameterToString(signature.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (fatturaOrdinaria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(fatturaOrdinaria, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/xml"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SendXmlPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendXmlPostApiResponse>();

                        SendXmlPostApiResponse apiResponseLocalVar = new SendXmlPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/send/xml", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendXmlPostDefaultImplementation(apiResponseLocalVar, fatturaOrdinaria, validate, signature);

                        Events.ExecuteOnSendXmlPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendXmlPostDefaultImplementation(e, "/send/xml", uriBuilderLocalVar.Path, fatturaOrdinaria, validate, signature);
                Events.ExecuteOnErrorSendXmlPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendXmlPostApiResponse"/>
        /// </summary>
        public partial class SendXmlPostApiResponse : Invoicetronic.Sdk.Client.ApiResponse, ISendXmlPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendXmlPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendXmlPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendXmlPostApiResponse(ILogger<SendXmlPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Send Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Send>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated(out Invoicetronic.Sdk.Model.Send result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemDetails UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Invoicetronic.Sdk.Model.ProblemDetails result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
