/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        Send SendFilePost(FileParameter file, bool? validate = default, string signature = default);

        /// <summary>
        /// Add an invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> SendFilePostWithHttpInfo(FileParameter file, bool? validate = default, string signature = default);
        /// <summary>
        /// List invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>List&lt;Send&gt;</returns>
        List<Send> SendGet(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default);

        /// <summary>
        /// List invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>ApiResponse of List&lt;Send&gt;</returns>
        ApiResponse<List<Send>> SendGetWithHttpInfo(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default);
        /// <summary>
        /// Get a invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>Send</returns>
        Send SendIdGet(int id);

        /// <summary>
        /// Get a invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> SendIdGetWithHttpInfo(int id);
        /// <summary>
        /// Add an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        Send SendJsonPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default);

        /// <summary>
        /// Add an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> SendJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default);
        /// <summary>
        /// Add an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        Send SendPost(Send send, bool? validate = default, string signature = default);

        /// <summary>
        /// Add an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> SendPostWithHttpInfo(Send send, bool? validate = default, string signature = default);
        /// <summary>
        /// Validate an invoice file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns></returns>
        void SendValidateFilePost(FileParameter file);

        /// <summary>
        /// Validate an invoice file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendValidateFilePostWithHttpInfo(FileParameter file);
        /// <summary>
        /// Validate an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns></returns>
        void SendValidateJsonPost(FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Validate an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendValidateJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria);
        /// <summary>
        /// Validate an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <returns></returns>
        void SendValidatePost(Send send);

        /// <summary>
        /// Validate an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendValidatePostWithHttpInfo(Send send);
        /// <summary>
        /// Validate an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns></returns>
        void SendValidateXmlPost(FatturaOrdinaria fatturaOrdinaria);

        /// <summary>
        /// Validate an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendValidateXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria);
        /// <summary>
        /// Add an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        Send SendXmlPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default);

        /// <summary>
        /// Add an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        ApiResponse<Send> SendXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add an invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> SendFilePostAsync(FileParameter file, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> SendFilePostWithHttpInfoAsync(FileParameter file, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Send&gt;</returns>
        System.Threading.Tasks.Task<List<Send>> SendGetAsync(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List invoices
        /// </summary>
        /// <remarks>
        /// test **markdown**.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Send&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Send>>> SendGetWithHttpInfoAsync(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get a invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> SendIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a invoice by id
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> SendIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Add an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> SendJsonPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Add an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> SendPostAsync(Send send, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> SendPostWithHttpInfoAsync(Send send, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate an invoice file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendValidateFilePostAsync(FileParameter file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice file
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendValidateFilePostWithHttpInfoAsync(FileParameter file, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendValidateJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice by json
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendValidateJsonPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendValidatePostAsync(Send send, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendValidatePostWithHttpInfoAsync(Send send, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validate an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendValidateXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validate an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendValidateXmlPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Add an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        System.Threading.Tasks.Task<Send> SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an invoice by xml
        /// </summary>
        /// <remarks>
        /// Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </remarks>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        System.Threading.Tasks.Task<ApiResponse<Send>> SendXmlPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISendApi : ISendApiSync, ISendApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SendApi : IDisposable, ISendApi
    {
        private Invoicetronic.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SendApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SendApi(string basePath)
        {
            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SendApi(Invoicetronic.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SendApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SendApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                new Invoicetronic.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SendApi(HttpClient client, Invoicetronic.Sdk.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Invoicetronic.Sdk.Client.Configuration.MergeConfigurations(
                Invoicetronic.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Invoicetronic.Sdk.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SendApi(Invoicetronic.Sdk.Client.ISynchronousClient client, Invoicetronic.Sdk.Client.IAsynchronousClient asyncClient, Invoicetronic.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Invoicetronic.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Invoicetronic.Sdk.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Invoicetronic.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Invoicetronic.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Invoicetronic.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Invoicetronic.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add an invoice by file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        public Send SendFilePost(FileParameter file, bool? validate = default, string signature = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = SendFilePostWithHttpInfo(file, validate, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice by file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Send> SendFilePostWithHttpInfo(FileParameter file, bool? validate = default, string signature = default)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling SendApi->SendFilePost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/send/file", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendFilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice by file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> SendFilePostAsync(FileParameter file, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = await SendFilePostWithHttpInfoAsync(file, validate, signature, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice by file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Send>> SendFilePostWithHttpInfoAsync(FileParameter file, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling SendApi->SendFilePost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/send/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendFilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>List&lt;Send&gt;</returns>
        public List<Send> SendGet(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<List<Send>> localVarResponse = SendGetWithHttpInfo(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <returns>ApiResponse of List&lt;Send&gt;</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<List<Send>> SendGetWithHttpInfo(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default)
        {
            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Send>>("/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Send&gt;</returns>
        public async System.Threading.Tasks.Task<List<Send>> SendGetAsync(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<List<Send>> localVarResponse = await SendGetWithHttpInfoAsync(companyId, identifier, committente, prestatore, fileName, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, documentDateFrom, documentDateTo, documentNumber, page, pageSize, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List invoices test **markdown**.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="committente">Vat number or fiscal code. (optional)</param>
        /// <param name="prestatore">Vat number or fiscal code. (optional)</param>
        /// <param name="fileName">File name. (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentDateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="documentNumber">Document number. (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Send&gt;)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<List<Send>>> SendGetWithHttpInfoAsync(int? companyId = default, string identifier = default, string committente = default, string prestatore = default, string fileName = default, DateTime? lastUpdateFrom = default, DateTime? lastUpdateTo = default, DateTime? dateSentFrom = default, DateTime? dateSentTo = default, DateTime? documentDateFrom = default, DateTime? documentDateTo = default, string documentNumber = default, int? page = default, int? pageSize = default, string sort = default, System.Threading.CancellationToken cancellationToken = default)
        {

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (companyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            }
            if (identifier != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            }
            if (committente != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "committente", committente));
            }
            if (prestatore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "prestatore", prestatore));
            }
            if (fileName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_name", fileName));
            }
            if (lastUpdateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_from", lastUpdateFrom));
            }
            if (lastUpdateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update_to", lastUpdateTo));
            }
            if (dateSentFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_from", dateSentFrom));
            }
            if (dateSentTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_sent_to", dateSentTo));
            }
            if (documentDateFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_from", documentDateFrom));
            }
            if (documentDateTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_date_to", documentDateTo));
            }
            if (documentNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "document_number", documentNumber));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Send>>("/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a invoice by id Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>Send</returns>
        public Send SendIdGet(int id)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = SendIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a invoice by id Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Send> SendIdGetWithHttpInfo(int id)
        {
            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Send>("/send/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a invoice by id Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> SendIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = await SendIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a invoice by id Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Send>> SendIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Invoicetronic.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Send>("/send/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        public Send SendJsonPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = SendJsonPostWithHttpInfo(fatturaOrdinaria, validate, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Send> SendJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendJsonPost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/send/json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendJsonPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> SendJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = await SendJsonPostWithHttpInfoAsync(fatturaOrdinaria, validate, signature, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Send>> SendJsonPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendJsonPost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/send/json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendJsonPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        public Send SendPost(Send send, bool? validate = default, string signature = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = SendPostWithHttpInfo(send, validate, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Send> SendPostWithHttpInfo(Send send, bool? validate = default, string signature = default)
        {
            // verify the required parameter 'send' is set
            if (send == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'send' when calling SendApi->SendPost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.Data = send;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/send", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> SendPostAsync(Send send, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = await SendPostWithHttpInfoAsync(send, validate, signature, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Send>> SendPostWithHttpInfoAsync(Send send, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'send' is set
            if (send == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'send' when calling SendApi->SendPost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.Data = send;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns></returns>
        public void SendValidateFilePost(FileParameter file)
        {
            SendValidateFilePostWithHttpInfo(file);
        }

        /// <summary>
        /// Validate an invoice file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Object> SendValidateFilePostWithHttpInfo(FileParameter file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling SendApi->SendValidateFilePost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/send/validate/file", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidateFilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendValidateFilePostAsync(FileParameter file, System.Threading.CancellationToken cancellationToken = default)
        {
            await SendValidateFilePostWithHttpInfoAsync(file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate an invoice file Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Object>> SendValidateFilePostWithHttpInfoAsync(FileParameter file, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling SendApi->SendValidateFilePost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/send/validate/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidateFilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns></returns>
        public void SendValidateJsonPost(FatturaOrdinaria fatturaOrdinaria)
        {
            SendValidateJsonPostWithHttpInfo(fatturaOrdinaria);
        }

        /// <summary>
        /// Validate an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Object> SendValidateJsonPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendValidateJsonPost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/send/validate/json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidateJsonPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendValidateJsonPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            await SendValidateJsonPostWithHttpInfoAsync(fatturaOrdinaria, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate an invoice by json Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Object>> SendValidateJsonPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendValidateJsonPost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/send/validate/json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidateJsonPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <returns></returns>
        public void SendValidatePost(Send send)
        {
            SendValidatePostWithHttpInfo(send);
        }

        /// <summary>
        /// Validate an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Object> SendValidatePostWithHttpInfo(Send send)
        {
            // verify the required parameter 'send' is set
            if (send == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'send' when calling SendApi->SendValidatePost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = send;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/send/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendValidatePostAsync(Send send, System.Threading.CancellationToken cancellationToken = default)
        {
            await SendValidatePostWithHttpInfoAsync(send, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate an invoice Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="send"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Object>> SendValidatePostWithHttpInfoAsync(Send send, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'send' is set
            if (send == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'send' when calling SendApi->SendValidatePost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = send;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/send/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns></returns>
        public void SendValidateXmlPost(FatturaOrdinaria fatturaOrdinaria)
        {
            SendValidateXmlPostWithHttpInfo(fatturaOrdinaria);
        }

        /// <summary>
        /// Validate an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Object> SendValidateXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendValidateXmlPost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/send/validate/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidateXmlPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendValidateXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            await SendValidateXmlPostWithHttpInfoAsync(fatturaOrdinaria, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Object>> SendValidateXmlPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendValidateXmlPost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/send/validate/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendValidateXmlPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>Send</returns>
        public Send SendXmlPost(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = SendXmlPostWithHttpInfo(fatturaOrdinaria, validate, signature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <returns>ApiResponse of Send</returns>
        public Invoicetronic.Sdk.Client.ApiResponse<Send> SendXmlPostWithHttpInfo(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendXmlPost");

            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Send>("/send/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendXmlPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Send</returns>
        public async System.Threading.Tasks.Task<Send> SendXmlPostAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            Invoicetronic.Sdk.Client.ApiResponse<Send> localVarResponse = await SendXmlPostWithHttpInfoAsync(fatturaOrdinaria, validate, signature, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an invoice by xml Send invoices are the invoices that are sent to the SDI. They are preserved for two years in the live environment and 15 days in the Sandbox.
        /// </summary>
        /// <exception cref="Invoicetronic.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="validate">Validate the document first, and reject it on failure. (optional, default to false)</param>
        /// <param name="signature">Whether to digitally sign the document. (optional, default to Auto)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Send)</returns>
        public async System.Threading.Tasks.Task<Invoicetronic.Sdk.Client.ApiResponse<Send>> SendXmlPostWithHttpInfoAsync(FatturaOrdinaria fatturaOrdinaria, bool? validate = default, string signature = default, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'fatturaOrdinaria' is set
            if (fatturaOrdinaria == null)
                throw new Invoicetronic.Sdk.Client.ApiException(400, "Missing required parameter 'fatturaOrdinaria' when calling SendApi->SendXmlPost");


            Invoicetronic.Sdk.Client.RequestOptions localVarRequestOptions = new Invoicetronic.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Invoicetronic.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (signature != null)
            {
                localVarRequestOptions.QueryParameters.Add(Invoicetronic.Sdk.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            }
            localVarRequestOptions.Data = fatturaOrdinaria;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Invoicetronic.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Send>("/send/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendXmlPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
