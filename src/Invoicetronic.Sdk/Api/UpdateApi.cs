// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Invoicetronic.Sdk.Client;
using Invoicetronic.Sdk.Model;

namespace Invoicetronic.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUpdateApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UpdateApiEvents Events { get; }

        /// <summary>
        /// List updates
        /// </summary>
        /// <remarks>
        /// Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGetApiResponse"/>&gt;</returns>
        Task<IUpdateGetApiResponse> UpdateGetAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<int> sendId = default, Option<string> state = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List updates
        /// </summary>
        /// <remarks>
        /// Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </remarks>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGetApiResponse"/>&gt;</returns>
        Task<IUpdateGetApiResponse> UpdateGetOrDefaultAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<int> sendId = default, Option<string> state = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an update by id
        /// </summary>
        /// <remarks>
        /// Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIdGetApiResponse"/>&gt;</returns>
        Task<IUpdateIdGetApiResponse> UpdateIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an update by id
        /// </summary>
        /// <remarks>
        /// Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </remarks>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIdGetApiResponse"/>&gt;</returns>
        Task<IUpdateIdGetApiResponse> UpdateIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IUpdateGetApiResponse"/>
    /// </summary>
    public interface IUpdateGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<List<Update>>, IBadRequest<Invoicetronic.Sdk.Model.ProblemHttpResult>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateIdGetApiResponse"/>
    /// </summary>
    public interface IUpdateIdGetApiResponse : Invoicetronic.Sdk.Client.IApiResponse, IOk<Invoicetronic.Sdk.Model.Update>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UpdateApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateGet;

        internal void ExecuteOnUpdateGet(UpdateApi.UpdateGetApiResponse apiResponse)
        {
            OnUpdateGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateGet(Exception exception)
        {
            OnErrorUpdateGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateIdGet;

        internal void ExecuteOnUpdateIdGet(UpdateApi.UpdateIdGetApiResponse apiResponse)
        {
            OnUpdateIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateIdGet(Exception exception)
        {
            OnErrorUpdateIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UpdateApi : IUpdateApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UpdateApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UpdateApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UpdateApi(ILogger<UpdateApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UpdateApiEvents updateApiEvents,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UpdateApi>();
            HttpClient = httpClient;
            Events = updateApiEvents;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatUpdateGet(ref Option<int> companyId, ref Option<string> identifier, ref Option<bool> unread, ref Option<int> sendId, ref Option<string> state, ref Option<DateTime> lastUpdateFrom, ref Option<DateTime> lastUpdateTo, ref Option<DateTime> dateSentFrom, ref Option<DateTime> dateSentTo, ref Option<int> page, ref Option<int> pageSize, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="identifier"></param>
        /// <param name="state"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateUpdateGet(Option<string> identifier, Option<string> state, Option<string> sort)
        {
            if (identifier.IsSet && identifier.Value == null)
                throw new ArgumentNullException(nameof(identifier));

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="sendId"></param>
        /// <param name="state"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        private void AfterUpdateGetDefaultImplementation(IUpdateGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<int> sendId, Option<string> state, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<int> page, Option<int> pageSize, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterUpdateGet(ref suppressDefaultLog, apiResponseLocalVar, companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="sendId"></param>
        /// <param name="state"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        partial void AfterUpdateGet(ref bool suppressDefaultLog, IUpdateGetApiResponse apiResponseLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<int> sendId, Option<string> state, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<int> page, Option<int> pageSize, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="sendId"></param>
        /// <param name="state"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        private void OnErrorUpdateGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<int> sendId, Option<string> state, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<int> page, Option<int> pageSize, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="companyId"></param>
        /// <param name="identifier"></param>
        /// <param name="unread"></param>
        /// <param name="sendId"></param>
        /// <param name="state"></param>
        /// <param name="lastUpdateFrom"></param>
        /// <param name="lastUpdateTo"></param>
        /// <param name="dateSentFrom"></param>
        /// <param name="dateSentTo"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sort"></param>
        partial void OnErrorUpdateGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> companyId, Option<string> identifier, Option<bool> unread, Option<int> sendId, Option<string> state, Option<DateTime> lastUpdateFrom, Option<DateTime> lastUpdateTo, Option<DateTime> dateSentFrom, Option<DateTime> dateSentTo, Option<int> page, Option<int> pageSize, Option<string> sort);

        /// <summary>
        /// List updates Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </summary>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGetApiResponse"/>&gt;</returns>
        public async Task<IUpdateGetApiResponse> UpdateGetOrDefaultAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<int> sendId = default, Option<string> state = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateGetAsync(companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List updates Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company id (optional)</param>
        /// <param name="identifier">SDI identifier. (optional)</param>
        /// <param name="unread">Unread items only. (optional)</param>
        /// <param name="sendId">Send item&#39;s id. (optional)</param>
        /// <param name="state">SDI state (optional)</param>
        /// <param name="lastUpdateFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="lastUpdateTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentFrom">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="dateSentTo">UTC ISO 8601 (2024-11-29T12:34:56Z) (optional)</param>
        /// <param name="page">Page number. Defaults to 1. (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Defaults to 50. Cannot be greater than 200. (optional, default to 100)</param>
        /// <param name="sort">Sort by field. Prefix with &#39;-&#39; for descending order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGetApiResponse"/>&gt;</returns>
        public async Task<IUpdateGetApiResponse> UpdateGetAsync(Option<int> companyId = default, Option<string> identifier = default, Option<bool> unread = default, Option<int> sendId = default, Option<string> state = default, Option<DateTime> lastUpdateFrom = default, Option<DateTime> lastUpdateTo = default, Option<DateTime> dateSentFrom = default, Option<DateTime> dateSentTo = default, Option<int> page = default, Option<int> pageSize = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateGet(identifier, state, sort);

                FormatUpdateGet(ref companyId, ref identifier, ref unread, ref sendId, ref state, ref lastUpdateFrom, ref lastUpdateTo, ref dateSentFrom, ref dateSentTo, ref page, ref pageSize, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/update");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (companyId.IsSet)
                        parseQueryStringLocalVar["company_id"] = ClientUtils.ParameterToString(companyId.Value);

                    if (identifier.IsSet)
                        parseQueryStringLocalVar["identifier"] = ClientUtils.ParameterToString(identifier.Value);

                    if (unread.IsSet)
                        parseQueryStringLocalVar["unread"] = ClientUtils.ParameterToString(unread.Value);

                    if (sendId.IsSet)
                        parseQueryStringLocalVar["send_id"] = ClientUtils.ParameterToString(sendId.Value);

                    if (state.IsSet)
                        parseQueryStringLocalVar["state"] = ClientUtils.ParameterToString(state.Value);

                    if (lastUpdateFrom.IsSet)
                        parseQueryStringLocalVar["last_update_from"] = ClientUtils.ParameterToString(lastUpdateFrom.Value);

                    if (lastUpdateTo.IsSet)
                        parseQueryStringLocalVar["last_update_to"] = ClientUtils.ParameterToString(lastUpdateTo.Value);

                    if (dateSentFrom.IsSet)
                        parseQueryStringLocalVar["date_sent_from"] = ClientUtils.ParameterToString(dateSentFrom.Value);

                    if (dateSentTo.IsSet)
                        parseQueryStringLocalVar["date_sent_to"] = ClientUtils.ParameterToString(dateSentTo.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateGetApiResponse>();

                        UpdateGetApiResponse apiResponseLocalVar = new UpdateGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateGetDefaultImplementation(apiResponseLocalVar, companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort);

                        Events.ExecuteOnUpdateGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateGetDefaultImplementation(e, "/update", uriBuilderLocalVar.Path, companyId, identifier, unread, sendId, state, lastUpdateFrom, lastUpdateTo, dateSentFrom, dateSentTo, page, pageSize, sort);
                Events.ExecuteOnErrorUpdateGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateGetApiResponse"/>
        /// </summary>
        public partial class UpdateGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, IUpdateGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateGetApiResponse(ILogger<UpdateGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Update> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Update>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<Update> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.ProblemHttpResult BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.ProblemHttpResult>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Invoicetronic.Sdk.Model.ProblemHttpResult result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterUpdateIdGetDefaultImplementation(IUpdateIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterUpdateIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterUpdateIdGet(ref bool suppressDefaultLog, IUpdateIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorUpdateIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorUpdateIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Get an update by id Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </summary>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIdGetApiResponse"/>&gt;</returns>
        public async Task<IUpdateIdGetApiResponse> UpdateIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an update by id Updates are notifications sent by the SDI about the status of invoices you sent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Item id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateIdGetApiResponse"/>&gt;</returns>
        public async Task<IUpdateIdGetApiResponse> UpdateIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatUpdateIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/update/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/update/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateIdGetApiResponse>();

                        UpdateIdGetApiResponse apiResponseLocalVar = new UpdateIdGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/update/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnUpdateIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateIdGetDefaultImplementation(e, "/update/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorUpdateIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateIdGetApiResponse"/>
        /// </summary>
        public partial class UpdateIdGetApiResponse : Invoicetronic.Sdk.Client.ApiResponse, IUpdateIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateIdGetApiResponse(ILogger<UpdateIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Invoicetronic.Sdk.Model.Update Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Invoicetronic.Sdk.Model.Update>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Invoicetronic.Sdk.Model.Update result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
