// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// Allegati
    /// </summary>
    public partial class Allegati : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Allegati" /> class.
        /// </summary>
        /// <param name="nomeAttachment">nomeAttachment</param>
        /// <param name="algoritmoCompressione">algoritmoCompressione</param>
        /// <param name="formatoAttachment">formatoAttachment</param>
        /// <param name="descrizioneAttachment">descrizioneAttachment</param>
        /// <param name="attachment">attachment</param>
        [JsonConstructor]
        public Allegati(Option<string> nomeAttachment = default, Option<string> algoritmoCompressione = default, Option<string> formatoAttachment = default, Option<string> descrizioneAttachment = default, Option<byte[]> attachment = default)
        {
            NomeAttachmentOption = nomeAttachment;
            AlgoritmoCompressioneOption = algoritmoCompressione;
            FormatoAttachmentOption = formatoAttachment;
            DescrizioneAttachmentOption = descrizioneAttachment;
            AttachmentOption = attachment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NomeAttachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NomeAttachmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets NomeAttachment
        /// </summary>
        [JsonPropertyName("nome_attachment")]
        public string NomeAttachment { get { return this.NomeAttachmentOption; } set { this.NomeAttachmentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AlgoritmoCompressione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AlgoritmoCompressioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlgoritmoCompressione
        /// </summary>
        [JsonPropertyName("algoritmo_compressione")]
        public string AlgoritmoCompressione { get { return this.AlgoritmoCompressioneOption; } set { this.AlgoritmoCompressioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FormatoAttachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FormatoAttachmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormatoAttachment
        /// </summary>
        [JsonPropertyName("formato_attachment")]
        public string FormatoAttachment { get { return this.FormatoAttachmentOption; } set { this.FormatoAttachmentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DescrizioneAttachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescrizioneAttachmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DescrizioneAttachment
        /// </summary>
        [JsonPropertyName("descrizione_attachment")]
        public string DescrizioneAttachment { get { return this.DescrizioneAttachmentOption; } set { this.DescrizioneAttachmentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Attachment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<byte[]> AttachmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachment
        /// </summary>
        [JsonPropertyName("attachment")]
        public byte[] Attachment { get { return this.AttachmentOption; } set { this.AttachmentOption = new Option<byte[]>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Allegati {\n");
            sb.Append("  NomeAttachment: ").Append(NomeAttachment).Append("\n");
            sb.Append("  AlgoritmoCompressione: ").Append(AlgoritmoCompressione).Append("\n");
            sb.Append("  FormatoAttachment: ").Append(FormatoAttachment).Append("\n");
            sb.Append("  DescrizioneAttachment: ").Append(DescrizioneAttachment).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Allegati" />
    /// </summary>
    public class AllegatiJsonConverter : JsonConverter<Allegati>
    {
        /// <summary>
        /// Deserializes json to <see cref="Allegati" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Allegati Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> nomeAttachment = default;
            Option<string> algoritmoCompressione = default;
            Option<string> formatoAttachment = default;
            Option<string> descrizioneAttachment = default;
            Option<byte[]> attachment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "nome_attachment":
                            nomeAttachment = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "algoritmo_compressione":
                            algoritmoCompressione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "formato_attachment":
                            formatoAttachment = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "descrizione_attachment":
                            descrizioneAttachment = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "attachment":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachment = new Option<byte[]>(JsonSerializer.Deserialize<byte[]>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Allegati(nomeAttachment, algoritmoCompressione, formatoAttachment, descrizioneAttachment, attachment);
        }

        /// <summary>
        /// Serializes a <see cref="Allegati" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="allegati"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Allegati allegati, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, allegati, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Allegati" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="allegati"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Allegati allegati, JsonSerializerOptions jsonSerializerOptions)
        {
            if (allegati.NomeAttachmentOption.IsSet)
                if (allegati.NomeAttachmentOption.Value != null)
                    writer.WriteString("nome_attachment", allegati.NomeAttachment);
                else
                    writer.WriteNull("nome_attachment");

            if (allegati.AlgoritmoCompressioneOption.IsSet)
                if (allegati.AlgoritmoCompressioneOption.Value != null)
                    writer.WriteString("algoritmo_compressione", allegati.AlgoritmoCompressione);
                else
                    writer.WriteNull("algoritmo_compressione");

            if (allegati.FormatoAttachmentOption.IsSet)
                if (allegati.FormatoAttachmentOption.Value != null)
                    writer.WriteString("formato_attachment", allegati.FormatoAttachment);
                else
                    writer.WriteNull("formato_attachment");

            if (allegati.DescrizioneAttachmentOption.IsSet)
                if (allegati.DescrizioneAttachmentOption.Value != null)
                    writer.WriteString("descrizione_attachment", allegati.DescrizioneAttachment);
                else
                    writer.WriteNull("descrizione_attachment");

            if (allegati.AttachmentOption.IsSet)
                if (allegati.AttachmentOption.Value != null)
                {
                    writer.WritePropertyName("attachment");
                    JsonSerializer.Serialize(writer, allegati.Attachment, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attachment");
        }
    }
}
