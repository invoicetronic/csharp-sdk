/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Invoicetronic.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Invoicetronic.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// AltriDatiGestionali
    /// </summary>
    [DataContract(Name = "AltriDatiGestionali")]
    public partial class AltriDatiGestionali : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AltriDatiGestionali" /> class.
        /// </summary>
        /// <param name="tipoDato">tipoDato.</param>
        /// <param name="riferimentoTesto">riferimentoTesto.</param>
        /// <param name="riferimentoNumero">riferimentoNumero.</param>
        /// <param name="riferimentoData">riferimentoData.</param>
        public AltriDatiGestionali(string tipoDato = default, string riferimentoTesto = default, double? riferimentoNumero = default, DateTime? riferimentoData = default)
        {
            this.TipoDato = tipoDato;
            this.RiferimentoTesto = riferimentoTesto;
            this.RiferimentoNumero = riferimentoNumero;
            this.RiferimentoData = riferimentoData;
        }

        /// <summary>
        /// Gets or Sets TipoDato
        /// </summary>
        [DataMember(Name = "tipo_dato", EmitDefaultValue = true)]
        public string TipoDato { get; set; }

        /// <summary>
        /// Gets or Sets RiferimentoTesto
        /// </summary>
        [DataMember(Name = "riferimento_testo", EmitDefaultValue = true)]
        public string RiferimentoTesto { get; set; }

        /// <summary>
        /// Gets or Sets RiferimentoNumero
        /// </summary>
        [DataMember(Name = "riferimento_numero", EmitDefaultValue = true)]
        public double? RiferimentoNumero { get; set; }

        /// <summary>
        /// Gets or Sets RiferimentoData
        /// </summary>
        [DataMember(Name = "riferimento_data", EmitDefaultValue = true)]
        public DateTime? RiferimentoData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AltriDatiGestionali {\n");
            sb.Append("  TipoDato: ").Append(TipoDato).Append("\n");
            sb.Append("  RiferimentoTesto: ").Append(RiferimentoTesto).Append("\n");
            sb.Append("  RiferimentoNumero: ").Append(RiferimentoNumero).Append("\n");
            sb.Append("  RiferimentoData: ").Append(RiferimentoData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
