// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// Anagrafica
    /// </summary>
    public partial class Anagrafica : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Anagrafica" /> class.
        /// </summary>
        /// <param name="denominazione">denominazione</param>
        /// <param name="nome">nome</param>
        /// <param name="cognome">cognome</param>
        /// <param name="titolo">titolo</param>
        /// <param name="codEori">codEori</param>
        [JsonConstructor]
        public Anagrafica(Option<string> denominazione = default, Option<string> nome = default, Option<string> cognome = default, Option<string> titolo = default, Option<string> codEori = default)
        {
            DenominazioneOption = denominazione;
            NomeOption = nome;
            CognomeOption = cognome;
            TitoloOption = titolo;
            CodEoriOption = codEori;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Denominazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DenominazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Denominazione
        /// </summary>
        [JsonPropertyName("denominazione")]
        public string Denominazione { get { return this.DenominazioneOption; } set { this.DenominazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Nome
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NomeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [JsonPropertyName("nome")]
        public string Nome { get { return this.NomeOption; } set { this.NomeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cognome
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CognomeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cognome
        /// </summary>
        [JsonPropertyName("cognome")]
        public string Cognome { get { return this.CognomeOption; } set { this.CognomeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Titolo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TitoloOption { get; private set; }

        /// <summary>
        /// Gets or Sets Titolo
        /// </summary>
        [JsonPropertyName("titolo")]
        public string Titolo { get { return this.TitoloOption; } set { this.TitoloOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CodEori
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodEoriOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodEori
        /// </summary>
        [JsonPropertyName("cod_eori")]
        public string CodEori { get { return this.CodEoriOption; } set { this.CodEoriOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Anagrafica {\n");
            sb.Append("  Denominazione: ").Append(Denominazione).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Cognome: ").Append(Cognome).Append("\n");
            sb.Append("  Titolo: ").Append(Titolo).Append("\n");
            sb.Append("  CodEori: ").Append(CodEori).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Anagrafica" />
    /// </summary>
    public class AnagraficaJsonConverter : JsonConverter<Anagrafica>
    {
        /// <summary>
        /// Deserializes json to <see cref="Anagrafica" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Anagrafica Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> denominazione = default;
            Option<string> nome = default;
            Option<string> cognome = default;
            Option<string> titolo = default;
            Option<string> codEori = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "denominazione":
                            denominazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nome":
                            nome = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cognome":
                            cognome = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "titolo":
                            titolo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cod_eori":
                            codEori = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Anagrafica(denominazione, nome, cognome, titolo, codEori);
        }

        /// <summary>
        /// Serializes a <see cref="Anagrafica" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="anagrafica"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Anagrafica anagrafica, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, anagrafica, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Anagrafica" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="anagrafica"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Anagrafica anagrafica, JsonSerializerOptions jsonSerializerOptions)
        {
            if (anagrafica.DenominazioneOption.IsSet)
                if (anagrafica.DenominazioneOption.Value != null)
                    writer.WriteString("denominazione", anagrafica.Denominazione);
                else
                    writer.WriteNull("denominazione");

            if (anagrafica.NomeOption.IsSet)
                if (anagrafica.NomeOption.Value != null)
                    writer.WriteString("nome", anagrafica.Nome);
                else
                    writer.WriteNull("nome");

            if (anagrafica.CognomeOption.IsSet)
                if (anagrafica.CognomeOption.Value != null)
                    writer.WriteString("cognome", anagrafica.Cognome);
                else
                    writer.WriteNull("cognome");

            if (anagrafica.TitoloOption.IsSet)
                if (anagrafica.TitoloOption.Value != null)
                    writer.WriteString("titolo", anagrafica.Titolo);
                else
                    writer.WriteNull("titolo");

            if (anagrafica.CodEoriOption.IsSet)
                if (anagrafica.CodEoriOption.Value != null)
                    writer.WriteString("cod_eori", anagrafica.CodEori);
                else
                    writer.WriteNull("cod_eori");
        }
    }
}
