// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// CedentePrestatore
    /// </summary>
    public partial class CedentePrestatore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CedentePrestatore" /> class.
        /// </summary>
        /// <param name="datiAnagrafici">datiAnagrafici</param>
        /// <param name="sede">sede</param>
        /// <param name="stabileOrganizzazione">stabileOrganizzazione</param>
        /// <param name="iscrizioneRea">iscrizioneRea</param>
        /// <param name="contatti">contatti</param>
        /// <param name="riferimentoAmministrazione">riferimentoAmministrazione</param>
        [JsonConstructor]
        public CedentePrestatore(Option<DatiAnagraficiCedentePrestatore> datiAnagrafici = default, Option<SedeCedentePrestatore> sede = default, Option<StabileOrganizzazione> stabileOrganizzazione = default, Option<IscrizioneREA> iscrizioneRea = default, Option<Contatti> contatti = default, Option<string> riferimentoAmministrazione = default)
        {
            DatiAnagraficiOption = datiAnagrafici;
            SedeOption = sede;
            StabileOrganizzazioneOption = stabileOrganizzazione;
            IscrizioneReaOption = iscrizioneRea;
            ContattiOption = contatti;
            RiferimentoAmministrazioneOption = riferimentoAmministrazione;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DatiAnagrafici
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiAnagraficiCedentePrestatore> DatiAnagraficiOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiAnagrafici
        /// </summary>
        [JsonPropertyName("dati_anagrafici")]
        public DatiAnagraficiCedentePrestatore DatiAnagrafici { get { return this.DatiAnagraficiOption; } set { this.DatiAnagraficiOption = new Option<DatiAnagraficiCedentePrestatore>(value); } }

        /// <summary>
        /// Used to track the state of Sede
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SedeCedentePrestatore> SedeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sede
        /// </summary>
        [JsonPropertyName("sede")]
        public SedeCedentePrestatore Sede { get { return this.SedeOption; } set { this.SedeOption = new Option<SedeCedentePrestatore>(value); } }

        /// <summary>
        /// Used to track the state of StabileOrganizzazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StabileOrganizzazione> StabileOrganizzazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets StabileOrganizzazione
        /// </summary>
        [JsonPropertyName("stabile_organizzazione")]
        public StabileOrganizzazione StabileOrganizzazione { get { return this.StabileOrganizzazioneOption; } set { this.StabileOrganizzazioneOption = new Option<StabileOrganizzazione>(value); } }

        /// <summary>
        /// Used to track the state of IscrizioneRea
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IscrizioneREA> IscrizioneReaOption { get; private set; }

        /// <summary>
        /// Gets or Sets IscrizioneRea
        /// </summary>
        [JsonPropertyName("iscrizione_rea")]
        public IscrizioneREA IscrizioneRea { get { return this.IscrizioneReaOption; } set { this.IscrizioneReaOption = new Option<IscrizioneREA>(value); } }

        /// <summary>
        /// Used to track the state of Contatti
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Contatti> ContattiOption { get; private set; }

        /// <summary>
        /// Gets or Sets Contatti
        /// </summary>
        [JsonPropertyName("contatti")]
        public Contatti Contatti { get { return this.ContattiOption; } set { this.ContattiOption = new Option<Contatti>(value); } }

        /// <summary>
        /// Used to track the state of RiferimentoAmministrazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiferimentoAmministrazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiferimentoAmministrazione
        /// </summary>
        [JsonPropertyName("riferimento_amministrazione")]
        public string RiferimentoAmministrazione { get { return this.RiferimentoAmministrazioneOption; } set { this.RiferimentoAmministrazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CedentePrestatore {\n");
            sb.Append("  DatiAnagrafici: ").Append(DatiAnagrafici).Append("\n");
            sb.Append("  Sede: ").Append(Sede).Append("\n");
            sb.Append("  StabileOrganizzazione: ").Append(StabileOrganizzazione).Append("\n");
            sb.Append("  IscrizioneRea: ").Append(IscrizioneRea).Append("\n");
            sb.Append("  Contatti: ").Append(Contatti).Append("\n");
            sb.Append("  RiferimentoAmministrazione: ").Append(RiferimentoAmministrazione).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CedentePrestatore" />
    /// </summary>
    public class CedentePrestatoreJsonConverter : JsonConverter<CedentePrestatore>
    {
        /// <summary>
        /// Deserializes json to <see cref="CedentePrestatore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CedentePrestatore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DatiAnagraficiCedentePrestatore> datiAnagrafici = default;
            Option<SedeCedentePrestatore> sede = default;
            Option<StabileOrganizzazione> stabileOrganizzazione = default;
            Option<IscrizioneREA> iscrizioneRea = default;
            Option<Contatti> contatti = default;
            Option<string> riferimentoAmministrazione = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dati_anagrafici":
                            datiAnagrafici = new Option<DatiAnagraficiCedentePrestatore>(JsonSerializer.Deserialize<DatiAnagraficiCedentePrestatore>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sede":
                            sede = new Option<SedeCedentePrestatore>(JsonSerializer.Deserialize<SedeCedentePrestatore>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stabile_organizzazione":
                            stabileOrganizzazione = new Option<StabileOrganizzazione>(JsonSerializer.Deserialize<StabileOrganizzazione>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "iscrizione_rea":
                            iscrizioneRea = new Option<IscrizioneREA>(JsonSerializer.Deserialize<IscrizioneREA>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contatti":
                            contatti = new Option<Contatti>(JsonSerializer.Deserialize<Contatti>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "riferimento_amministrazione":
                            riferimentoAmministrazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (datiAnagrafici.IsSet && datiAnagrafici.Value == null)
                throw new ArgumentNullException(nameof(datiAnagrafici), "Property is not nullable for class CedentePrestatore.");

            if (sede.IsSet && sede.Value == null)
                throw new ArgumentNullException(nameof(sede), "Property is not nullable for class CedentePrestatore.");

            if (stabileOrganizzazione.IsSet && stabileOrganizzazione.Value == null)
                throw new ArgumentNullException(nameof(stabileOrganizzazione), "Property is not nullable for class CedentePrestatore.");

            if (iscrizioneRea.IsSet && iscrizioneRea.Value == null)
                throw new ArgumentNullException(nameof(iscrizioneRea), "Property is not nullable for class CedentePrestatore.");

            if (contatti.IsSet && contatti.Value == null)
                throw new ArgumentNullException(nameof(contatti), "Property is not nullable for class CedentePrestatore.");

            return new CedentePrestatore(datiAnagrafici, sede, stabileOrganizzazione, iscrizioneRea, contatti, riferimentoAmministrazione);
        }

        /// <summary>
        /// Serializes a <see cref="CedentePrestatore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cedentePrestatore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CedentePrestatore cedentePrestatore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cedentePrestatore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CedentePrestatore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cedentePrestatore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CedentePrestatore cedentePrestatore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cedentePrestatore.DatiAnagraficiOption.IsSet && cedentePrestatore.DatiAnagrafici == null)
                throw new ArgumentNullException(nameof(cedentePrestatore.DatiAnagrafici), "Property is required for class CedentePrestatore.");

            if (cedentePrestatore.SedeOption.IsSet && cedentePrestatore.Sede == null)
                throw new ArgumentNullException(nameof(cedentePrestatore.Sede), "Property is required for class CedentePrestatore.");

            if (cedentePrestatore.StabileOrganizzazioneOption.IsSet && cedentePrestatore.StabileOrganizzazione == null)
                throw new ArgumentNullException(nameof(cedentePrestatore.StabileOrganizzazione), "Property is required for class CedentePrestatore.");

            if (cedentePrestatore.IscrizioneReaOption.IsSet && cedentePrestatore.IscrizioneRea == null)
                throw new ArgumentNullException(nameof(cedentePrestatore.IscrizioneRea), "Property is required for class CedentePrestatore.");

            if (cedentePrestatore.ContattiOption.IsSet && cedentePrestatore.Contatti == null)
                throw new ArgumentNullException(nameof(cedentePrestatore.Contatti), "Property is required for class CedentePrestatore.");

            if (cedentePrestatore.DatiAnagraficiOption.IsSet)
            {
                writer.WritePropertyName("dati_anagrafici");
                JsonSerializer.Serialize(writer, cedentePrestatore.DatiAnagrafici, jsonSerializerOptions);
            }
            if (cedentePrestatore.SedeOption.IsSet)
            {
                writer.WritePropertyName("sede");
                JsonSerializer.Serialize(writer, cedentePrestatore.Sede, jsonSerializerOptions);
            }
            if (cedentePrestatore.StabileOrganizzazioneOption.IsSet)
            {
                writer.WritePropertyName("stabile_organizzazione");
                JsonSerializer.Serialize(writer, cedentePrestatore.StabileOrganizzazione, jsonSerializerOptions);
            }
            if (cedentePrestatore.IscrizioneReaOption.IsSet)
            {
                writer.WritePropertyName("iscrizione_rea");
                JsonSerializer.Serialize(writer, cedentePrestatore.IscrizioneRea, jsonSerializerOptions);
            }
            if (cedentePrestatore.ContattiOption.IsSet)
            {
                writer.WritePropertyName("contatti");
                JsonSerializer.Serialize(writer, cedentePrestatore.Contatti, jsonSerializerOptions);
            }
            if (cedentePrestatore.RiferimentoAmministrazioneOption.IsSet)
                if (cedentePrestatore.RiferimentoAmministrazioneOption.Value != null)
                    writer.WriteString("riferimento_amministrazione", cedentePrestatore.RiferimentoAmministrazione);
                else
                    writer.WriteNull("riferimento_amministrazione");
        }
    }
}
