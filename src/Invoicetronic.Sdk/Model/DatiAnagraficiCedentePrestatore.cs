// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiAnagraficiCedentePrestatore
    /// </summary>
    public partial class DatiAnagraficiCedentePrestatore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiAnagraficiCedentePrestatore" /> class.
        /// </summary>
        /// <param name="idFiscaleIva">idFiscaleIva</param>
        /// <param name="codiceFiscale">codiceFiscale</param>
        /// <param name="anagrafica">anagrafica</param>
        /// <param name="alboProfessionale">alboProfessionale</param>
        /// <param name="provinciaAlbo">provinciaAlbo</param>
        /// <param name="numeroIscrizioneAlbo">numeroIscrizioneAlbo</param>
        /// <param name="dataIscrizioneAlbo">dataIscrizioneAlbo</param>
        /// <param name="regimeFiscale">regimeFiscale</param>
        [JsonConstructor]
        public DatiAnagraficiCedentePrestatore(Option<IdFiscaleIVA> idFiscaleIva = default, Option<string> codiceFiscale = default, Option<Anagrafica> anagrafica = default, Option<string> alboProfessionale = default, Option<string> provinciaAlbo = default, Option<string> numeroIscrizioneAlbo = default, Option<DateTime?> dataIscrizioneAlbo = default, Option<string> regimeFiscale = default)
        {
            IdFiscaleIvaOption = idFiscaleIva;
            CodiceFiscaleOption = codiceFiscale;
            AnagraficaOption = anagrafica;
            AlboProfessionaleOption = alboProfessionale;
            ProvinciaAlboOption = provinciaAlbo;
            NumeroIscrizioneAlboOption = numeroIscrizioneAlbo;
            DataIscrizioneAlboOption = dataIscrizioneAlbo;
            RegimeFiscaleOption = regimeFiscale;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IdFiscaleIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IdFiscaleIVA> IdFiscaleIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdFiscaleIva
        /// </summary>
        [JsonPropertyName("id_fiscale_iva")]
        public IdFiscaleIVA IdFiscaleIva { get { return this.IdFiscaleIvaOption; } set { this.IdFiscaleIvaOption = new Option<IdFiscaleIVA>(value); } }

        /// <summary>
        /// Used to track the state of CodiceFiscale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodiceFiscaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceFiscale
        /// </summary>
        [JsonPropertyName("codice_fiscale")]
        public string CodiceFiscale { get { return this.CodiceFiscaleOption; } set { this.CodiceFiscaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Anagrafica
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Anagrafica> AnagraficaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Anagrafica
        /// </summary>
        [JsonPropertyName("anagrafica")]
        public Anagrafica Anagrafica { get { return this.AnagraficaOption; } set { this.AnagraficaOption = new Option<Anagrafica>(value); } }

        /// <summary>
        /// Used to track the state of AlboProfessionale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AlboProfessionaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlboProfessionale
        /// </summary>
        [JsonPropertyName("albo_professionale")]
        public string AlboProfessionale { get { return this.AlboProfessionaleOption; } set { this.AlboProfessionaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProvinciaAlbo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProvinciaAlboOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProvinciaAlbo
        /// </summary>
        [JsonPropertyName("provincia_albo")]
        public string ProvinciaAlbo { get { return this.ProvinciaAlboOption; } set { this.ProvinciaAlboOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NumeroIscrizioneAlbo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumeroIscrizioneAlboOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumeroIscrizioneAlbo
        /// </summary>
        [JsonPropertyName("numero_iscrizione_albo")]
        public string NumeroIscrizioneAlbo { get { return this.NumeroIscrizioneAlboOption; } set { this.NumeroIscrizioneAlboOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DataIscrizioneAlbo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataIscrizioneAlboOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataIscrizioneAlbo
        /// </summary>
        [JsonPropertyName("data_iscrizione_albo")]
        public DateTime? DataIscrizioneAlbo { get { return this.DataIscrizioneAlboOption; } set { this.DataIscrizioneAlboOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of RegimeFiscale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RegimeFiscaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegimeFiscale
        /// </summary>
        [JsonPropertyName("regime_fiscale")]
        public string RegimeFiscale { get { return this.RegimeFiscaleOption; } set { this.RegimeFiscaleOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiAnagraficiCedentePrestatore {\n");
            sb.Append("  IdFiscaleIva: ").Append(IdFiscaleIva).Append("\n");
            sb.Append("  CodiceFiscale: ").Append(CodiceFiscale).Append("\n");
            sb.Append("  Anagrafica: ").Append(Anagrafica).Append("\n");
            sb.Append("  AlboProfessionale: ").Append(AlboProfessionale).Append("\n");
            sb.Append("  ProvinciaAlbo: ").Append(ProvinciaAlbo).Append("\n");
            sb.Append("  NumeroIscrizioneAlbo: ").Append(NumeroIscrizioneAlbo).Append("\n");
            sb.Append("  DataIscrizioneAlbo: ").Append(DataIscrizioneAlbo).Append("\n");
            sb.Append("  RegimeFiscale: ").Append(RegimeFiscale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiAnagraficiCedentePrestatore" />
    /// </summary>
    public class DatiAnagraficiCedentePrestatoreJsonConverter : JsonConverter<DatiAnagraficiCedentePrestatore>
    {
        /// <summary>
        /// The format to use to serialize DataIscrizioneAlbo
        /// </summary>
        public static string DataIscrizioneAlboFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DatiAnagraficiCedentePrestatore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiAnagraficiCedentePrestatore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IdFiscaleIVA> idFiscaleIva = default;
            Option<string> codiceFiscale = default;
            Option<Anagrafica> anagrafica = default;
            Option<string> alboProfessionale = default;
            Option<string> provinciaAlbo = default;
            Option<string> numeroIscrizioneAlbo = default;
            Option<DateTime?> dataIscrizioneAlbo = default;
            Option<string> regimeFiscale = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id_fiscale_iva":
                            idFiscaleIva = new Option<IdFiscaleIVA>(JsonSerializer.Deserialize<IdFiscaleIVA>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "codice_fiscale":
                            codiceFiscale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "anagrafica":
                            anagrafica = new Option<Anagrafica>(JsonSerializer.Deserialize<Anagrafica>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "albo_professionale":
                            alboProfessionale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "provincia_albo":
                            provinciaAlbo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "numero_iscrizione_albo":
                            numeroIscrizioneAlbo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data_iscrizione_albo":
                            dataIscrizioneAlbo = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "regime_fiscale":
                            regimeFiscale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (idFiscaleIva.IsSet && idFiscaleIva.Value == null)
                throw new ArgumentNullException(nameof(idFiscaleIva), "Property is not nullable for class DatiAnagraficiCedentePrestatore.");

            if (anagrafica.IsSet && anagrafica.Value == null)
                throw new ArgumentNullException(nameof(anagrafica), "Property is not nullable for class DatiAnagraficiCedentePrestatore.");

            return new DatiAnagraficiCedentePrestatore(idFiscaleIva, codiceFiscale, anagrafica, alboProfessionale, provinciaAlbo, numeroIscrizioneAlbo, dataIscrizioneAlbo, regimeFiscale);
        }

        /// <summary>
        /// Serializes a <see cref="DatiAnagraficiCedentePrestatore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiAnagraficiCedentePrestatore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiAnagraficiCedentePrestatore datiAnagraficiCedentePrestatore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiAnagraficiCedentePrestatore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiAnagraficiCedentePrestatore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiAnagraficiCedentePrestatore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiAnagraficiCedentePrestatore datiAnagraficiCedentePrestatore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiAnagraficiCedentePrestatore.IdFiscaleIvaOption.IsSet && datiAnagraficiCedentePrestatore.IdFiscaleIva == null)
                throw new ArgumentNullException(nameof(datiAnagraficiCedentePrestatore.IdFiscaleIva), "Property is required for class DatiAnagraficiCedentePrestatore.");

            if (datiAnagraficiCedentePrestatore.AnagraficaOption.IsSet && datiAnagraficiCedentePrestatore.Anagrafica == null)
                throw new ArgumentNullException(nameof(datiAnagraficiCedentePrestatore.Anagrafica), "Property is required for class DatiAnagraficiCedentePrestatore.");

            if (datiAnagraficiCedentePrestatore.IdFiscaleIvaOption.IsSet)
            {
                writer.WritePropertyName("id_fiscale_iva");
                JsonSerializer.Serialize(writer, datiAnagraficiCedentePrestatore.IdFiscaleIva, jsonSerializerOptions);
            }
            if (datiAnagraficiCedentePrestatore.CodiceFiscaleOption.IsSet)
                if (datiAnagraficiCedentePrestatore.CodiceFiscaleOption.Value != null)
                    writer.WriteString("codice_fiscale", datiAnagraficiCedentePrestatore.CodiceFiscale);
                else
                    writer.WriteNull("codice_fiscale");

            if (datiAnagraficiCedentePrestatore.AnagraficaOption.IsSet)
            {
                writer.WritePropertyName("anagrafica");
                JsonSerializer.Serialize(writer, datiAnagraficiCedentePrestatore.Anagrafica, jsonSerializerOptions);
            }
            if (datiAnagraficiCedentePrestatore.AlboProfessionaleOption.IsSet)
                if (datiAnagraficiCedentePrestatore.AlboProfessionaleOption.Value != null)
                    writer.WriteString("albo_professionale", datiAnagraficiCedentePrestatore.AlboProfessionale);
                else
                    writer.WriteNull("albo_professionale");

            if (datiAnagraficiCedentePrestatore.ProvinciaAlboOption.IsSet)
                if (datiAnagraficiCedentePrestatore.ProvinciaAlboOption.Value != null)
                    writer.WriteString("provincia_albo", datiAnagraficiCedentePrestatore.ProvinciaAlbo);
                else
                    writer.WriteNull("provincia_albo");

            if (datiAnagraficiCedentePrestatore.NumeroIscrizioneAlboOption.IsSet)
                if (datiAnagraficiCedentePrestatore.NumeroIscrizioneAlboOption.Value != null)
                    writer.WriteString("numero_iscrizione_albo", datiAnagraficiCedentePrestatore.NumeroIscrizioneAlbo);
                else
                    writer.WriteNull("numero_iscrizione_albo");

            if (datiAnagraficiCedentePrestatore.DataIscrizioneAlboOption.IsSet)
                if (datiAnagraficiCedentePrestatore.DataIscrizioneAlboOption.Value != null)
                    writer.WriteString("data_iscrizione_albo", datiAnagraficiCedentePrestatore.DataIscrizioneAlboOption.Value.Value.ToString(DataIscrizioneAlboFormat));
                else
                    writer.WriteNull("data_iscrizione_albo");

            if (datiAnagraficiCedentePrestatore.RegimeFiscaleOption.IsSet)
                if (datiAnagraficiCedentePrestatore.RegimeFiscaleOption.Value != null)
                    writer.WriteString("regime_fiscale", datiAnagraficiCedentePrestatore.RegimeFiscale);
                else
                    writer.WriteNull("regime_fiscale");
        }
    }
}
