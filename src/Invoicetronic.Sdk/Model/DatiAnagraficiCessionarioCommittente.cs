// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiAnagraficiCessionarioCommittente
    /// </summary>
    public partial class DatiAnagraficiCessionarioCommittente : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiAnagraficiCessionarioCommittente" /> class.
        /// </summary>
        /// <param name="idFiscaleIva">idFiscaleIva</param>
        /// <param name="codiceFiscale">codiceFiscale</param>
        /// <param name="anagrafica">anagrafica</param>
        [JsonConstructor]
        public DatiAnagraficiCessionarioCommittente(Option<IdFiscaleIVA> idFiscaleIva = default, Option<string> codiceFiscale = default, Option<Anagrafica> anagrafica = default)
        {
            IdFiscaleIvaOption = idFiscaleIva;
            CodiceFiscaleOption = codiceFiscale;
            AnagraficaOption = anagrafica;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IdFiscaleIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IdFiscaleIVA> IdFiscaleIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdFiscaleIva
        /// </summary>
        [JsonPropertyName("id_fiscale_iva")]
        public IdFiscaleIVA IdFiscaleIva { get { return this.IdFiscaleIvaOption; } set { this.IdFiscaleIvaOption = new Option<IdFiscaleIVA>(value); } }

        /// <summary>
        /// Used to track the state of CodiceFiscale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodiceFiscaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceFiscale
        /// </summary>
        [JsonPropertyName("codice_fiscale")]
        public string CodiceFiscale { get { return this.CodiceFiscaleOption; } set { this.CodiceFiscaleOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Anagrafica
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Anagrafica> AnagraficaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Anagrafica
        /// </summary>
        [JsonPropertyName("anagrafica")]
        public Anagrafica Anagrafica { get { return this.AnagraficaOption; } set { this.AnagraficaOption = new Option<Anagrafica>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiAnagraficiCessionarioCommittente {\n");
            sb.Append("  IdFiscaleIva: ").Append(IdFiscaleIva).Append("\n");
            sb.Append("  CodiceFiscale: ").Append(CodiceFiscale).Append("\n");
            sb.Append("  Anagrafica: ").Append(Anagrafica).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiAnagraficiCessionarioCommittente" />
    /// </summary>
    public class DatiAnagraficiCessionarioCommittenteJsonConverter : JsonConverter<DatiAnagraficiCessionarioCommittente>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatiAnagraficiCessionarioCommittente" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiAnagraficiCessionarioCommittente Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IdFiscaleIVA> idFiscaleIva = default;
            Option<string> codiceFiscale = default;
            Option<Anagrafica> anagrafica = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id_fiscale_iva":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                idFiscaleIva = new Option<IdFiscaleIVA>(JsonSerializer.Deserialize<IdFiscaleIVA>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "codice_fiscale":
                            codiceFiscale = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "anagrafica":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                anagrafica = new Option<Anagrafica>(JsonSerializer.Deserialize<Anagrafica>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (idFiscaleIva.IsSet && idFiscaleIva.Value == null)
                throw new ArgumentNullException(nameof(idFiscaleIva), "Property is not nullable for class DatiAnagraficiCessionarioCommittente.");

            if (anagrafica.IsSet && anagrafica.Value == null)
                throw new ArgumentNullException(nameof(anagrafica), "Property is not nullable for class DatiAnagraficiCessionarioCommittente.");

            return new DatiAnagraficiCessionarioCommittente(idFiscaleIva, codiceFiscale, anagrafica);
        }

        /// <summary>
        /// Serializes a <see cref="DatiAnagraficiCessionarioCommittente" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiAnagraficiCessionarioCommittente"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiAnagraficiCessionarioCommittente datiAnagraficiCessionarioCommittente, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiAnagraficiCessionarioCommittente, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiAnagraficiCessionarioCommittente" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiAnagraficiCessionarioCommittente"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiAnagraficiCessionarioCommittente datiAnagraficiCessionarioCommittente, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiAnagraficiCessionarioCommittente.IdFiscaleIvaOption.IsSet && datiAnagraficiCessionarioCommittente.IdFiscaleIva == null)
                throw new ArgumentNullException(nameof(datiAnagraficiCessionarioCommittente.IdFiscaleIva), "Property is required for class DatiAnagraficiCessionarioCommittente.");

            if (datiAnagraficiCessionarioCommittente.AnagraficaOption.IsSet && datiAnagraficiCessionarioCommittente.Anagrafica == null)
                throw new ArgumentNullException(nameof(datiAnagraficiCessionarioCommittente.Anagrafica), "Property is required for class DatiAnagraficiCessionarioCommittente.");

            if (datiAnagraficiCessionarioCommittente.IdFiscaleIvaOption.IsSet)
            {
                writer.WritePropertyName("id_fiscale_iva");
                JsonSerializer.Serialize(writer, datiAnagraficiCessionarioCommittente.IdFiscaleIva, jsonSerializerOptions);
            }
            if (datiAnagraficiCessionarioCommittente.CodiceFiscaleOption.IsSet)
                if (datiAnagraficiCessionarioCommittente.CodiceFiscaleOption.Value != null)
                    writer.WriteString("codice_fiscale", datiAnagraficiCessionarioCommittente.CodiceFiscale);
                else
                    writer.WriteNull("codice_fiscale");

            if (datiAnagraficiCessionarioCommittente.AnagraficaOption.IsSet)
            {
                writer.WritePropertyName("anagrafica");
                JsonSerializer.Serialize(writer, datiAnagraficiCessionarioCommittente.Anagrafica, jsonSerializerOptions);
            }
        }
    }
}
