// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiCassaPrevidenziale
    /// </summary>
    public partial class DatiCassaPrevidenziale : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiCassaPrevidenziale" /> class.
        /// </summary>
        /// <param name="tipoCassa">tipoCassa</param>
        /// <param name="alCassa">alCassa</param>
        /// <param name="importoContributoCassa">importoContributoCassa</param>
        /// <param name="imponibileCassa">imponibileCassa</param>
        /// <param name="aliquotaIva">aliquotaIva</param>
        /// <param name="ritenuta">ritenuta</param>
        /// <param name="natura">natura</param>
        /// <param name="riferimentoAmministrazione">riferimentoAmministrazione</param>
        [JsonConstructor]
        public DatiCassaPrevidenziale(Option<string> tipoCassa = default, Option<double?> alCassa = default, Option<double?> importoContributoCassa = default, Option<double?> imponibileCassa = default, Option<double?> aliquotaIva = default, Option<string> ritenuta = default, Option<string> natura = default, Option<string> riferimentoAmministrazione = default)
        {
            TipoCassaOption = tipoCassa;
            AlCassaOption = alCassa;
            ImportoContributoCassaOption = importoContributoCassa;
            ImponibileCassaOption = imponibileCassa;
            AliquotaIvaOption = aliquotaIva;
            RitenutaOption = ritenuta;
            NaturaOption = natura;
            RiferimentoAmministrazioneOption = riferimentoAmministrazione;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TipoCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TipoCassaOption { get; private set; }

        /// <summary>
        /// Gets or Sets TipoCassa
        /// </summary>
        [JsonPropertyName("tipo_cassa")]
        public string TipoCassa { get { return this.TipoCassaOption; } set { this.TipoCassaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AlCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AlCassaOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlCassa
        /// </summary>
        [JsonPropertyName("al_cassa")]
        public double? AlCassa { get { return this.AlCassaOption; } set { this.AlCassaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of ImportoContributoCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ImportoContributoCassaOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImportoContributoCassa
        /// </summary>
        [JsonPropertyName("importo_contributo_cassa")]
        public double? ImportoContributoCassa { get { return this.ImportoContributoCassaOption; } set { this.ImportoContributoCassaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of ImponibileCassa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ImponibileCassaOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImponibileCassa
        /// </summary>
        [JsonPropertyName("imponibile_cassa")]
        public double? ImponibileCassa { get { return this.ImponibileCassaOption; } set { this.ImponibileCassaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of AliquotaIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AliquotaIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets AliquotaIva
        /// </summary>
        [JsonPropertyName("aliquota_iva")]
        public double? AliquotaIva { get { return this.AliquotaIvaOption; } set { this.AliquotaIvaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Ritenuta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RitenutaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ritenuta
        /// </summary>
        [JsonPropertyName("ritenuta")]
        public string Ritenuta { get { return this.RitenutaOption; } set { this.RitenutaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Natura
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NaturaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Natura
        /// </summary>
        [JsonPropertyName("natura")]
        public string Natura { get { return this.NaturaOption; } set { this.NaturaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiferimentoAmministrazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiferimentoAmministrazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiferimentoAmministrazione
        /// </summary>
        [JsonPropertyName("riferimento_amministrazione")]
        public string RiferimentoAmministrazione { get { return this.RiferimentoAmministrazioneOption; } set { this.RiferimentoAmministrazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiCassaPrevidenziale {\n");
            sb.Append("  TipoCassa: ").Append(TipoCassa).Append("\n");
            sb.Append("  AlCassa: ").Append(AlCassa).Append("\n");
            sb.Append("  ImportoContributoCassa: ").Append(ImportoContributoCassa).Append("\n");
            sb.Append("  ImponibileCassa: ").Append(ImponibileCassa).Append("\n");
            sb.Append("  AliquotaIva: ").Append(AliquotaIva).Append("\n");
            sb.Append("  Ritenuta: ").Append(Ritenuta).Append("\n");
            sb.Append("  Natura: ").Append(Natura).Append("\n");
            sb.Append("  RiferimentoAmministrazione: ").Append(RiferimentoAmministrazione).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiCassaPrevidenziale" />
    /// </summary>
    public class DatiCassaPrevidenzialeJsonConverter : JsonConverter<DatiCassaPrevidenziale>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatiCassaPrevidenziale" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiCassaPrevidenziale Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> tipoCassa = default;
            Option<double?> alCassa = default;
            Option<double?> importoContributoCassa = default;
            Option<double?> imponibileCassa = default;
            Option<double?> aliquotaIva = default;
            Option<string> ritenuta = default;
            Option<string> natura = default;
            Option<string> riferimentoAmministrazione = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tipo_cassa":
                            tipoCassa = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "al_cassa":
                            alCassa = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "importo_contributo_cassa":
                            importoContributoCassa = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "imponibile_cassa":
                            imponibileCassa = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "aliquota_iva":
                            aliquotaIva = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "ritenuta":
                            ritenuta = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "natura":
                            natura = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riferimento_amministrazione":
                            riferimentoAmministrazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (alCassa.IsSet && alCassa.Value == null)
                throw new ArgumentNullException(nameof(alCassa), "Property is not nullable for class DatiCassaPrevidenziale.");

            if (importoContributoCassa.IsSet && importoContributoCassa.Value == null)
                throw new ArgumentNullException(nameof(importoContributoCassa), "Property is not nullable for class DatiCassaPrevidenziale.");

            if (imponibileCassa.IsSet && imponibileCassa.Value == null)
                throw new ArgumentNullException(nameof(imponibileCassa), "Property is not nullable for class DatiCassaPrevidenziale.");

            if (aliquotaIva.IsSet && aliquotaIva.Value == null)
                throw new ArgumentNullException(nameof(aliquotaIva), "Property is not nullable for class DatiCassaPrevidenziale.");

            return new DatiCassaPrevidenziale(tipoCassa, alCassa, importoContributoCassa, imponibileCassa, aliquotaIva, ritenuta, natura, riferimentoAmministrazione);
        }

        /// <summary>
        /// Serializes a <see cref="DatiCassaPrevidenziale" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiCassaPrevidenziale"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiCassaPrevidenziale datiCassaPrevidenziale, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiCassaPrevidenziale, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiCassaPrevidenziale" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiCassaPrevidenziale"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiCassaPrevidenziale datiCassaPrevidenziale, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiCassaPrevidenziale.TipoCassaOption.IsSet)
                if (datiCassaPrevidenziale.TipoCassaOption.Value != null)
                    writer.WriteString("tipo_cassa", datiCassaPrevidenziale.TipoCassa);
                else
                    writer.WriteNull("tipo_cassa");

            if (datiCassaPrevidenziale.AlCassaOption.IsSet)
                writer.WriteNumber("al_cassa", datiCassaPrevidenziale.AlCassaOption.Value.Value);

            if (datiCassaPrevidenziale.ImportoContributoCassaOption.IsSet)
                writer.WriteNumber("importo_contributo_cassa", datiCassaPrevidenziale.ImportoContributoCassaOption.Value.Value);

            if (datiCassaPrevidenziale.ImponibileCassaOption.IsSet)
                writer.WriteNumber("imponibile_cassa", datiCassaPrevidenziale.ImponibileCassaOption.Value.Value);

            if (datiCassaPrevidenziale.AliquotaIvaOption.IsSet)
                writer.WriteNumber("aliquota_iva", datiCassaPrevidenziale.AliquotaIvaOption.Value.Value);

            if (datiCassaPrevidenziale.RitenutaOption.IsSet)
                if (datiCassaPrevidenziale.RitenutaOption.Value != null)
                    writer.WriteString("ritenuta", datiCassaPrevidenziale.Ritenuta);
                else
                    writer.WriteNull("ritenuta");

            if (datiCassaPrevidenziale.NaturaOption.IsSet)
                if (datiCassaPrevidenziale.NaturaOption.Value != null)
                    writer.WriteString("natura", datiCassaPrevidenziale.Natura);
                else
                    writer.WriteNull("natura");

            if (datiCassaPrevidenziale.RiferimentoAmministrazioneOption.IsSet)
                if (datiCassaPrevidenziale.RiferimentoAmministrazioneOption.Value != null)
                    writer.WriteString("riferimento_amministrazione", datiCassaPrevidenziale.RiferimentoAmministrazione);
                else
                    writer.WriteNull("riferimento_amministrazione");
        }
    }
}
