// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiDDT
    /// </summary>
    public partial class DatiDDT : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiDDT" /> class.
        /// </summary>
        /// <param name="numeroDdt">numeroDdt</param>
        /// <param name="dataDdt">dataDdt</param>
        /// <param name="riferimentoNumeroLinea">riferimentoNumeroLinea</param>
        [JsonConstructor]
        public DatiDDT(Option<string> numeroDdt = default, Option<DateTime?> dataDdt = default, Option<List<int>> riferimentoNumeroLinea = default)
        {
            NumeroDdtOption = numeroDdt;
            DataDdtOption = dataDdt;
            RiferimentoNumeroLineaOption = riferimentoNumeroLinea;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NumeroDdt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumeroDdtOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumeroDdt
        /// </summary>
        [JsonPropertyName("numero_ddt")]
        public string NumeroDdt { get { return this.NumeroDdtOption; } set { this.NumeroDdtOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DataDdt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataDdtOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataDdt
        /// </summary>
        [JsonPropertyName("data_ddt")]
        public DateTime? DataDdt { get { return this.DataDdtOption; } set { this.DataDdtOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of RiferimentoNumeroLinea
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>> RiferimentoNumeroLineaOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiferimentoNumeroLinea
        /// </summary>
        [JsonPropertyName("riferimento_numero_linea")]
        public List<int> RiferimentoNumeroLinea { get { return this.RiferimentoNumeroLineaOption; } set { this.RiferimentoNumeroLineaOption = new Option<List<int>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiDDT {\n");
            sb.Append("  NumeroDdt: ").Append(NumeroDdt).Append("\n");
            sb.Append("  DataDdt: ").Append(DataDdt).Append("\n");
            sb.Append("  RiferimentoNumeroLinea: ").Append(RiferimentoNumeroLinea).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiDDT" />
    /// </summary>
    public class DatiDDTJsonConverter : JsonConverter<DatiDDT>
    {
        /// <summary>
        /// The format to use to serialize DataDdt
        /// </summary>
        public static string DataDdtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DatiDDT" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiDDT Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> numeroDdt = default;
            Option<DateTime?> dataDdt = default;
            Option<List<int>> riferimentoNumeroLinea = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numero_ddt":
                            numeroDdt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data_ddt":
                            dataDdt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "riferimento_numero_linea":
                            riferimentoNumeroLinea = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dataDdt.IsSet && dataDdt.Value == null)
                throw new ArgumentNullException(nameof(dataDdt), "Property is not nullable for class DatiDDT.");

            return new DatiDDT(numeroDdt, dataDdt, riferimentoNumeroLinea);
        }

        /// <summary>
        /// Serializes a <see cref="DatiDDT" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiDDT"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiDDT datiDDT, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiDDT, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiDDT" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiDDT"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiDDT datiDDT, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiDDT.NumeroDdtOption.IsSet)
                if (datiDDT.NumeroDdtOption.Value != null)
                    writer.WriteString("numero_ddt", datiDDT.NumeroDdt);
                else
                    writer.WriteNull("numero_ddt");

            if (datiDDT.DataDdtOption.IsSet)
                writer.WriteString("data_ddt", datiDDT.DataDdtOption.Value.Value.ToString(DataDdtFormat));

            if (datiDDT.RiferimentoNumeroLineaOption.IsSet)
                if (datiDDT.RiferimentoNumeroLineaOption.Value != null)
                {
                    writer.WritePropertyName("riferimento_numero_linea");
                    JsonSerializer.Serialize(writer, datiDDT.RiferimentoNumeroLinea, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("riferimento_numero_linea");
        }
    }
}
