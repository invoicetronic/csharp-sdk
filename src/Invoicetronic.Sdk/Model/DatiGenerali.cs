// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiGenerali
    /// </summary>
    public partial class DatiGenerali : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiGenerali" /> class.
        /// </summary>
        /// <param name="datiGeneraliDocumento">datiGeneraliDocumento</param>
        /// <param name="datiOrdineAcquisto">datiOrdineAcquisto</param>
        /// <param name="datiContratto">datiContratto</param>
        /// <param name="datiConvenzione">datiConvenzione</param>
        /// <param name="datiRicezione">datiRicezione</param>
        /// <param name="datiFattureCollegate">datiFattureCollegate</param>
        /// <param name="datiSal">datiSal</param>
        /// <param name="datiDdt">datiDdt</param>
        /// <param name="datiTrasporto">datiTrasporto</param>
        /// <param name="fatturaPrincipale">fatturaPrincipale</param>
        [JsonConstructor]
        public DatiGenerali(Option<DatiGeneraliDocumento> datiGeneraliDocumento = default, Option<List<DatiOrdineAcquisto>> datiOrdineAcquisto = default, Option<List<DatiContratto>> datiContratto = default, Option<List<DatiConvenzione>> datiConvenzione = default, Option<List<DatiRicezione>> datiRicezione = default, Option<List<DatiFattureCollegate>> datiFattureCollegate = default, Option<List<DatiSAL>> datiSal = default, Option<List<DatiDDT>> datiDdt = default, Option<DatiTrasporto> datiTrasporto = default, Option<FatturaPrincipale> fatturaPrincipale = default)
        {
            DatiGeneraliDocumentoOption = datiGeneraliDocumento;
            DatiOrdineAcquistoOption = datiOrdineAcquisto;
            DatiContrattoOption = datiContratto;
            DatiConvenzioneOption = datiConvenzione;
            DatiRicezioneOption = datiRicezione;
            DatiFattureCollegateOption = datiFattureCollegate;
            DatiSalOption = datiSal;
            DatiDdtOption = datiDdt;
            DatiTrasportoOption = datiTrasporto;
            FatturaPrincipaleOption = fatturaPrincipale;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DatiGeneraliDocumento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiGeneraliDocumento> DatiGeneraliDocumentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiGeneraliDocumento
        /// </summary>
        [JsonPropertyName("dati_generali_documento")]
        public DatiGeneraliDocumento DatiGeneraliDocumento { get { return this.DatiGeneraliDocumentoOption; } set { this.DatiGeneraliDocumentoOption = new Option<DatiGeneraliDocumento>(value); } }

        /// <summary>
        /// Used to track the state of DatiOrdineAcquisto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiOrdineAcquisto>> DatiOrdineAcquistoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiOrdineAcquisto
        /// </summary>
        [JsonPropertyName("dati_ordine_acquisto")]
        public List<DatiOrdineAcquisto> DatiOrdineAcquisto { get { return this.DatiOrdineAcquistoOption; } set { this.DatiOrdineAcquistoOption = new Option<List<DatiOrdineAcquisto>>(value); } }

        /// <summary>
        /// Used to track the state of DatiContratto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiContratto>> DatiContrattoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiContratto
        /// </summary>
        [JsonPropertyName("dati_contratto")]
        public List<DatiContratto> DatiContratto { get { return this.DatiContrattoOption; } set { this.DatiContrattoOption = new Option<List<DatiContratto>>(value); } }

        /// <summary>
        /// Used to track the state of DatiConvenzione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiConvenzione>> DatiConvenzioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiConvenzione
        /// </summary>
        [JsonPropertyName("dati_convenzione")]
        public List<DatiConvenzione> DatiConvenzione { get { return this.DatiConvenzioneOption; } set { this.DatiConvenzioneOption = new Option<List<DatiConvenzione>>(value); } }

        /// <summary>
        /// Used to track the state of DatiRicezione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiRicezione>> DatiRicezioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiRicezione
        /// </summary>
        [JsonPropertyName("dati_ricezione")]
        public List<DatiRicezione> DatiRicezione { get { return this.DatiRicezioneOption; } set { this.DatiRicezioneOption = new Option<List<DatiRicezione>>(value); } }

        /// <summary>
        /// Used to track the state of DatiFattureCollegate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiFattureCollegate>> DatiFattureCollegateOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiFattureCollegate
        /// </summary>
        [JsonPropertyName("dati_fatture_collegate")]
        public List<DatiFattureCollegate> DatiFattureCollegate { get { return this.DatiFattureCollegateOption; } set { this.DatiFattureCollegateOption = new Option<List<DatiFattureCollegate>>(value); } }

        /// <summary>
        /// Used to track the state of DatiSal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiSAL>> DatiSalOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiSal
        /// </summary>
        [JsonPropertyName("dati_sal")]
        public List<DatiSAL> DatiSal { get { return this.DatiSalOption; } set { this.DatiSalOption = new Option<List<DatiSAL>>(value); } }

        /// <summary>
        /// Used to track the state of DatiDdt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiDDT>> DatiDdtOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiDdt
        /// </summary>
        [JsonPropertyName("dati_ddt")]
        public List<DatiDDT> DatiDdt { get { return this.DatiDdtOption; } set { this.DatiDdtOption = new Option<List<DatiDDT>>(value); } }

        /// <summary>
        /// Used to track the state of DatiTrasporto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiTrasporto> DatiTrasportoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiTrasporto
        /// </summary>
        [JsonPropertyName("dati_trasporto")]
        public DatiTrasporto DatiTrasporto { get { return this.DatiTrasportoOption; } set { this.DatiTrasportoOption = new Option<DatiTrasporto>(value); } }

        /// <summary>
        /// Used to track the state of FatturaPrincipale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FatturaPrincipale> FatturaPrincipaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets FatturaPrincipale
        /// </summary>
        [JsonPropertyName("fattura_principale")]
        public FatturaPrincipale FatturaPrincipale { get { return this.FatturaPrincipaleOption; } set { this.FatturaPrincipaleOption = new Option<FatturaPrincipale>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiGenerali {\n");
            sb.Append("  DatiGeneraliDocumento: ").Append(DatiGeneraliDocumento).Append("\n");
            sb.Append("  DatiOrdineAcquisto: ").Append(DatiOrdineAcquisto).Append("\n");
            sb.Append("  DatiContratto: ").Append(DatiContratto).Append("\n");
            sb.Append("  DatiConvenzione: ").Append(DatiConvenzione).Append("\n");
            sb.Append("  DatiRicezione: ").Append(DatiRicezione).Append("\n");
            sb.Append("  DatiFattureCollegate: ").Append(DatiFattureCollegate).Append("\n");
            sb.Append("  DatiSal: ").Append(DatiSal).Append("\n");
            sb.Append("  DatiDdt: ").Append(DatiDdt).Append("\n");
            sb.Append("  DatiTrasporto: ").Append(DatiTrasporto).Append("\n");
            sb.Append("  FatturaPrincipale: ").Append(FatturaPrincipale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiGenerali" />
    /// </summary>
    public class DatiGeneraliJsonConverter : JsonConverter<DatiGenerali>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatiGenerali" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiGenerali Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DatiGeneraliDocumento> datiGeneraliDocumento = default;
            Option<List<DatiOrdineAcquisto>> datiOrdineAcquisto = default;
            Option<List<DatiContratto>> datiContratto = default;
            Option<List<DatiConvenzione>> datiConvenzione = default;
            Option<List<DatiRicezione>> datiRicezione = default;
            Option<List<DatiFattureCollegate>> datiFattureCollegate = default;
            Option<List<DatiSAL>> datiSal = default;
            Option<List<DatiDDT>> datiDdt = default;
            Option<DatiTrasporto> datiTrasporto = default;
            Option<FatturaPrincipale> fatturaPrincipale = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dati_generali_documento":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiGeneraliDocumento = new Option<DatiGeneraliDocumento>(JsonSerializer.Deserialize<DatiGeneraliDocumento>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_ordine_acquisto":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiOrdineAcquisto = new Option<List<DatiOrdineAcquisto>>(JsonSerializer.Deserialize<List<DatiOrdineAcquisto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_contratto":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiContratto = new Option<List<DatiContratto>>(JsonSerializer.Deserialize<List<DatiContratto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_convenzione":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiConvenzione = new Option<List<DatiConvenzione>>(JsonSerializer.Deserialize<List<DatiConvenzione>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_ricezione":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiRicezione = new Option<List<DatiRicezione>>(JsonSerializer.Deserialize<List<DatiRicezione>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_fatture_collegate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiFattureCollegate = new Option<List<DatiFattureCollegate>>(JsonSerializer.Deserialize<List<DatiFattureCollegate>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_sal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiSal = new Option<List<DatiSAL>>(JsonSerializer.Deserialize<List<DatiSAL>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_ddt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiDdt = new Option<List<DatiDDT>>(JsonSerializer.Deserialize<List<DatiDDT>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_trasporto":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiTrasporto = new Option<DatiTrasporto>(JsonSerializer.Deserialize<DatiTrasporto>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fattura_principale":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fatturaPrincipale = new Option<FatturaPrincipale>(JsonSerializer.Deserialize<FatturaPrincipale>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (datiGeneraliDocumento.IsSet && datiGeneraliDocumento.Value == null)
                throw new ArgumentNullException(nameof(datiGeneraliDocumento), "Property is not nullable for class DatiGenerali.");

            if (datiTrasporto.IsSet && datiTrasporto.Value == null)
                throw new ArgumentNullException(nameof(datiTrasporto), "Property is not nullable for class DatiGenerali.");

            if (fatturaPrincipale.IsSet && fatturaPrincipale.Value == null)
                throw new ArgumentNullException(nameof(fatturaPrincipale), "Property is not nullable for class DatiGenerali.");

            return new DatiGenerali(datiGeneraliDocumento, datiOrdineAcquisto, datiContratto, datiConvenzione, datiRicezione, datiFattureCollegate, datiSal, datiDdt, datiTrasporto, fatturaPrincipale);
        }

        /// <summary>
        /// Serializes a <see cref="DatiGenerali" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiGenerali"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiGenerali datiGenerali, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiGenerali, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiGenerali" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiGenerali"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiGenerali datiGenerali, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiGenerali.DatiGeneraliDocumentoOption.IsSet && datiGenerali.DatiGeneraliDocumento == null)
                throw new ArgumentNullException(nameof(datiGenerali.DatiGeneraliDocumento), "Property is required for class DatiGenerali.");

            if (datiGenerali.DatiTrasportoOption.IsSet && datiGenerali.DatiTrasporto == null)
                throw new ArgumentNullException(nameof(datiGenerali.DatiTrasporto), "Property is required for class DatiGenerali.");

            if (datiGenerali.FatturaPrincipaleOption.IsSet && datiGenerali.FatturaPrincipale == null)
                throw new ArgumentNullException(nameof(datiGenerali.FatturaPrincipale), "Property is required for class DatiGenerali.");

            if (datiGenerali.DatiGeneraliDocumentoOption.IsSet)
            {
                writer.WritePropertyName("dati_generali_documento");
                JsonSerializer.Serialize(writer, datiGenerali.DatiGeneraliDocumento, jsonSerializerOptions);
            }
            if (datiGenerali.DatiOrdineAcquistoOption.IsSet)
                if (datiGenerali.DatiOrdineAcquistoOption.Value != null)
                {
                    writer.WritePropertyName("dati_ordine_acquisto");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiOrdineAcquisto, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_ordine_acquisto");
            if (datiGenerali.DatiContrattoOption.IsSet)
                if (datiGenerali.DatiContrattoOption.Value != null)
                {
                    writer.WritePropertyName("dati_contratto");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiContratto, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_contratto");
            if (datiGenerali.DatiConvenzioneOption.IsSet)
                if (datiGenerali.DatiConvenzioneOption.Value != null)
                {
                    writer.WritePropertyName("dati_convenzione");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiConvenzione, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_convenzione");
            if (datiGenerali.DatiRicezioneOption.IsSet)
                if (datiGenerali.DatiRicezioneOption.Value != null)
                {
                    writer.WritePropertyName("dati_ricezione");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiRicezione, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_ricezione");
            if (datiGenerali.DatiFattureCollegateOption.IsSet)
                if (datiGenerali.DatiFattureCollegateOption.Value != null)
                {
                    writer.WritePropertyName("dati_fatture_collegate");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiFattureCollegate, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_fatture_collegate");
            if (datiGenerali.DatiSalOption.IsSet)
                if (datiGenerali.DatiSalOption.Value != null)
                {
                    writer.WritePropertyName("dati_sal");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiSal, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_sal");
            if (datiGenerali.DatiDdtOption.IsSet)
                if (datiGenerali.DatiDdtOption.Value != null)
                {
                    writer.WritePropertyName("dati_ddt");
                    JsonSerializer.Serialize(writer, datiGenerali.DatiDdt, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_ddt");
            if (datiGenerali.DatiTrasportoOption.IsSet)
            {
                writer.WritePropertyName("dati_trasporto");
                JsonSerializer.Serialize(writer, datiGenerali.DatiTrasporto, jsonSerializerOptions);
            }
            if (datiGenerali.FatturaPrincipaleOption.IsSet)
            {
                writer.WritePropertyName("fattura_principale");
                JsonSerializer.Serialize(writer, datiGenerali.FatturaPrincipale, jsonSerializerOptions);
            }
        }
    }
}
