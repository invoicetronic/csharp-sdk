/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: info@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Invoicetronic.Sdk.Client.FileParameter;
using OpenAPIDateConverter = Invoicetronic.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiGenerali
    /// </summary>
    [DataContract(Name = "DatiGenerali")]
    public partial class DatiGenerali : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiGenerali" /> class.
        /// </summary>
        /// <param name="datiGeneraliDocumento">datiGeneraliDocumento.</param>
        /// <param name="datiOrdineAcquisto">datiOrdineAcquisto.</param>
        /// <param name="datiContratto">datiContratto.</param>
        /// <param name="datiConvenzione">datiConvenzione.</param>
        /// <param name="datiRicezione">datiRicezione.</param>
        /// <param name="datiFattureCollegate">datiFattureCollegate.</param>
        /// <param name="datiSal">datiSal.</param>
        /// <param name="datiDdt">datiDdt.</param>
        /// <param name="datiTrasporto">datiTrasporto.</param>
        /// <param name="fatturaPrincipale">fatturaPrincipale.</param>
        public DatiGenerali(DatiGeneraliDocumento datiGeneraliDocumento = default, List<DatiOrdineAcquisto> datiOrdineAcquisto = default, List<DatiContratto> datiContratto = default, List<DatiConvenzione> datiConvenzione = default, List<DatiRicezione> datiRicezione = default, List<DatiFattureCollegate> datiFattureCollegate = default, List<DatiSAL> datiSal = default, List<DatiDDT> datiDdt = default, DatiTrasporto datiTrasporto = default, FatturaPrincipale fatturaPrincipale = default)
        {
            this.DatiGeneraliDocumento = datiGeneraliDocumento;
            this.DatiOrdineAcquisto = datiOrdineAcquisto;
            this.DatiContratto = datiContratto;
            this.DatiConvenzione = datiConvenzione;
            this.DatiRicezione = datiRicezione;
            this.DatiFattureCollegate = datiFattureCollegate;
            this.DatiSal = datiSal;
            this.DatiDdt = datiDdt;
            this.DatiTrasporto = datiTrasporto;
            this.FatturaPrincipale = fatturaPrincipale;
        }

        /// <summary>
        /// Gets or Sets DatiGeneraliDocumento
        /// </summary>
        [DataMember(Name = "dati_generali_documento", EmitDefaultValue = false)]
        public DatiGeneraliDocumento DatiGeneraliDocumento { get; set; }

        /// <summary>
        /// Gets or Sets DatiOrdineAcquisto
        /// </summary>
        [DataMember(Name = "dati_ordine_acquisto", EmitDefaultValue = true)]
        public List<DatiOrdineAcquisto> DatiOrdineAcquisto { get; set; }

        /// <summary>
        /// Gets or Sets DatiContratto
        /// </summary>
        [DataMember(Name = "dati_contratto", EmitDefaultValue = true)]
        public List<DatiContratto> DatiContratto { get; set; }

        /// <summary>
        /// Gets or Sets DatiConvenzione
        /// </summary>
        [DataMember(Name = "dati_convenzione", EmitDefaultValue = true)]
        public List<DatiConvenzione> DatiConvenzione { get; set; }

        /// <summary>
        /// Gets or Sets DatiRicezione
        /// </summary>
        [DataMember(Name = "dati_ricezione", EmitDefaultValue = true)]
        public List<DatiRicezione> DatiRicezione { get; set; }

        /// <summary>
        /// Gets or Sets DatiFattureCollegate
        /// </summary>
        [DataMember(Name = "dati_fatture_collegate", EmitDefaultValue = true)]
        public List<DatiFattureCollegate> DatiFattureCollegate { get; set; }

        /// <summary>
        /// Gets or Sets DatiSal
        /// </summary>
        [DataMember(Name = "dati_sal", EmitDefaultValue = true)]
        public List<DatiSAL> DatiSal { get; set; }

        /// <summary>
        /// Gets or Sets DatiDdt
        /// </summary>
        [DataMember(Name = "dati_ddt", EmitDefaultValue = true)]
        public List<DatiDDT> DatiDdt { get; set; }

        /// <summary>
        /// Gets or Sets DatiTrasporto
        /// </summary>
        [DataMember(Name = "dati_trasporto", EmitDefaultValue = false)]
        public DatiTrasporto DatiTrasporto { get; set; }

        /// <summary>
        /// Gets or Sets FatturaPrincipale
        /// </summary>
        [DataMember(Name = "fattura_principale", EmitDefaultValue = false)]
        public FatturaPrincipale FatturaPrincipale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiGenerali {\n");
            sb.Append("  DatiGeneraliDocumento: ").Append(DatiGeneraliDocumento).Append("\n");
            sb.Append("  DatiOrdineAcquisto: ").Append(DatiOrdineAcquisto).Append("\n");
            sb.Append("  DatiContratto: ").Append(DatiContratto).Append("\n");
            sb.Append("  DatiConvenzione: ").Append(DatiConvenzione).Append("\n");
            sb.Append("  DatiRicezione: ").Append(DatiRicezione).Append("\n");
            sb.Append("  DatiFattureCollegate: ").Append(DatiFattureCollegate).Append("\n");
            sb.Append("  DatiSal: ").Append(DatiSal).Append("\n");
            sb.Append("  DatiDdt: ").Append(DatiDdt).Append("\n");
            sb.Append("  DatiTrasporto: ").Append(DatiTrasporto).Append("\n");
            sb.Append("  FatturaPrincipale: ").Append(FatturaPrincipale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
