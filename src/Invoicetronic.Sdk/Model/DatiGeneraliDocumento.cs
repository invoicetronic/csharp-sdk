// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiGeneraliDocumento
    /// </summary>
    public partial class DatiGeneraliDocumento : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiGeneraliDocumento" /> class.
        /// </summary>
        /// <param name="tipoDocumento">tipoDocumento</param>
        /// <param name="divisa">divisa</param>
        /// <param name="data">data</param>
        /// <param name="numero">numero</param>
        /// <param name="datiRitenuta">datiRitenuta</param>
        /// <param name="datiBollo">datiBollo</param>
        /// <param name="datiCassaPrevidenziale">datiCassaPrevidenziale</param>
        /// <param name="scontoMaggiorazione">scontoMaggiorazione</param>
        /// <param name="importoTotaleDocumento">importoTotaleDocumento</param>
        /// <param name="arrotondamento">arrotondamento</param>
        /// <param name="causale">causale</param>
        /// <param name="art73">art73</param>
        [JsonConstructor]
        public DatiGeneraliDocumento(Option<string> tipoDocumento = default, Option<string> divisa = default, Option<DateTime?> data = default, Option<string> numero = default, Option<List<DatiRitenuta>> datiRitenuta = default, Option<DatiBollo> datiBollo = default, Option<List<DatiCassaPrevidenziale>> datiCassaPrevidenziale = default, Option<List<ScontoMaggiorazione>> scontoMaggiorazione = default, Option<double?> importoTotaleDocumento = default, Option<double?> arrotondamento = default, Option<List<string>> causale = default, Option<string> art73 = default)
        {
            TipoDocumentoOption = tipoDocumento;
            DivisaOption = divisa;
            DataOption = data;
            NumeroOption = numero;
            DatiRitenutaOption = datiRitenuta;
            DatiBolloOption = datiBollo;
            DatiCassaPrevidenzialeOption = datiCassaPrevidenziale;
            ScontoMaggiorazioneOption = scontoMaggiorazione;
            ImportoTotaleDocumentoOption = importoTotaleDocumento;
            ArrotondamentoOption = arrotondamento;
            CausaleOption = causale;
            Art73Option = art73;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TipoDocumento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TipoDocumentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets TipoDocumento
        /// </summary>
        [JsonPropertyName("tipo_documento")]
        public string TipoDocumento { get { return this.TipoDocumentoOption; } set { this.TipoDocumentoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Divisa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DivisaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Divisa
        /// </summary>
        [JsonPropertyName("divisa")]
        public string Divisa { get { return this.DivisaOption; } set { this.DivisaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public DateTime? Data { get { return this.DataOption; } set { this.DataOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Numero
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumeroOption { get; private set; }

        /// <summary>
        /// Gets or Sets Numero
        /// </summary>
        [JsonPropertyName("numero")]
        public string Numero { get { return this.NumeroOption; } set { this.NumeroOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DatiRitenuta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiRitenuta>> DatiRitenutaOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiRitenuta
        /// </summary>
        [JsonPropertyName("dati_ritenuta")]
        public List<DatiRitenuta> DatiRitenuta { get { return this.DatiRitenutaOption; } set { this.DatiRitenutaOption = new Option<List<DatiRitenuta>>(value); } }

        /// <summary>
        /// Used to track the state of DatiBollo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiBollo> DatiBolloOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiBollo
        /// </summary>
        [JsonPropertyName("dati_bollo")]
        public DatiBollo DatiBollo { get { return this.DatiBolloOption; } set { this.DatiBolloOption = new Option<DatiBollo>(value); } }

        /// <summary>
        /// Used to track the state of DatiCassaPrevidenziale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiCassaPrevidenziale>> DatiCassaPrevidenzialeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiCassaPrevidenziale
        /// </summary>
        [JsonPropertyName("dati_cassa_previdenziale")]
        public List<DatiCassaPrevidenziale> DatiCassaPrevidenziale { get { return this.DatiCassaPrevidenzialeOption; } set { this.DatiCassaPrevidenzialeOption = new Option<List<DatiCassaPrevidenziale>>(value); } }

        /// <summary>
        /// Used to track the state of ScontoMaggiorazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ScontoMaggiorazione>> ScontoMaggiorazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets ScontoMaggiorazione
        /// </summary>
        [JsonPropertyName("sconto_maggiorazione")]
        public List<ScontoMaggiorazione> ScontoMaggiorazione { get { return this.ScontoMaggiorazioneOption; } set { this.ScontoMaggiorazioneOption = new Option<List<ScontoMaggiorazione>>(value); } }

        /// <summary>
        /// Used to track the state of ImportoTotaleDocumento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ImportoTotaleDocumentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImportoTotaleDocumento
        /// </summary>
        [JsonPropertyName("importo_totale_documento")]
        public double? ImportoTotaleDocumento { get { return this.ImportoTotaleDocumentoOption; } set { this.ImportoTotaleDocumentoOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Arrotondamento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ArrotondamentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Arrotondamento
        /// </summary>
        [JsonPropertyName("arrotondamento")]
        public double? Arrotondamento { get { return this.ArrotondamentoOption; } set { this.ArrotondamentoOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Causale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> CausaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Causale
        /// </summary>
        [JsonPropertyName("causale")]
        public List<string> Causale { get { return this.CausaleOption; } set { this.CausaleOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Art73
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> Art73Option { get; private set; }

        /// <summary>
        /// Gets or Sets Art73
        /// </summary>
        [JsonPropertyName("art73")]
        public string Art73 { get { return this.Art73Option; } set { this.Art73Option = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiGeneraliDocumento {\n");
            sb.Append("  TipoDocumento: ").Append(TipoDocumento).Append("\n");
            sb.Append("  Divisa: ").Append(Divisa).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  DatiRitenuta: ").Append(DatiRitenuta).Append("\n");
            sb.Append("  DatiBollo: ").Append(DatiBollo).Append("\n");
            sb.Append("  DatiCassaPrevidenziale: ").Append(DatiCassaPrevidenziale).Append("\n");
            sb.Append("  ScontoMaggiorazione: ").Append(ScontoMaggiorazione).Append("\n");
            sb.Append("  ImportoTotaleDocumento: ").Append(ImportoTotaleDocumento).Append("\n");
            sb.Append("  Arrotondamento: ").Append(Arrotondamento).Append("\n");
            sb.Append("  Causale: ").Append(Causale).Append("\n");
            sb.Append("  Art73: ").Append(Art73).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiGeneraliDocumento" />
    /// </summary>
    public class DatiGeneraliDocumentoJsonConverter : JsonConverter<DatiGeneraliDocumento>
    {
        /// <summary>
        /// The format to use to serialize Data
        /// </summary>
        public static string DataFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DatiGeneraliDocumento" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiGeneraliDocumento Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> tipoDocumento = default;
            Option<string> divisa = default;
            Option<DateTime?> data = default;
            Option<string> numero = default;
            Option<List<DatiRitenuta>> datiRitenuta = default;
            Option<DatiBollo> datiBollo = default;
            Option<List<DatiCassaPrevidenziale>> datiCassaPrevidenziale = default;
            Option<List<ScontoMaggiorazione>> scontoMaggiorazione = default;
            Option<double?> importoTotaleDocumento = default;
            Option<double?> arrotondamento = default;
            Option<List<string>> causale = default;
            Option<string> art73 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tipo_documento":
                            tipoDocumento = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "divisa":
                            divisa = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "numero":
                            numero = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dati_ritenuta":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiRitenuta = new Option<List<DatiRitenuta>>(JsonSerializer.Deserialize<List<DatiRitenuta>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_bollo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiBollo = new Option<DatiBollo>(JsonSerializer.Deserialize<DatiBollo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_cassa_previdenziale":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiCassaPrevidenziale = new Option<List<DatiCassaPrevidenziale>>(JsonSerializer.Deserialize<List<DatiCassaPrevidenziale>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sconto_maggiorazione":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scontoMaggiorazione = new Option<List<ScontoMaggiorazione>>(JsonSerializer.Deserialize<List<ScontoMaggiorazione>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "importo_totale_documento":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importoTotaleDocumento = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "arrotondamento":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                arrotondamento = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "causale":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                causale = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "art73":
                            art73 = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class DatiGeneraliDocumento.");

            if (datiBollo.IsSet && datiBollo.Value == null)
                throw new ArgumentNullException(nameof(datiBollo), "Property is not nullable for class DatiGeneraliDocumento.");

            return new DatiGeneraliDocumento(tipoDocumento, divisa, data, numero, datiRitenuta, datiBollo, datiCassaPrevidenziale, scontoMaggiorazione, importoTotaleDocumento, arrotondamento, causale, art73);
        }

        /// <summary>
        /// Serializes a <see cref="DatiGeneraliDocumento" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiGeneraliDocumento"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiGeneraliDocumento datiGeneraliDocumento, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiGeneraliDocumento, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiGeneraliDocumento" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiGeneraliDocumento"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiGeneraliDocumento datiGeneraliDocumento, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiGeneraliDocumento.DatiBolloOption.IsSet && datiGeneraliDocumento.DatiBollo == null)
                throw new ArgumentNullException(nameof(datiGeneraliDocumento.DatiBollo), "Property is required for class DatiGeneraliDocumento.");

            if (datiGeneraliDocumento.TipoDocumentoOption.IsSet)
                if (datiGeneraliDocumento.TipoDocumentoOption.Value != null)
                    writer.WriteString("tipo_documento", datiGeneraliDocumento.TipoDocumento);
                else
                    writer.WriteNull("tipo_documento");

            if (datiGeneraliDocumento.DivisaOption.IsSet)
                if (datiGeneraliDocumento.DivisaOption.Value != null)
                    writer.WriteString("divisa", datiGeneraliDocumento.Divisa);
                else
                    writer.WriteNull("divisa");

            if (datiGeneraliDocumento.DataOption.IsSet)
                writer.WriteString("data", datiGeneraliDocumento.DataOption.Value.Value.ToString(DataFormat));

            if (datiGeneraliDocumento.NumeroOption.IsSet)
                if (datiGeneraliDocumento.NumeroOption.Value != null)
                    writer.WriteString("numero", datiGeneraliDocumento.Numero);
                else
                    writer.WriteNull("numero");

            if (datiGeneraliDocumento.DatiRitenutaOption.IsSet)
                if (datiGeneraliDocumento.DatiRitenutaOption.Value != null)
                {
                    writer.WritePropertyName("dati_ritenuta");
                    JsonSerializer.Serialize(writer, datiGeneraliDocumento.DatiRitenuta, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_ritenuta");
            if (datiGeneraliDocumento.DatiBolloOption.IsSet)
            {
                writer.WritePropertyName("dati_bollo");
                JsonSerializer.Serialize(writer, datiGeneraliDocumento.DatiBollo, jsonSerializerOptions);
            }
            if (datiGeneraliDocumento.DatiCassaPrevidenzialeOption.IsSet)
                if (datiGeneraliDocumento.DatiCassaPrevidenzialeOption.Value != null)
                {
                    writer.WritePropertyName("dati_cassa_previdenziale");
                    JsonSerializer.Serialize(writer, datiGeneraliDocumento.DatiCassaPrevidenziale, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_cassa_previdenziale");
            if (datiGeneraliDocumento.ScontoMaggiorazioneOption.IsSet)
                if (datiGeneraliDocumento.ScontoMaggiorazioneOption.Value != null)
                {
                    writer.WritePropertyName("sconto_maggiorazione");
                    JsonSerializer.Serialize(writer, datiGeneraliDocumento.ScontoMaggiorazione, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sconto_maggiorazione");
            if (datiGeneraliDocumento.ImportoTotaleDocumentoOption.IsSet)
                if (datiGeneraliDocumento.ImportoTotaleDocumentoOption.Value != null)
                    writer.WriteNumber("importo_totale_documento", datiGeneraliDocumento.ImportoTotaleDocumentoOption.Value.Value);
                else
                    writer.WriteNull("importo_totale_documento");

            if (datiGeneraliDocumento.ArrotondamentoOption.IsSet)
                if (datiGeneraliDocumento.ArrotondamentoOption.Value != null)
                    writer.WriteNumber("arrotondamento", datiGeneraliDocumento.ArrotondamentoOption.Value.Value);
                else
                    writer.WriteNull("arrotondamento");

            if (datiGeneraliDocumento.CausaleOption.IsSet)
                if (datiGeneraliDocumento.CausaleOption.Value != null)
                {
                    writer.WritePropertyName("causale");
                    JsonSerializer.Serialize(writer, datiGeneraliDocumento.Causale, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("causale");
            if (datiGeneraliDocumento.Art73Option.IsSet)
                if (datiGeneraliDocumento.Art73Option.Value != null)
                    writer.WriteString("art73", datiGeneraliDocumento.Art73);
                else
                    writer.WriteNull("art73");
        }
    }
}
