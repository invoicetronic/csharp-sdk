// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiOrdineAcquisto
    /// </summary>
    public partial class DatiOrdineAcquisto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiOrdineAcquisto" /> class.
        /// </summary>
        /// <param name="riferimentoNumeroLinea">riferimentoNumeroLinea</param>
        /// <param name="idDocumento">idDocumento</param>
        /// <param name="data">data</param>
        /// <param name="numItem">numItem</param>
        /// <param name="codiceCommessaConvenzione">codiceCommessaConvenzione</param>
        /// <param name="codiceCup">codiceCup</param>
        /// <param name="codiceCig">codiceCig</param>
        [JsonConstructor]
        public DatiOrdineAcquisto(Option<List<int>> riferimentoNumeroLinea = default, Option<string> idDocumento = default, Option<DateTime?> data = default, Option<string> numItem = default, Option<string> codiceCommessaConvenzione = default, Option<string> codiceCup = default, Option<string> codiceCig = default)
        {
            RiferimentoNumeroLineaOption = riferimentoNumeroLinea;
            IdDocumentoOption = idDocumento;
            DataOption = data;
            NumItemOption = numItem;
            CodiceCommessaConvenzioneOption = codiceCommessaConvenzione;
            CodiceCupOption = codiceCup;
            CodiceCigOption = codiceCig;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RiferimentoNumeroLinea
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>> RiferimentoNumeroLineaOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiferimentoNumeroLinea
        /// </summary>
        [JsonPropertyName("riferimento_numero_linea")]
        public List<int> RiferimentoNumeroLinea { get { return this.RiferimentoNumeroLineaOption; } set { this.RiferimentoNumeroLineaOption = new Option<List<int>>(value); } }

        /// <summary>
        /// Used to track the state of IdDocumento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdDocumentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdDocumento
        /// </summary>
        [JsonPropertyName("id_documento")]
        public string IdDocumento { get { return this.IdDocumentoOption; } set { this.IdDocumentoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public DateTime? Data { get { return this.DataOption; } set { this.DataOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of NumItem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumItemOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumItem
        /// </summary>
        [JsonPropertyName("num_item")]
        public string NumItem { get { return this.NumItemOption; } set { this.NumItemOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CodiceCommessaConvenzione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodiceCommessaConvenzioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceCommessaConvenzione
        /// </summary>
        [JsonPropertyName("codice_commessa_convenzione")]
        public string CodiceCommessaConvenzione { get { return this.CodiceCommessaConvenzioneOption; } set { this.CodiceCommessaConvenzioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CodiceCup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodiceCupOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceCup
        /// </summary>
        [JsonPropertyName("codice_cup")]
        public string CodiceCup { get { return this.CodiceCupOption; } set { this.CodiceCupOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CodiceCig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodiceCigOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceCig
        /// </summary>
        [JsonPropertyName("codice_cig")]
        public string CodiceCig { get { return this.CodiceCigOption; } set { this.CodiceCigOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiOrdineAcquisto {\n");
            sb.Append("  RiferimentoNumeroLinea: ").Append(RiferimentoNumeroLinea).Append("\n");
            sb.Append("  IdDocumento: ").Append(IdDocumento).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  NumItem: ").Append(NumItem).Append("\n");
            sb.Append("  CodiceCommessaConvenzione: ").Append(CodiceCommessaConvenzione).Append("\n");
            sb.Append("  CodiceCup: ").Append(CodiceCup).Append("\n");
            sb.Append("  CodiceCig: ").Append(CodiceCig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiOrdineAcquisto" />
    /// </summary>
    public class DatiOrdineAcquistoJsonConverter : JsonConverter<DatiOrdineAcquisto>
    {
        /// <summary>
        /// The format to use to serialize Data
        /// </summary>
        public static string DataFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DatiOrdineAcquisto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiOrdineAcquisto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<int>> riferimentoNumeroLinea = default;
            Option<string> idDocumento = default;
            Option<DateTime?> data = default;
            Option<string> numItem = default;
            Option<string> codiceCommessaConvenzione = default;
            Option<string> codiceCup = default;
            Option<string> codiceCig = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "riferimento_numero_linea":
                            riferimentoNumeroLinea = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id_documento":
                            idDocumento = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "num_item":
                            numItem = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "codice_commessa_convenzione":
                            codiceCommessaConvenzione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "codice_cup":
                            codiceCup = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "codice_cig":
                            codiceCig = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DatiOrdineAcquisto(riferimentoNumeroLinea, idDocumento, data, numItem, codiceCommessaConvenzione, codiceCup, codiceCig);
        }

        /// <summary>
        /// Serializes a <see cref="DatiOrdineAcquisto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiOrdineAcquisto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiOrdineAcquisto datiOrdineAcquisto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiOrdineAcquisto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiOrdineAcquisto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiOrdineAcquisto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiOrdineAcquisto datiOrdineAcquisto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiOrdineAcquisto.RiferimentoNumeroLineaOption.IsSet)
                if (datiOrdineAcquisto.RiferimentoNumeroLineaOption.Value != null)
                {
                    writer.WritePropertyName("riferimento_numero_linea");
                    JsonSerializer.Serialize(writer, datiOrdineAcquisto.RiferimentoNumeroLinea, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("riferimento_numero_linea");
            if (datiOrdineAcquisto.IdDocumentoOption.IsSet)
                if (datiOrdineAcquisto.IdDocumentoOption.Value != null)
                    writer.WriteString("id_documento", datiOrdineAcquisto.IdDocumento);
                else
                    writer.WriteNull("id_documento");

            if (datiOrdineAcquisto.DataOption.IsSet)
                if (datiOrdineAcquisto.DataOption.Value != null)
                    writer.WriteString("data", datiOrdineAcquisto.DataOption.Value.Value.ToString(DataFormat));
                else
                    writer.WriteNull("data");

            if (datiOrdineAcquisto.NumItemOption.IsSet)
                if (datiOrdineAcquisto.NumItemOption.Value != null)
                    writer.WriteString("num_item", datiOrdineAcquisto.NumItem);
                else
                    writer.WriteNull("num_item");

            if (datiOrdineAcquisto.CodiceCommessaConvenzioneOption.IsSet)
                if (datiOrdineAcquisto.CodiceCommessaConvenzioneOption.Value != null)
                    writer.WriteString("codice_commessa_convenzione", datiOrdineAcquisto.CodiceCommessaConvenzione);
                else
                    writer.WriteNull("codice_commessa_convenzione");

            if (datiOrdineAcquisto.CodiceCupOption.IsSet)
                if (datiOrdineAcquisto.CodiceCupOption.Value != null)
                    writer.WriteString("codice_cup", datiOrdineAcquisto.CodiceCup);
                else
                    writer.WriteNull("codice_cup");

            if (datiOrdineAcquisto.CodiceCigOption.IsSet)
                if (datiOrdineAcquisto.CodiceCigOption.Value != null)
                    writer.WriteString("codice_cig", datiOrdineAcquisto.CodiceCig);
                else
                    writer.WriteNull("codice_cig");
        }
    }
}
