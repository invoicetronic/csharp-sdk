// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiPagamento
    /// </summary>
    public partial class DatiPagamento : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiPagamento" /> class.
        /// </summary>
        /// <param name="condizioniPagamento">condizioniPagamento</param>
        /// <param name="dettaglioPagamento">dettaglioPagamento</param>
        [JsonConstructor]
        public DatiPagamento(Option<string> condizioniPagamento = default, Option<List<DettaglioPagamento>> dettaglioPagamento = default)
        {
            CondizioniPagamentoOption = condizioniPagamento;
            DettaglioPagamentoOption = dettaglioPagamento;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CondizioniPagamento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CondizioniPagamentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CondizioniPagamento
        /// </summary>
        [JsonPropertyName("condizioni_pagamento")]
        public string CondizioniPagamento { get { return this.CondizioniPagamentoOption; } set { this.CondizioniPagamentoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DettaglioPagamento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DettaglioPagamento>> DettaglioPagamentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DettaglioPagamento
        /// </summary>
        [JsonPropertyName("dettaglio_pagamento")]
        public List<DettaglioPagamento> DettaglioPagamento { get { return this.DettaglioPagamentoOption; } set { this.DettaglioPagamentoOption = new Option<List<DettaglioPagamento>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiPagamento {\n");
            sb.Append("  CondizioniPagamento: ").Append(CondizioniPagamento).Append("\n");
            sb.Append("  DettaglioPagamento: ").Append(DettaglioPagamento).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiPagamento" />
    /// </summary>
    public class DatiPagamentoJsonConverter : JsonConverter<DatiPagamento>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatiPagamento" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiPagamento Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> condizioniPagamento = default;
            Option<List<DettaglioPagamento>> dettaglioPagamento = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "condizioni_pagamento":
                            condizioniPagamento = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "dettaglio_pagamento":
                            dettaglioPagamento = new Option<List<DettaglioPagamento>>(JsonSerializer.Deserialize<List<DettaglioPagamento>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DatiPagamento(condizioniPagamento, dettaglioPagamento);
        }

        /// <summary>
        /// Serializes a <see cref="DatiPagamento" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiPagamento"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiPagamento datiPagamento, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiPagamento, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiPagamento" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiPagamento"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiPagamento datiPagamento, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiPagamento.CondizioniPagamentoOption.IsSet)
                if (datiPagamento.CondizioniPagamentoOption.Value != null)
                    writer.WriteString("condizioni_pagamento", datiPagamento.CondizioniPagamento);
                else
                    writer.WriteNull("condizioni_pagamento");

            if (datiPagamento.DettaglioPagamentoOption.IsSet)
                if (datiPagamento.DettaglioPagamentoOption.Value != null)
                {
                    writer.WritePropertyName("dettaglio_pagamento");
                    JsonSerializer.Serialize(writer, datiPagamento.DettaglioPagamento, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dettaglio_pagamento");
        }
    }
}
