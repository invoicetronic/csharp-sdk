// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiRiepilogo
    /// </summary>
    public partial class DatiRiepilogo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiRiepilogo" /> class.
        /// </summary>
        /// <param name="aliquotaIva">aliquotaIva</param>
        /// <param name="natura">natura</param>
        /// <param name="speseAccessorie">speseAccessorie</param>
        /// <param name="arrotondamento">arrotondamento</param>
        /// <param name="imponibileImporto">imponibileImporto</param>
        /// <param name="imposta">imposta</param>
        /// <param name="esigibilitaIva">esigibilitaIva</param>
        /// <param name="riferimentoNormativo">riferimentoNormativo</param>
        [JsonConstructor]
        public DatiRiepilogo(Option<double?> aliquotaIva = default, Option<string> natura = default, Option<double?> speseAccessorie = default, Option<double?> arrotondamento = default, Option<double?> imponibileImporto = default, Option<double?> imposta = default, Option<string> esigibilitaIva = default, Option<string> riferimentoNormativo = default)
        {
            AliquotaIvaOption = aliquotaIva;
            NaturaOption = natura;
            SpeseAccessorieOption = speseAccessorie;
            ArrotondamentoOption = arrotondamento;
            ImponibileImportoOption = imponibileImporto;
            ImpostaOption = imposta;
            EsigibilitaIvaOption = esigibilitaIva;
            RiferimentoNormativoOption = riferimentoNormativo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AliquotaIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AliquotaIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets AliquotaIva
        /// </summary>
        [JsonPropertyName("aliquota_iva")]
        public double? AliquotaIva { get { return this.AliquotaIvaOption; } set { this.AliquotaIvaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Natura
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NaturaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Natura
        /// </summary>
        [JsonPropertyName("natura")]
        public string Natura { get { return this.NaturaOption; } set { this.NaturaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SpeseAccessorie
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SpeseAccessorieOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpeseAccessorie
        /// </summary>
        [JsonPropertyName("spese_accessorie")]
        public double? SpeseAccessorie { get { return this.SpeseAccessorieOption; } set { this.SpeseAccessorieOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Arrotondamento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ArrotondamentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Arrotondamento
        /// </summary>
        [JsonPropertyName("arrotondamento")]
        public double? Arrotondamento { get { return this.ArrotondamentoOption; } set { this.ArrotondamentoOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of ImponibileImporto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ImponibileImportoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImponibileImporto
        /// </summary>
        [JsonPropertyName("imponibile_importo")]
        public double? ImponibileImporto { get { return this.ImponibileImportoOption; } set { this.ImponibileImportoOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Imposta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ImpostaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Imposta
        /// </summary>
        [JsonPropertyName("imposta")]
        public double? Imposta { get { return this.ImpostaOption; } set { this.ImpostaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of EsigibilitaIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EsigibilitaIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets EsigibilitaIva
        /// </summary>
        [JsonPropertyName("esigibilita_iva")]
        public string EsigibilitaIva { get { return this.EsigibilitaIvaOption; } set { this.EsigibilitaIvaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiferimentoNormativo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiferimentoNormativoOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiferimentoNormativo
        /// </summary>
        [JsonPropertyName("riferimento_normativo")]
        public string RiferimentoNormativo { get { return this.RiferimentoNormativoOption; } set { this.RiferimentoNormativoOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiRiepilogo {\n");
            sb.Append("  AliquotaIva: ").Append(AliquotaIva).Append("\n");
            sb.Append("  Natura: ").Append(Natura).Append("\n");
            sb.Append("  SpeseAccessorie: ").Append(SpeseAccessorie).Append("\n");
            sb.Append("  Arrotondamento: ").Append(Arrotondamento).Append("\n");
            sb.Append("  ImponibileImporto: ").Append(ImponibileImporto).Append("\n");
            sb.Append("  Imposta: ").Append(Imposta).Append("\n");
            sb.Append("  EsigibilitaIva: ").Append(EsigibilitaIva).Append("\n");
            sb.Append("  RiferimentoNormativo: ").Append(RiferimentoNormativo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiRiepilogo" />
    /// </summary>
    public class DatiRiepilogoJsonConverter : JsonConverter<DatiRiepilogo>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatiRiepilogo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiRiepilogo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> aliquotaIva = default;
            Option<string> natura = default;
            Option<double?> speseAccessorie = default;
            Option<double?> arrotondamento = default;
            Option<double?> imponibileImporto = default;
            Option<double?> imposta = default;
            Option<string> esigibilitaIva = default;
            Option<string> riferimentoNormativo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "aliquota_iva":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aliquotaIva = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "natura":
                            natura = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "spese_accessorie":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                speseAccessorie = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "arrotondamento":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                arrotondamento = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "imponibile_importo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                imponibileImporto = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "imposta":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                imposta = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "esigibilita_iva":
                            esigibilitaIva = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riferimento_normativo":
                            riferimentoNormativo = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aliquotaIva.IsSet && aliquotaIva.Value == null)
                throw new ArgumentNullException(nameof(aliquotaIva), "Property is not nullable for class DatiRiepilogo.");

            if (imponibileImporto.IsSet && imponibileImporto.Value == null)
                throw new ArgumentNullException(nameof(imponibileImporto), "Property is not nullable for class DatiRiepilogo.");

            if (imposta.IsSet && imposta.Value == null)
                throw new ArgumentNullException(nameof(imposta), "Property is not nullable for class DatiRiepilogo.");

            return new DatiRiepilogo(aliquotaIva, natura, speseAccessorie, arrotondamento, imponibileImporto, imposta, esigibilitaIva, riferimentoNormativo);
        }

        /// <summary>
        /// Serializes a <see cref="DatiRiepilogo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiRiepilogo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiRiepilogo datiRiepilogo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiRiepilogo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiRiepilogo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiRiepilogo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiRiepilogo datiRiepilogo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiRiepilogo.AliquotaIvaOption.IsSet)
                writer.WriteNumber("aliquota_iva", datiRiepilogo.AliquotaIvaOption.Value.Value);

            if (datiRiepilogo.NaturaOption.IsSet)
                if (datiRiepilogo.NaturaOption.Value != null)
                    writer.WriteString("natura", datiRiepilogo.Natura);
                else
                    writer.WriteNull("natura");

            if (datiRiepilogo.SpeseAccessorieOption.IsSet)
                if (datiRiepilogo.SpeseAccessorieOption.Value != null)
                    writer.WriteNumber("spese_accessorie", datiRiepilogo.SpeseAccessorieOption.Value.Value);
                else
                    writer.WriteNull("spese_accessorie");

            if (datiRiepilogo.ArrotondamentoOption.IsSet)
                if (datiRiepilogo.ArrotondamentoOption.Value != null)
                    writer.WriteNumber("arrotondamento", datiRiepilogo.ArrotondamentoOption.Value.Value);
                else
                    writer.WriteNull("arrotondamento");

            if (datiRiepilogo.ImponibileImportoOption.IsSet)
                writer.WriteNumber("imponibile_importo", datiRiepilogo.ImponibileImportoOption.Value.Value);

            if (datiRiepilogo.ImpostaOption.IsSet)
                writer.WriteNumber("imposta", datiRiepilogo.ImpostaOption.Value.Value);

            if (datiRiepilogo.EsigibilitaIvaOption.IsSet)
                if (datiRiepilogo.EsigibilitaIvaOption.Value != null)
                    writer.WriteString("esigibilita_iva", datiRiepilogo.EsigibilitaIva);
                else
                    writer.WriteNull("esigibilita_iva");

            if (datiRiepilogo.RiferimentoNormativoOption.IsSet)
                if (datiRiepilogo.RiferimentoNormativoOption.Value != null)
                    writer.WriteString("riferimento_normativo", datiRiepilogo.RiferimentoNormativo);
                else
                    writer.WriteNull("riferimento_normativo");
        }
    }
}
