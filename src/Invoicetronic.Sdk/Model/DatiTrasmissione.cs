// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiTrasmissione
    /// </summary>
    public partial class DatiTrasmissione : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiTrasmissione" /> class.
        /// </summary>
        /// <param name="idTrasmittente">idTrasmittente</param>
        /// <param name="progressivoInvio">progressivoInvio</param>
        /// <param name="formatoTrasmissione">formatoTrasmissione</param>
        /// <param name="codiceDestinatario">codiceDestinatario</param>
        /// <param name="contattiTrasmittente">contattiTrasmittente</param>
        /// <param name="pecDestinatario">pecDestinatario</param>
        [JsonConstructor]
        public DatiTrasmissione(Option<IdTrasmittente> idTrasmittente = default, Option<string> progressivoInvio = default, Option<string> formatoTrasmissione = default, Option<string> codiceDestinatario = default, Option<ContattiTrasmittente> contattiTrasmittente = default, Option<string> pecDestinatario = default)
        {
            IdTrasmittenteOption = idTrasmittente;
            ProgressivoInvioOption = progressivoInvio;
            FormatoTrasmissioneOption = formatoTrasmissione;
            CodiceDestinatarioOption = codiceDestinatario;
            ContattiTrasmittenteOption = contattiTrasmittente;
            PecDestinatarioOption = pecDestinatario;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IdTrasmittente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IdTrasmittente> IdTrasmittenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdTrasmittente
        /// </summary>
        [JsonPropertyName("id_trasmittente")]
        public IdTrasmittente IdTrasmittente { get { return this.IdTrasmittenteOption; } set { this.IdTrasmittenteOption = new Option<IdTrasmittente>(value); } }

        /// <summary>
        /// Used to track the state of ProgressivoInvio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ProgressivoInvioOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProgressivoInvio
        /// </summary>
        [JsonPropertyName("progressivo_invio")]
        public string ProgressivoInvio { get { return this.ProgressivoInvioOption; } set { this.ProgressivoInvioOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FormatoTrasmissione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> FormatoTrasmissioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormatoTrasmissione
        /// </summary>
        [JsonPropertyName("formato_trasmissione")]
        public string FormatoTrasmissione { get { return this.FormatoTrasmissioneOption; } set { this.FormatoTrasmissioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CodiceDestinatario
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CodiceDestinatarioOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceDestinatario
        /// </summary>
        [JsonPropertyName("codice_destinatario")]
        public string CodiceDestinatario { get { return this.CodiceDestinatarioOption; } set { this.CodiceDestinatarioOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContattiTrasmittente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContattiTrasmittente> ContattiTrasmittenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContattiTrasmittente
        /// </summary>
        [JsonPropertyName("contatti_trasmittente")]
        public ContattiTrasmittente ContattiTrasmittente { get { return this.ContattiTrasmittenteOption; } set { this.ContattiTrasmittenteOption = new Option<ContattiTrasmittente>(value); } }

        /// <summary>
        /// Used to track the state of PecDestinatario
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PecDestinatarioOption { get; private set; }

        /// <summary>
        /// Gets or Sets PecDestinatario
        /// </summary>
        [JsonPropertyName("pec_destinatario")]
        public string PecDestinatario { get { return this.PecDestinatarioOption; } set { this.PecDestinatarioOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiTrasmissione {\n");
            sb.Append("  IdTrasmittente: ").Append(IdTrasmittente).Append("\n");
            sb.Append("  ProgressivoInvio: ").Append(ProgressivoInvio).Append("\n");
            sb.Append("  FormatoTrasmissione: ").Append(FormatoTrasmissione).Append("\n");
            sb.Append("  CodiceDestinatario: ").Append(CodiceDestinatario).Append("\n");
            sb.Append("  ContattiTrasmittente: ").Append(ContattiTrasmittente).Append("\n");
            sb.Append("  PecDestinatario: ").Append(PecDestinatario).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiTrasmissione" />
    /// </summary>
    public class DatiTrasmissioneJsonConverter : JsonConverter<DatiTrasmissione>
    {
        /// <summary>
        /// Deserializes json to <see cref="DatiTrasmissione" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiTrasmissione Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IdTrasmittente> idTrasmittente = default;
            Option<string> progressivoInvio = default;
            Option<string> formatoTrasmissione = default;
            Option<string> codiceDestinatario = default;
            Option<ContattiTrasmittente> contattiTrasmittente = default;
            Option<string> pecDestinatario = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id_trasmittente":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                idTrasmittente = new Option<IdTrasmittente>(JsonSerializer.Deserialize<IdTrasmittente>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "progressivo_invio":
                            progressivoInvio = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "formato_trasmissione":
                            formatoTrasmissione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "codice_destinatario":
                            codiceDestinatario = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contatti_trasmittente":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contattiTrasmittente = new Option<ContattiTrasmittente>(JsonSerializer.Deserialize<ContattiTrasmittente>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pec_destinatario":
                            pecDestinatario = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (idTrasmittente.IsSet && idTrasmittente.Value == null)
                throw new ArgumentNullException(nameof(idTrasmittente), "Property is not nullable for class DatiTrasmissione.");

            if (contattiTrasmittente.IsSet && contattiTrasmittente.Value == null)
                throw new ArgumentNullException(nameof(contattiTrasmittente), "Property is not nullable for class DatiTrasmissione.");

            return new DatiTrasmissione(idTrasmittente, progressivoInvio, formatoTrasmissione, codiceDestinatario, contattiTrasmittente, pecDestinatario);
        }

        /// <summary>
        /// Serializes a <see cref="DatiTrasmissione" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiTrasmissione"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiTrasmissione datiTrasmissione, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiTrasmissione, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiTrasmissione" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiTrasmissione"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiTrasmissione datiTrasmissione, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiTrasmissione.IdTrasmittenteOption.IsSet && datiTrasmissione.IdTrasmittente == null)
                throw new ArgumentNullException(nameof(datiTrasmissione.IdTrasmittente), "Property is required for class DatiTrasmissione.");

            if (datiTrasmissione.ContattiTrasmittenteOption.IsSet && datiTrasmissione.ContattiTrasmittente == null)
                throw new ArgumentNullException(nameof(datiTrasmissione.ContattiTrasmittente), "Property is required for class DatiTrasmissione.");

            if (datiTrasmissione.IdTrasmittenteOption.IsSet)
            {
                writer.WritePropertyName("id_trasmittente");
                JsonSerializer.Serialize(writer, datiTrasmissione.IdTrasmittente, jsonSerializerOptions);
            }
            if (datiTrasmissione.ProgressivoInvioOption.IsSet)
                if (datiTrasmissione.ProgressivoInvioOption.Value != null)
                    writer.WriteString("progressivo_invio", datiTrasmissione.ProgressivoInvio);
                else
                    writer.WriteNull("progressivo_invio");

            if (datiTrasmissione.FormatoTrasmissioneOption.IsSet)
                if (datiTrasmissione.FormatoTrasmissioneOption.Value != null)
                    writer.WriteString("formato_trasmissione", datiTrasmissione.FormatoTrasmissione);
                else
                    writer.WriteNull("formato_trasmissione");

            if (datiTrasmissione.CodiceDestinatarioOption.IsSet)
                if (datiTrasmissione.CodiceDestinatarioOption.Value != null)
                    writer.WriteString("codice_destinatario", datiTrasmissione.CodiceDestinatario);
                else
                    writer.WriteNull("codice_destinatario");

            if (datiTrasmissione.ContattiTrasmittenteOption.IsSet)
            {
                writer.WritePropertyName("contatti_trasmittente");
                JsonSerializer.Serialize(writer, datiTrasmissione.ContattiTrasmittente, jsonSerializerOptions);
            }
            if (datiTrasmissione.PecDestinatarioOption.IsSet)
                if (datiTrasmissione.PecDestinatarioOption.Value != null)
                    writer.WriteString("pec_destinatario", datiTrasmissione.PecDestinatario);
                else
                    writer.WriteNull("pec_destinatario");
        }
    }
}
