// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DatiTrasporto
    /// </summary>
    public partial class DatiTrasporto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiTrasporto" /> class.
        /// </summary>
        /// <param name="datiAnagraficiVettore">datiAnagraficiVettore</param>
        /// <param name="mezzoTrasporto">mezzoTrasporto</param>
        /// <param name="causaleTrasporto">causaleTrasporto</param>
        /// <param name="numeroColli">numeroColli</param>
        /// <param name="descrizione">descrizione</param>
        /// <param name="unitaMisuraPeso">unitaMisuraPeso</param>
        /// <param name="pesoLordo">pesoLordo</param>
        /// <param name="pesoNetto">pesoNetto</param>
        /// <param name="dataOraRitiro">dataOraRitiro</param>
        /// <param name="dataInizioTrasporto">dataInizioTrasporto</param>
        /// <param name="tipoResa">tipoResa</param>
        /// <param name="indirizzoResa">indirizzoResa</param>
        /// <param name="dataOraConsegna">dataOraConsegna</param>
        [JsonConstructor]
        public DatiTrasporto(Option<DatiAnagraficiVettore> datiAnagraficiVettore = default, Option<string> mezzoTrasporto = default, Option<string> causaleTrasporto = default, Option<int?> numeroColli = default, Option<string> descrizione = default, Option<string> unitaMisuraPeso = default, Option<double?> pesoLordo = default, Option<double?> pesoNetto = default, Option<DateTime?> dataOraRitiro = default, Option<DateTime?> dataInizioTrasporto = default, Option<string> tipoResa = default, Option<IndirizzoResa> indirizzoResa = default, Option<DateTime?> dataOraConsegna = default)
        {
            DatiAnagraficiVettoreOption = datiAnagraficiVettore;
            MezzoTrasportoOption = mezzoTrasporto;
            CausaleTrasportoOption = causaleTrasporto;
            NumeroColliOption = numeroColli;
            DescrizioneOption = descrizione;
            UnitaMisuraPesoOption = unitaMisuraPeso;
            PesoLordoOption = pesoLordo;
            PesoNettoOption = pesoNetto;
            DataOraRitiroOption = dataOraRitiro;
            DataInizioTrasportoOption = dataInizioTrasporto;
            TipoResaOption = tipoResa;
            IndirizzoResaOption = indirizzoResa;
            DataOraConsegnaOption = dataOraConsegna;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DatiAnagraficiVettore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiAnagraficiVettore> DatiAnagraficiVettoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiAnagraficiVettore
        /// </summary>
        [JsonPropertyName("dati_anagrafici_vettore")]
        public DatiAnagraficiVettore DatiAnagraficiVettore { get { return this.DatiAnagraficiVettoreOption; } set { this.DatiAnagraficiVettoreOption = new Option<DatiAnagraficiVettore>(value); } }

        /// <summary>
        /// Used to track the state of MezzoTrasporto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MezzoTrasportoOption { get; private set; }

        /// <summary>
        /// Gets or Sets MezzoTrasporto
        /// </summary>
        [JsonPropertyName("mezzo_trasporto")]
        public string MezzoTrasporto { get { return this.MezzoTrasportoOption; } set { this.MezzoTrasportoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CausaleTrasporto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CausaleTrasportoOption { get; private set; }

        /// <summary>
        /// Gets or Sets CausaleTrasporto
        /// </summary>
        [JsonPropertyName("causale_trasporto")]
        public string CausaleTrasporto { get { return this.CausaleTrasportoOption; } set { this.CausaleTrasportoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NumeroColli
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumeroColliOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumeroColli
        /// </summary>
        [JsonPropertyName("numero_colli")]
        public int? NumeroColli { get { return this.NumeroColliOption; } set { this.NumeroColliOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Descrizione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescrizioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Descrizione
        /// </summary>
        [JsonPropertyName("descrizione")]
        public string Descrizione { get { return this.DescrizioneOption; } set { this.DescrizioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of UnitaMisuraPeso
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UnitaMisuraPesoOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitaMisuraPeso
        /// </summary>
        [JsonPropertyName("unita_misura_peso")]
        public string UnitaMisuraPeso { get { return this.UnitaMisuraPesoOption; } set { this.UnitaMisuraPesoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PesoLordo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PesoLordoOption { get; private set; }

        /// <summary>
        /// Gets or Sets PesoLordo
        /// </summary>
        [JsonPropertyName("peso_lordo")]
        public double? PesoLordo { get { return this.PesoLordoOption; } set { this.PesoLordoOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of PesoNetto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PesoNettoOption { get; private set; }

        /// <summary>
        /// Gets or Sets PesoNetto
        /// </summary>
        [JsonPropertyName("peso_netto")]
        public double? PesoNetto { get { return this.PesoNettoOption; } set { this.PesoNettoOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of DataOraRitiro
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOraRitiroOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataOraRitiro
        /// </summary>
        [JsonPropertyName("data_ora_ritiro")]
        public DateTime? DataOraRitiro { get { return this.DataOraRitiroOption; } set { this.DataOraRitiroOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DataInizioTrasporto
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataInizioTrasportoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataInizioTrasporto
        /// </summary>
        [JsonPropertyName("data_inizio_trasporto")]
        public DateTime? DataInizioTrasporto { get { return this.DataInizioTrasportoOption; } set { this.DataInizioTrasportoOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of TipoResa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TipoResaOption { get; private set; }

        /// <summary>
        /// Gets or Sets TipoResa
        /// </summary>
        [JsonPropertyName("tipo_resa")]
        public string TipoResa { get { return this.TipoResaOption; } set { this.TipoResaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IndirizzoResa
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IndirizzoResa> IndirizzoResaOption { get; private set; }

        /// <summary>
        /// Gets or Sets IndirizzoResa
        /// </summary>
        [JsonPropertyName("indirizzo_resa")]
        public IndirizzoResa IndirizzoResa { get { return this.IndirizzoResaOption; } set { this.IndirizzoResaOption = new Option<IndirizzoResa>(value); } }

        /// <summary>
        /// Used to track the state of DataOraConsegna
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOraConsegnaOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataOraConsegna
        /// </summary>
        [JsonPropertyName("data_ora_consegna")]
        public DateTime? DataOraConsegna { get { return this.DataOraConsegnaOption; } set { this.DataOraConsegnaOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiTrasporto {\n");
            sb.Append("  DatiAnagraficiVettore: ").Append(DatiAnagraficiVettore).Append("\n");
            sb.Append("  MezzoTrasporto: ").Append(MezzoTrasporto).Append("\n");
            sb.Append("  CausaleTrasporto: ").Append(CausaleTrasporto).Append("\n");
            sb.Append("  NumeroColli: ").Append(NumeroColli).Append("\n");
            sb.Append("  Descrizione: ").Append(Descrizione).Append("\n");
            sb.Append("  UnitaMisuraPeso: ").Append(UnitaMisuraPeso).Append("\n");
            sb.Append("  PesoLordo: ").Append(PesoLordo).Append("\n");
            sb.Append("  PesoNetto: ").Append(PesoNetto).Append("\n");
            sb.Append("  DataOraRitiro: ").Append(DataOraRitiro).Append("\n");
            sb.Append("  DataInizioTrasporto: ").Append(DataInizioTrasporto).Append("\n");
            sb.Append("  TipoResa: ").Append(TipoResa).Append("\n");
            sb.Append("  IndirizzoResa: ").Append(IndirizzoResa).Append("\n");
            sb.Append("  DataOraConsegna: ").Append(DataOraConsegna).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DatiTrasporto" />
    /// </summary>
    public class DatiTrasportoJsonConverter : JsonConverter<DatiTrasporto>
    {
        /// <summary>
        /// The format to use to serialize DataOraRitiro
        /// </summary>
        public static string DataOraRitiroFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataInizioTrasporto
        /// </summary>
        public static string DataInizioTrasportoFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataOraConsegna
        /// </summary>
        public static string DataOraConsegnaFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DatiTrasporto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DatiTrasporto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DatiAnagraficiVettore> datiAnagraficiVettore = default;
            Option<string> mezzoTrasporto = default;
            Option<string> causaleTrasporto = default;
            Option<int?> numeroColli = default;
            Option<string> descrizione = default;
            Option<string> unitaMisuraPeso = default;
            Option<double?> pesoLordo = default;
            Option<double?> pesoNetto = default;
            Option<DateTime?> dataOraRitiro = default;
            Option<DateTime?> dataInizioTrasporto = default;
            Option<string> tipoResa = default;
            Option<IndirizzoResa> indirizzoResa = default;
            Option<DateTime?> dataOraConsegna = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dati_anagrafici_vettore":
                            datiAnagraficiVettore = new Option<DatiAnagraficiVettore>(JsonSerializer.Deserialize<DatiAnagraficiVettore>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mezzo_trasporto":
                            mezzoTrasporto = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "causale_trasporto":
                            causaleTrasporto = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "numero_colli":
                            numeroColli = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "descrizione":
                            descrizione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "unita_misura_peso":
                            unitaMisuraPeso = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "peso_lordo":
                            pesoLordo = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "peso_netto":
                            pesoNetto = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "data_ora_ritiro":
                            dataOraRitiro = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_inizio_trasporto":
                            dataInizioTrasporto = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tipo_resa":
                            tipoResa = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "indirizzo_resa":
                            indirizzoResa = new Option<IndirizzoResa>(JsonSerializer.Deserialize<IndirizzoResa>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_ora_consegna":
                            dataOraConsegna = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (datiAnagraficiVettore.IsSet && datiAnagraficiVettore.Value == null)
                throw new ArgumentNullException(nameof(datiAnagraficiVettore), "Property is not nullable for class DatiTrasporto.");

            if (indirizzoResa.IsSet && indirizzoResa.Value == null)
                throw new ArgumentNullException(nameof(indirizzoResa), "Property is not nullable for class DatiTrasporto.");

            return new DatiTrasporto(datiAnagraficiVettore, mezzoTrasporto, causaleTrasporto, numeroColli, descrizione, unitaMisuraPeso, pesoLordo, pesoNetto, dataOraRitiro, dataInizioTrasporto, tipoResa, indirizzoResa, dataOraConsegna);
        }

        /// <summary>
        /// Serializes a <see cref="DatiTrasporto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiTrasporto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DatiTrasporto datiTrasporto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, datiTrasporto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DatiTrasporto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="datiTrasporto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DatiTrasporto datiTrasporto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (datiTrasporto.DatiAnagraficiVettoreOption.IsSet && datiTrasporto.DatiAnagraficiVettore == null)
                throw new ArgumentNullException(nameof(datiTrasporto.DatiAnagraficiVettore), "Property is required for class DatiTrasporto.");

            if (datiTrasporto.IndirizzoResaOption.IsSet && datiTrasporto.IndirizzoResa == null)
                throw new ArgumentNullException(nameof(datiTrasporto.IndirizzoResa), "Property is required for class DatiTrasporto.");

            if (datiTrasporto.DatiAnagraficiVettoreOption.IsSet)
            {
                writer.WritePropertyName("dati_anagrafici_vettore");
                JsonSerializer.Serialize(writer, datiTrasporto.DatiAnagraficiVettore, jsonSerializerOptions);
            }
            if (datiTrasporto.MezzoTrasportoOption.IsSet)
                if (datiTrasporto.MezzoTrasportoOption.Value != null)
                    writer.WriteString("mezzo_trasporto", datiTrasporto.MezzoTrasporto);
                else
                    writer.WriteNull("mezzo_trasporto");

            if (datiTrasporto.CausaleTrasportoOption.IsSet)
                if (datiTrasporto.CausaleTrasportoOption.Value != null)
                    writer.WriteString("causale_trasporto", datiTrasporto.CausaleTrasporto);
                else
                    writer.WriteNull("causale_trasporto");

            if (datiTrasporto.NumeroColliOption.IsSet)
                if (datiTrasporto.NumeroColliOption.Value != null)
                    writer.WriteNumber("numero_colli", datiTrasporto.NumeroColliOption.Value.Value);
                else
                    writer.WriteNull("numero_colli");

            if (datiTrasporto.DescrizioneOption.IsSet)
                if (datiTrasporto.DescrizioneOption.Value != null)
                    writer.WriteString("descrizione", datiTrasporto.Descrizione);
                else
                    writer.WriteNull("descrizione");

            if (datiTrasporto.UnitaMisuraPesoOption.IsSet)
                if (datiTrasporto.UnitaMisuraPesoOption.Value != null)
                    writer.WriteString("unita_misura_peso", datiTrasporto.UnitaMisuraPeso);
                else
                    writer.WriteNull("unita_misura_peso");

            if (datiTrasporto.PesoLordoOption.IsSet)
                if (datiTrasporto.PesoLordoOption.Value != null)
                    writer.WriteNumber("peso_lordo", datiTrasporto.PesoLordoOption.Value.Value);
                else
                    writer.WriteNull("peso_lordo");

            if (datiTrasporto.PesoNettoOption.IsSet)
                if (datiTrasporto.PesoNettoOption.Value != null)
                    writer.WriteNumber("peso_netto", datiTrasporto.PesoNettoOption.Value.Value);
                else
                    writer.WriteNull("peso_netto");

            if (datiTrasporto.DataOraRitiroOption.IsSet)
                if (datiTrasporto.DataOraRitiroOption.Value != null)
                    writer.WriteString("data_ora_ritiro", datiTrasporto.DataOraRitiroOption.Value.Value.ToString(DataOraRitiroFormat));
                else
                    writer.WriteNull("data_ora_ritiro");

            if (datiTrasporto.DataInizioTrasportoOption.IsSet)
                if (datiTrasporto.DataInizioTrasportoOption.Value != null)
                    writer.WriteString("data_inizio_trasporto", datiTrasporto.DataInizioTrasportoOption.Value.Value.ToString(DataInizioTrasportoFormat));
                else
                    writer.WriteNull("data_inizio_trasporto");

            if (datiTrasporto.TipoResaOption.IsSet)
                if (datiTrasporto.TipoResaOption.Value != null)
                    writer.WriteString("tipo_resa", datiTrasporto.TipoResa);
                else
                    writer.WriteNull("tipo_resa");

            if (datiTrasporto.IndirizzoResaOption.IsSet)
            {
                writer.WritePropertyName("indirizzo_resa");
                JsonSerializer.Serialize(writer, datiTrasporto.IndirizzoResa, jsonSerializerOptions);
            }
            if (datiTrasporto.DataOraConsegnaOption.IsSet)
                if (datiTrasporto.DataOraConsegnaOption.Value != null)
                    writer.WriteString("data_ora_consegna", datiTrasporto.DataOraConsegnaOption.Value.Value.ToString(DataOraConsegnaFormat));
                else
                    writer.WriteNull("data_ora_consegna");
        }
    }
}
