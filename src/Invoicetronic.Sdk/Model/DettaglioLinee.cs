// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// DettaglioLinee
    /// </summary>
    public partial class DettaglioLinee : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DettaglioLinee" /> class.
        /// </summary>
        /// <param name="numeroLinea">numeroLinea</param>
        /// <param name="tipoCessionePrestazione">tipoCessionePrestazione</param>
        /// <param name="codiceArticolo">codiceArticolo</param>
        /// <param name="descrizione">descrizione</param>
        /// <param name="quantita">quantita</param>
        /// <param name="unitaMisura">unitaMisura</param>
        /// <param name="dataInizioPeriodo">dataInizioPeriodo</param>
        /// <param name="dataFinePeriodo">dataFinePeriodo</param>
        /// <param name="prezzoUnitario">prezzoUnitario</param>
        /// <param name="scontoMaggiorazione">scontoMaggiorazione</param>
        /// <param name="prezzoTotale">prezzoTotale</param>
        /// <param name="aliquotaIva">aliquotaIva</param>
        /// <param name="ritenuta">ritenuta</param>
        /// <param name="natura">natura</param>
        /// <param name="riferimentoAmministrazione">riferimentoAmministrazione</param>
        /// <param name="altriDatiGestionali">altriDatiGestionali</param>
        [JsonConstructor]
        public DettaglioLinee(Option<int?> numeroLinea = default, Option<string> tipoCessionePrestazione = default, Option<List<CodiceArticolo>> codiceArticolo = default, Option<string> descrizione = default, Option<double?> quantita = default, Option<string> unitaMisura = default, Option<DateTime?> dataInizioPeriodo = default, Option<DateTime?> dataFinePeriodo = default, Option<double?> prezzoUnitario = default, Option<List<ScontoMaggiorazione>> scontoMaggiorazione = default, Option<double?> prezzoTotale = default, Option<double?> aliquotaIva = default, Option<string> ritenuta = default, Option<string> natura = default, Option<string> riferimentoAmministrazione = default, Option<List<AltriDatiGestionali>> altriDatiGestionali = default)
        {
            NumeroLineaOption = numeroLinea;
            TipoCessionePrestazioneOption = tipoCessionePrestazione;
            CodiceArticoloOption = codiceArticolo;
            DescrizioneOption = descrizione;
            QuantitaOption = quantita;
            UnitaMisuraOption = unitaMisura;
            DataInizioPeriodoOption = dataInizioPeriodo;
            DataFinePeriodoOption = dataFinePeriodo;
            PrezzoUnitarioOption = prezzoUnitario;
            ScontoMaggiorazioneOption = scontoMaggiorazione;
            PrezzoTotaleOption = prezzoTotale;
            AliquotaIvaOption = aliquotaIva;
            RitenutaOption = ritenuta;
            NaturaOption = natura;
            RiferimentoAmministrazioneOption = riferimentoAmministrazione;
            AltriDatiGestionaliOption = altriDatiGestionali;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NumeroLinea
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumeroLineaOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumeroLinea
        /// </summary>
        [JsonPropertyName("numero_linea")]
        public int? NumeroLinea { get { return this.NumeroLineaOption; } set { this.NumeroLineaOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of TipoCessionePrestazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TipoCessionePrestazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets TipoCessionePrestazione
        /// </summary>
        [JsonPropertyName("tipo_cessione_prestazione")]
        public string TipoCessionePrestazione { get { return this.TipoCessionePrestazioneOption; } set { this.TipoCessionePrestazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CodiceArticolo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CodiceArticolo>> CodiceArticoloOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodiceArticolo
        /// </summary>
        [JsonPropertyName("codice_articolo")]
        public List<CodiceArticolo> CodiceArticolo { get { return this.CodiceArticoloOption; } set { this.CodiceArticoloOption = new Option<List<CodiceArticolo>>(value); } }

        /// <summary>
        /// Used to track the state of Descrizione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescrizioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Descrizione
        /// </summary>
        [JsonPropertyName("descrizione")]
        public string Descrizione { get { return this.DescrizioneOption; } set { this.DescrizioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Quantita
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantitaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Quantita
        /// </summary>
        [JsonPropertyName("quantita")]
        public double? Quantita { get { return this.QuantitaOption; } set { this.QuantitaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of UnitaMisura
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UnitaMisuraOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitaMisura
        /// </summary>
        [JsonPropertyName("unita_misura")]
        public string UnitaMisura { get { return this.UnitaMisuraOption; } set { this.UnitaMisuraOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of DataInizioPeriodo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataInizioPeriodoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataInizioPeriodo
        /// </summary>
        [JsonPropertyName("data_inizio_periodo")]
        public DateTime? DataInizioPeriodo { get { return this.DataInizioPeriodoOption; } set { this.DataInizioPeriodoOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of DataFinePeriodo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataFinePeriodoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataFinePeriodo
        /// </summary>
        [JsonPropertyName("data_fine_periodo")]
        public DateTime? DataFinePeriodo { get { return this.DataFinePeriodoOption; } set { this.DataFinePeriodoOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of PrezzoUnitario
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PrezzoUnitarioOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrezzoUnitario
        /// </summary>
        [JsonPropertyName("prezzo_unitario")]
        public double? PrezzoUnitario { get { return this.PrezzoUnitarioOption; } set { this.PrezzoUnitarioOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of ScontoMaggiorazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ScontoMaggiorazione>> ScontoMaggiorazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets ScontoMaggiorazione
        /// </summary>
        [JsonPropertyName("sconto_maggiorazione")]
        public List<ScontoMaggiorazione> ScontoMaggiorazione { get { return this.ScontoMaggiorazioneOption; } set { this.ScontoMaggiorazioneOption = new Option<List<ScontoMaggiorazione>>(value); } }

        /// <summary>
        /// Used to track the state of PrezzoTotale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PrezzoTotaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrezzoTotale
        /// </summary>
        [JsonPropertyName("prezzo_totale")]
        public double? PrezzoTotale { get { return this.PrezzoTotaleOption; } set { this.PrezzoTotaleOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of AliquotaIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AliquotaIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets AliquotaIva
        /// </summary>
        [JsonPropertyName("aliquota_iva")]
        public double? AliquotaIva { get { return this.AliquotaIvaOption; } set { this.AliquotaIvaOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of Ritenuta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RitenutaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ritenuta
        /// </summary>
        [JsonPropertyName("ritenuta")]
        public string Ritenuta { get { return this.RitenutaOption; } set { this.RitenutaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Natura
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NaturaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Natura
        /// </summary>
        [JsonPropertyName("natura")]
        public string Natura { get { return this.NaturaOption; } set { this.NaturaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of RiferimentoAmministrazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RiferimentoAmministrazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets RiferimentoAmministrazione
        /// </summary>
        [JsonPropertyName("riferimento_amministrazione")]
        public string RiferimentoAmministrazione { get { return this.RiferimentoAmministrazioneOption; } set { this.RiferimentoAmministrazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of AltriDatiGestionali
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AltriDatiGestionali>> AltriDatiGestionaliOption { get; private set; }

        /// <summary>
        /// Gets or Sets AltriDatiGestionali
        /// </summary>
        [JsonPropertyName("altri_dati_gestionali")]
        public List<AltriDatiGestionali> AltriDatiGestionali { get { return this.AltriDatiGestionaliOption; } set { this.AltriDatiGestionaliOption = new Option<List<AltriDatiGestionali>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DettaglioLinee {\n");
            sb.Append("  NumeroLinea: ").Append(NumeroLinea).Append("\n");
            sb.Append("  TipoCessionePrestazione: ").Append(TipoCessionePrestazione).Append("\n");
            sb.Append("  CodiceArticolo: ").Append(CodiceArticolo).Append("\n");
            sb.Append("  Descrizione: ").Append(Descrizione).Append("\n");
            sb.Append("  Quantita: ").Append(Quantita).Append("\n");
            sb.Append("  UnitaMisura: ").Append(UnitaMisura).Append("\n");
            sb.Append("  DataInizioPeriodo: ").Append(DataInizioPeriodo).Append("\n");
            sb.Append("  DataFinePeriodo: ").Append(DataFinePeriodo).Append("\n");
            sb.Append("  PrezzoUnitario: ").Append(PrezzoUnitario).Append("\n");
            sb.Append("  ScontoMaggiorazione: ").Append(ScontoMaggiorazione).Append("\n");
            sb.Append("  PrezzoTotale: ").Append(PrezzoTotale).Append("\n");
            sb.Append("  AliquotaIva: ").Append(AliquotaIva).Append("\n");
            sb.Append("  Ritenuta: ").Append(Ritenuta).Append("\n");
            sb.Append("  Natura: ").Append(Natura).Append("\n");
            sb.Append("  RiferimentoAmministrazione: ").Append(RiferimentoAmministrazione).Append("\n");
            sb.Append("  AltriDatiGestionali: ").Append(AltriDatiGestionali).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DettaglioLinee" />
    /// </summary>
    public class DettaglioLineeJsonConverter : JsonConverter<DettaglioLinee>
    {
        /// <summary>
        /// The format to use to serialize DataInizioPeriodo
        /// </summary>
        public static string DataInizioPeriodoFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataFinePeriodo
        /// </summary>
        public static string DataFinePeriodoFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DettaglioLinee" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DettaglioLinee Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> numeroLinea = default;
            Option<string> tipoCessionePrestazione = default;
            Option<List<CodiceArticolo>> codiceArticolo = default;
            Option<string> descrizione = default;
            Option<double?> quantita = default;
            Option<string> unitaMisura = default;
            Option<DateTime?> dataInizioPeriodo = default;
            Option<DateTime?> dataFinePeriodo = default;
            Option<double?> prezzoUnitario = default;
            Option<List<ScontoMaggiorazione>> scontoMaggiorazione = default;
            Option<double?> prezzoTotale = default;
            Option<double?> aliquotaIva = default;
            Option<string> ritenuta = default;
            Option<string> natura = default;
            Option<string> riferimentoAmministrazione = default;
            Option<List<AltriDatiGestionali>> altriDatiGestionali = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numero_linea":
                            numeroLinea = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tipo_cessione_prestazione":
                            tipoCessionePrestazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "codice_articolo":
                            codiceArticolo = new Option<List<CodiceArticolo>>(JsonSerializer.Deserialize<List<CodiceArticolo>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "descrizione":
                            descrizione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantita":
                            quantita = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "unita_misura":
                            unitaMisura = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data_inizio_periodo":
                            dataInizioPeriodo = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_fine_periodo":
                            dataFinePeriodo = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "prezzo_unitario":
                            prezzoUnitario = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "sconto_maggiorazione":
                            scontoMaggiorazione = new Option<List<ScontoMaggiorazione>>(JsonSerializer.Deserialize<List<ScontoMaggiorazione>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "prezzo_totale":
                            prezzoTotale = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "aliquota_iva":
                            aliquotaIva = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "ritenuta":
                            ritenuta = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "natura":
                            natura = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "riferimento_amministrazione":
                            riferimentoAmministrazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "altri_dati_gestionali":
                            altriDatiGestionali = new Option<List<AltriDatiGestionali>>(JsonSerializer.Deserialize<List<AltriDatiGestionali>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (numeroLinea.IsSet && numeroLinea.Value == null)
                throw new ArgumentNullException(nameof(numeroLinea), "Property is not nullable for class DettaglioLinee.");

            if (prezzoUnitario.IsSet && prezzoUnitario.Value == null)
                throw new ArgumentNullException(nameof(prezzoUnitario), "Property is not nullable for class DettaglioLinee.");

            if (prezzoTotale.IsSet && prezzoTotale.Value == null)
                throw new ArgumentNullException(nameof(prezzoTotale), "Property is not nullable for class DettaglioLinee.");

            if (aliquotaIva.IsSet && aliquotaIva.Value == null)
                throw new ArgumentNullException(nameof(aliquotaIva), "Property is not nullable for class DettaglioLinee.");

            return new DettaglioLinee(numeroLinea, tipoCessionePrestazione, codiceArticolo, descrizione, quantita, unitaMisura, dataInizioPeriodo, dataFinePeriodo, prezzoUnitario, scontoMaggiorazione, prezzoTotale, aliquotaIva, ritenuta, natura, riferimentoAmministrazione, altriDatiGestionali);
        }

        /// <summary>
        /// Serializes a <see cref="DettaglioLinee" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dettaglioLinee"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DettaglioLinee dettaglioLinee, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dettaglioLinee, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DettaglioLinee" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dettaglioLinee"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DettaglioLinee dettaglioLinee, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dettaglioLinee.NumeroLineaOption.IsSet)
                writer.WriteNumber("numero_linea", dettaglioLinee.NumeroLineaOption.Value.Value);

            if (dettaglioLinee.TipoCessionePrestazioneOption.IsSet)
                if (dettaglioLinee.TipoCessionePrestazioneOption.Value != null)
                    writer.WriteString("tipo_cessione_prestazione", dettaglioLinee.TipoCessionePrestazione);
                else
                    writer.WriteNull("tipo_cessione_prestazione");

            if (dettaglioLinee.CodiceArticoloOption.IsSet)
                if (dettaglioLinee.CodiceArticoloOption.Value != null)
                {
                    writer.WritePropertyName("codice_articolo");
                    JsonSerializer.Serialize(writer, dettaglioLinee.CodiceArticolo, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("codice_articolo");
            if (dettaglioLinee.DescrizioneOption.IsSet)
                if (dettaglioLinee.DescrizioneOption.Value != null)
                    writer.WriteString("descrizione", dettaglioLinee.Descrizione);
                else
                    writer.WriteNull("descrizione");

            if (dettaglioLinee.QuantitaOption.IsSet)
                if (dettaglioLinee.QuantitaOption.Value != null)
                    writer.WriteNumber("quantita", dettaglioLinee.QuantitaOption.Value.Value);
                else
                    writer.WriteNull("quantita");

            if (dettaglioLinee.UnitaMisuraOption.IsSet)
                if (dettaglioLinee.UnitaMisuraOption.Value != null)
                    writer.WriteString("unita_misura", dettaglioLinee.UnitaMisura);
                else
                    writer.WriteNull("unita_misura");

            if (dettaglioLinee.DataInizioPeriodoOption.IsSet)
                if (dettaglioLinee.DataInizioPeriodoOption.Value != null)
                    writer.WriteString("data_inizio_periodo", dettaglioLinee.DataInizioPeriodoOption.Value.Value.ToString(DataInizioPeriodoFormat));
                else
                    writer.WriteNull("data_inizio_periodo");

            if (dettaglioLinee.DataFinePeriodoOption.IsSet)
                if (dettaglioLinee.DataFinePeriodoOption.Value != null)
                    writer.WriteString("data_fine_periodo", dettaglioLinee.DataFinePeriodoOption.Value.Value.ToString(DataFinePeriodoFormat));
                else
                    writer.WriteNull("data_fine_periodo");

            if (dettaglioLinee.PrezzoUnitarioOption.IsSet)
                writer.WriteNumber("prezzo_unitario", dettaglioLinee.PrezzoUnitarioOption.Value.Value);

            if (dettaglioLinee.ScontoMaggiorazioneOption.IsSet)
                if (dettaglioLinee.ScontoMaggiorazioneOption.Value != null)
                {
                    writer.WritePropertyName("sconto_maggiorazione");
                    JsonSerializer.Serialize(writer, dettaglioLinee.ScontoMaggiorazione, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sconto_maggiorazione");
            if (dettaglioLinee.PrezzoTotaleOption.IsSet)
                writer.WriteNumber("prezzo_totale", dettaglioLinee.PrezzoTotaleOption.Value.Value);

            if (dettaglioLinee.AliquotaIvaOption.IsSet)
                writer.WriteNumber("aliquota_iva", dettaglioLinee.AliquotaIvaOption.Value.Value);

            if (dettaglioLinee.RitenutaOption.IsSet)
                if (dettaglioLinee.RitenutaOption.Value != null)
                    writer.WriteString("ritenuta", dettaglioLinee.Ritenuta);
                else
                    writer.WriteNull("ritenuta");

            if (dettaglioLinee.NaturaOption.IsSet)
                if (dettaglioLinee.NaturaOption.Value != null)
                    writer.WriteString("natura", dettaglioLinee.Natura);
                else
                    writer.WriteNull("natura");

            if (dettaglioLinee.RiferimentoAmministrazioneOption.IsSet)
                if (dettaglioLinee.RiferimentoAmministrazioneOption.Value != null)
                    writer.WriteString("riferimento_amministrazione", dettaglioLinee.RiferimentoAmministrazione);
                else
                    writer.WriteNull("riferimento_amministrazione");

            if (dettaglioLinee.AltriDatiGestionaliOption.IsSet)
                if (dettaglioLinee.AltriDatiGestionaliOption.Value != null)
                {
                    writer.WritePropertyName("altri_dati_gestionali");
                    JsonSerializer.Serialize(writer, dettaglioLinee.AltriDatiGestionali, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("altri_dati_gestionali");
        }
    }
}
