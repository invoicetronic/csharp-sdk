// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// FatturaElettronicaBody
    /// </summary>
    public partial class FatturaElettronicaBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FatturaElettronicaBody" /> class.
        /// </summary>
        /// <param name="datiGenerali">datiGenerali</param>
        /// <param name="datiBeniServizi">datiBeniServizi</param>
        /// <param name="datiVeicoli">datiVeicoli</param>
        /// <param name="datiPagamento">datiPagamento</param>
        /// <param name="allegati">allegati</param>
        [JsonConstructor]
        public FatturaElettronicaBody(Option<DatiGenerali> datiGenerali = default, Option<DatiBeniServizi> datiBeniServizi = default, Option<DatiVeicoli> datiVeicoli = default, Option<List<DatiPagamento>> datiPagamento = default, Option<List<Allegati>> allegati = default)
        {
            DatiGeneraliOption = datiGenerali;
            DatiBeniServiziOption = datiBeniServizi;
            DatiVeicoliOption = datiVeicoli;
            DatiPagamentoOption = datiPagamento;
            AllegatiOption = allegati;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DatiGenerali
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiGenerali> DatiGeneraliOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiGenerali
        /// </summary>
        [JsonPropertyName("dati_generali")]
        public DatiGenerali DatiGenerali { get { return this.DatiGeneraliOption; } set { this.DatiGeneraliOption = new Option<DatiGenerali>(value); } }

        /// <summary>
        /// Used to track the state of DatiBeniServizi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiBeniServizi> DatiBeniServiziOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiBeniServizi
        /// </summary>
        [JsonPropertyName("dati_beni_servizi")]
        public DatiBeniServizi DatiBeniServizi { get { return this.DatiBeniServiziOption; } set { this.DatiBeniServiziOption = new Option<DatiBeniServizi>(value); } }

        /// <summary>
        /// Used to track the state of DatiVeicoli
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiVeicoli> DatiVeicoliOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiVeicoli
        /// </summary>
        [JsonPropertyName("dati_veicoli")]
        public DatiVeicoli DatiVeicoli { get { return this.DatiVeicoliOption; } set { this.DatiVeicoliOption = new Option<DatiVeicoli>(value); } }

        /// <summary>
        /// Used to track the state of DatiPagamento
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DatiPagamento>> DatiPagamentoOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiPagamento
        /// </summary>
        [JsonPropertyName("dati_pagamento")]
        public List<DatiPagamento> DatiPagamento { get { return this.DatiPagamentoOption; } set { this.DatiPagamentoOption = new Option<List<DatiPagamento>>(value); } }

        /// <summary>
        /// Used to track the state of Allegati
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Allegati>> AllegatiOption { get; private set; }

        /// <summary>
        /// Gets or Sets Allegati
        /// </summary>
        [JsonPropertyName("allegati")]
        public List<Allegati> Allegati { get { return this.AllegatiOption; } set { this.AllegatiOption = new Option<List<Allegati>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FatturaElettronicaBody {\n");
            sb.Append("  DatiGenerali: ").Append(DatiGenerali).Append("\n");
            sb.Append("  DatiBeniServizi: ").Append(DatiBeniServizi).Append("\n");
            sb.Append("  DatiVeicoli: ").Append(DatiVeicoli).Append("\n");
            sb.Append("  DatiPagamento: ").Append(DatiPagamento).Append("\n");
            sb.Append("  Allegati: ").Append(Allegati).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FatturaElettronicaBody" />
    /// </summary>
    public class FatturaElettronicaBodyJsonConverter : JsonConverter<FatturaElettronicaBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="FatturaElettronicaBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FatturaElettronicaBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DatiGenerali> datiGenerali = default;
            Option<DatiBeniServizi> datiBeniServizi = default;
            Option<DatiVeicoli> datiVeicoli = default;
            Option<List<DatiPagamento>> datiPagamento = default;
            Option<List<Allegati>> allegati = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dati_generali":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiGenerali = new Option<DatiGenerali>(JsonSerializer.Deserialize<DatiGenerali>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_beni_servizi":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiBeniServizi = new Option<DatiBeniServizi>(JsonSerializer.Deserialize<DatiBeniServizi>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_veicoli":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiVeicoli = new Option<DatiVeicoli>(JsonSerializer.Deserialize<DatiVeicoli>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dati_pagamento":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiPagamento = new Option<List<DatiPagamento>>(JsonSerializer.Deserialize<List<DatiPagamento>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "allegati":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allegati = new Option<List<Allegati>>(JsonSerializer.Deserialize<List<Allegati>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (datiGenerali.IsSet && datiGenerali.Value == null)
                throw new ArgumentNullException(nameof(datiGenerali), "Property is not nullable for class FatturaElettronicaBody.");

            if (datiBeniServizi.IsSet && datiBeniServizi.Value == null)
                throw new ArgumentNullException(nameof(datiBeniServizi), "Property is not nullable for class FatturaElettronicaBody.");

            if (datiVeicoli.IsSet && datiVeicoli.Value == null)
                throw new ArgumentNullException(nameof(datiVeicoli), "Property is not nullable for class FatturaElettronicaBody.");

            return new FatturaElettronicaBody(datiGenerali, datiBeniServizi, datiVeicoli, datiPagamento, allegati);
        }

        /// <summary>
        /// Serializes a <see cref="FatturaElettronicaBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fatturaElettronicaBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FatturaElettronicaBody fatturaElettronicaBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fatturaElettronicaBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FatturaElettronicaBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fatturaElettronicaBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FatturaElettronicaBody fatturaElettronicaBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fatturaElettronicaBody.DatiGeneraliOption.IsSet && fatturaElettronicaBody.DatiGenerali == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaBody.DatiGenerali), "Property is required for class FatturaElettronicaBody.");

            if (fatturaElettronicaBody.DatiBeniServiziOption.IsSet && fatturaElettronicaBody.DatiBeniServizi == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaBody.DatiBeniServizi), "Property is required for class FatturaElettronicaBody.");

            if (fatturaElettronicaBody.DatiVeicoliOption.IsSet && fatturaElettronicaBody.DatiVeicoli == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaBody.DatiVeicoli), "Property is required for class FatturaElettronicaBody.");

            if (fatturaElettronicaBody.DatiGeneraliOption.IsSet)
            {
                writer.WritePropertyName("dati_generali");
                JsonSerializer.Serialize(writer, fatturaElettronicaBody.DatiGenerali, jsonSerializerOptions);
            }
            if (fatturaElettronicaBody.DatiBeniServiziOption.IsSet)
            {
                writer.WritePropertyName("dati_beni_servizi");
                JsonSerializer.Serialize(writer, fatturaElettronicaBody.DatiBeniServizi, jsonSerializerOptions);
            }
            if (fatturaElettronicaBody.DatiVeicoliOption.IsSet)
            {
                writer.WritePropertyName("dati_veicoli");
                JsonSerializer.Serialize(writer, fatturaElettronicaBody.DatiVeicoli, jsonSerializerOptions);
            }
            if (fatturaElettronicaBody.DatiPagamentoOption.IsSet)
                if (fatturaElettronicaBody.DatiPagamentoOption.Value != null)
                {
                    writer.WritePropertyName("dati_pagamento");
                    JsonSerializer.Serialize(writer, fatturaElettronicaBody.DatiPagamento, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("dati_pagamento");
            if (fatturaElettronicaBody.AllegatiOption.IsSet)
                if (fatturaElettronicaBody.AllegatiOption.Value != null)
                {
                    writer.WritePropertyName("allegati");
                    JsonSerializer.Serialize(writer, fatturaElettronicaBody.Allegati, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("allegati");
        }
    }
}
