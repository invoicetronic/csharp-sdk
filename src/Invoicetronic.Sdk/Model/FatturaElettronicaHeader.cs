// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// FatturaElettronicaHeader
    /// </summary>
    public partial class FatturaElettronicaHeader : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FatturaElettronicaHeader" /> class.
        /// </summary>
        /// <param name="datiTrasmissione">datiTrasmissione</param>
        /// <param name="cedentePrestatore">cedentePrestatore</param>
        /// <param name="rappresentanteFiscale">rappresentanteFiscale</param>
        /// <param name="cessionarioCommittente">cessionarioCommittente</param>
        /// <param name="terzoIntermediarioOSoggettoEmittente">terzoIntermediarioOSoggettoEmittente</param>
        /// <param name="soggettoEmittente">soggettoEmittente</param>
        [JsonConstructor]
        public FatturaElettronicaHeader(Option<DatiTrasmissione> datiTrasmissione = default, Option<CedentePrestatore> cedentePrestatore = default, Option<RappresentanteFiscale> rappresentanteFiscale = default, Option<CessionarioCommittente> cessionarioCommittente = default, Option<TerzoIntermediarioOSoggettoEmittente> terzoIntermediarioOSoggettoEmittente = default, Option<string> soggettoEmittente = default)
        {
            DatiTrasmissioneOption = datiTrasmissione;
            CedentePrestatoreOption = cedentePrestatore;
            RappresentanteFiscaleOption = rappresentanteFiscale;
            CessionarioCommittenteOption = cessionarioCommittente;
            TerzoIntermediarioOSoggettoEmittenteOption = terzoIntermediarioOSoggettoEmittente;
            SoggettoEmittenteOption = soggettoEmittente;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DatiTrasmissione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiTrasmissione> DatiTrasmissioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiTrasmissione
        /// </summary>
        [JsonPropertyName("dati_trasmissione")]
        public DatiTrasmissione DatiTrasmissione { get { return this.DatiTrasmissioneOption; } set { this.DatiTrasmissioneOption = new Option<DatiTrasmissione>(value); } }

        /// <summary>
        /// Used to track the state of CedentePrestatore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CedentePrestatore> CedentePrestatoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets CedentePrestatore
        /// </summary>
        [JsonPropertyName("cedente_prestatore")]
        public CedentePrestatore CedentePrestatore { get { return this.CedentePrestatoreOption; } set { this.CedentePrestatoreOption = new Option<CedentePrestatore>(value); } }

        /// <summary>
        /// Used to track the state of RappresentanteFiscale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RappresentanteFiscale> RappresentanteFiscaleOption { get; private set; }

        /// <summary>
        /// Gets or Sets RappresentanteFiscale
        /// </summary>
        [JsonPropertyName("RappresentanteFiscale")]
        public RappresentanteFiscale RappresentanteFiscale { get { return this.RappresentanteFiscaleOption; } set { this.RappresentanteFiscaleOption = new Option<RappresentanteFiscale>(value); } }

        /// <summary>
        /// Used to track the state of CessionarioCommittente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CessionarioCommittente> CessionarioCommittenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets CessionarioCommittente
        /// </summary>
        [JsonPropertyName("cessionario_committente")]
        public CessionarioCommittente CessionarioCommittente { get { return this.CessionarioCommittenteOption; } set { this.CessionarioCommittenteOption = new Option<CessionarioCommittente>(value); } }

        /// <summary>
        /// Used to track the state of TerzoIntermediarioOSoggettoEmittente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TerzoIntermediarioOSoggettoEmittente> TerzoIntermediarioOSoggettoEmittenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets TerzoIntermediarioOSoggettoEmittente
        /// </summary>
        [JsonPropertyName("terzo_intermediario_o_soggetto_emittente")]
        public TerzoIntermediarioOSoggettoEmittente TerzoIntermediarioOSoggettoEmittente { get { return this.TerzoIntermediarioOSoggettoEmittenteOption; } set { this.TerzoIntermediarioOSoggettoEmittenteOption = new Option<TerzoIntermediarioOSoggettoEmittente>(value); } }

        /// <summary>
        /// Used to track the state of SoggettoEmittente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SoggettoEmittenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets SoggettoEmittente
        /// </summary>
        [JsonPropertyName("soggetto_emittente")]
        public string SoggettoEmittente { get { return this.SoggettoEmittenteOption; } set { this.SoggettoEmittenteOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FatturaElettronicaHeader {\n");
            sb.Append("  DatiTrasmissione: ").Append(DatiTrasmissione).Append("\n");
            sb.Append("  CedentePrestatore: ").Append(CedentePrestatore).Append("\n");
            sb.Append("  RappresentanteFiscale: ").Append(RappresentanteFiscale).Append("\n");
            sb.Append("  CessionarioCommittente: ").Append(CessionarioCommittente).Append("\n");
            sb.Append("  TerzoIntermediarioOSoggettoEmittente: ").Append(TerzoIntermediarioOSoggettoEmittente).Append("\n");
            sb.Append("  SoggettoEmittente: ").Append(SoggettoEmittente).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FatturaElettronicaHeader" />
    /// </summary>
    public class FatturaElettronicaHeaderJsonConverter : JsonConverter<FatturaElettronicaHeader>
    {
        /// <summary>
        /// Deserializes json to <see cref="FatturaElettronicaHeader" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FatturaElettronicaHeader Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DatiTrasmissione> datiTrasmissione = default;
            Option<CedentePrestatore> cedentePrestatore = default;
            Option<RappresentanteFiscale> rappresentanteFiscale = default;
            Option<CessionarioCommittente> cessionarioCommittente = default;
            Option<TerzoIntermediarioOSoggettoEmittente> terzoIntermediarioOSoggettoEmittente = default;
            Option<string> soggettoEmittente = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dati_trasmissione":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datiTrasmissione = new Option<DatiTrasmissione>(JsonSerializer.Deserialize<DatiTrasmissione>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cedente_prestatore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cedentePrestatore = new Option<CedentePrestatore>(JsonSerializer.Deserialize<CedentePrestatore>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "RappresentanteFiscale":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rappresentanteFiscale = new Option<RappresentanteFiscale>(JsonSerializer.Deserialize<RappresentanteFiscale>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cessionario_committente":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cessionarioCommittente = new Option<CessionarioCommittente>(JsonSerializer.Deserialize<CessionarioCommittente>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "terzo_intermediario_o_soggetto_emittente":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                terzoIntermediarioOSoggettoEmittente = new Option<TerzoIntermediarioOSoggettoEmittente>(JsonSerializer.Deserialize<TerzoIntermediarioOSoggettoEmittente>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "soggetto_emittente":
                            soggettoEmittente = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (datiTrasmissione.IsSet && datiTrasmissione.Value == null)
                throw new ArgumentNullException(nameof(datiTrasmissione), "Property is not nullable for class FatturaElettronicaHeader.");

            if (cedentePrestatore.IsSet && cedentePrestatore.Value == null)
                throw new ArgumentNullException(nameof(cedentePrestatore), "Property is not nullable for class FatturaElettronicaHeader.");

            if (rappresentanteFiscale.IsSet && rappresentanteFiscale.Value == null)
                throw new ArgumentNullException(nameof(rappresentanteFiscale), "Property is not nullable for class FatturaElettronicaHeader.");

            if (cessionarioCommittente.IsSet && cessionarioCommittente.Value == null)
                throw new ArgumentNullException(nameof(cessionarioCommittente), "Property is not nullable for class FatturaElettronicaHeader.");

            if (terzoIntermediarioOSoggettoEmittente.IsSet && terzoIntermediarioOSoggettoEmittente.Value == null)
                throw new ArgumentNullException(nameof(terzoIntermediarioOSoggettoEmittente), "Property is not nullable for class FatturaElettronicaHeader.");

            return new FatturaElettronicaHeader(datiTrasmissione, cedentePrestatore, rappresentanteFiscale, cessionarioCommittente, terzoIntermediarioOSoggettoEmittente, soggettoEmittente);
        }

        /// <summary>
        /// Serializes a <see cref="FatturaElettronicaHeader" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fatturaElettronicaHeader"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FatturaElettronicaHeader fatturaElettronicaHeader, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fatturaElettronicaHeader, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FatturaElettronicaHeader" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fatturaElettronicaHeader"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FatturaElettronicaHeader fatturaElettronicaHeader, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fatturaElettronicaHeader.DatiTrasmissioneOption.IsSet && fatturaElettronicaHeader.DatiTrasmissione == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaHeader.DatiTrasmissione), "Property is required for class FatturaElettronicaHeader.");

            if (fatturaElettronicaHeader.CedentePrestatoreOption.IsSet && fatturaElettronicaHeader.CedentePrestatore == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaHeader.CedentePrestatore), "Property is required for class FatturaElettronicaHeader.");

            if (fatturaElettronicaHeader.RappresentanteFiscaleOption.IsSet && fatturaElettronicaHeader.RappresentanteFiscale == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaHeader.RappresentanteFiscale), "Property is required for class FatturaElettronicaHeader.");

            if (fatturaElettronicaHeader.CessionarioCommittenteOption.IsSet && fatturaElettronicaHeader.CessionarioCommittente == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaHeader.CessionarioCommittente), "Property is required for class FatturaElettronicaHeader.");

            if (fatturaElettronicaHeader.TerzoIntermediarioOSoggettoEmittenteOption.IsSet && fatturaElettronicaHeader.TerzoIntermediarioOSoggettoEmittente == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaHeader.TerzoIntermediarioOSoggettoEmittente), "Property is required for class FatturaElettronicaHeader.");

            if (fatturaElettronicaHeader.DatiTrasmissioneOption.IsSet)
            {
                writer.WritePropertyName("dati_trasmissione");
                JsonSerializer.Serialize(writer, fatturaElettronicaHeader.DatiTrasmissione, jsonSerializerOptions);
            }
            if (fatturaElettronicaHeader.CedentePrestatoreOption.IsSet)
            {
                writer.WritePropertyName("cedente_prestatore");
                JsonSerializer.Serialize(writer, fatturaElettronicaHeader.CedentePrestatore, jsonSerializerOptions);
            }
            if (fatturaElettronicaHeader.RappresentanteFiscaleOption.IsSet)
            {
                writer.WritePropertyName("RappresentanteFiscale");
                JsonSerializer.Serialize(writer, fatturaElettronicaHeader.RappresentanteFiscale, jsonSerializerOptions);
            }
            if (fatturaElettronicaHeader.CessionarioCommittenteOption.IsSet)
            {
                writer.WritePropertyName("cessionario_committente");
                JsonSerializer.Serialize(writer, fatturaElettronicaHeader.CessionarioCommittente, jsonSerializerOptions);
            }
            if (fatturaElettronicaHeader.TerzoIntermediarioOSoggettoEmittenteOption.IsSet)
            {
                writer.WritePropertyName("terzo_intermediario_o_soggetto_emittente");
                JsonSerializer.Serialize(writer, fatturaElettronicaHeader.TerzoIntermediarioOSoggettoEmittente, jsonSerializerOptions);
            }
            if (fatturaElettronicaHeader.SoggettoEmittenteOption.IsSet)
                if (fatturaElettronicaHeader.SoggettoEmittenteOption.Value != null)
                    writer.WriteString("soggetto_emittente", fatturaElettronicaHeader.SoggettoEmittente);
                else
                    writer.WriteNull("soggetto_emittente");
        }
    }
}
