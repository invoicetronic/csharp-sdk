// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// FatturaOrdinaria
    /// </summary>
    public partial class FatturaOrdinaria : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FatturaOrdinaria" /> class.
        /// </summary>
        /// <param name="sistemaEmittente">sistemaEmittente</param>
        /// <param name="fatturaElettronicaHeader">fatturaElettronicaHeader</param>
        /// <param name="fatturaElettronicaBody">fatturaElettronicaBody</param>
        [JsonConstructor]
        public FatturaOrdinaria(Option<string> sistemaEmittente = default, Option<FatturaElettronicaHeader> fatturaElettronicaHeader = default, Option<List<FatturaElettronicaBody>> fatturaElettronicaBody = default)
        {
            SistemaEmittenteOption = sistemaEmittente;
            FatturaElettronicaHeaderOption = fatturaElettronicaHeader;
            FatturaElettronicaBodyOption = fatturaElettronicaBody;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SistemaEmittente
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SistemaEmittenteOption { get; private set; }

        /// <summary>
        /// Gets or Sets SistemaEmittente
        /// </summary>
        [JsonPropertyName("sistema_emittente")]
        public string SistemaEmittente { get { return this.SistemaEmittenteOption; } set { this.SistemaEmittenteOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of FatturaElettronicaHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FatturaElettronicaHeader> FatturaElettronicaHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets FatturaElettronicaHeader
        /// </summary>
        [JsonPropertyName("fattura_elettronica_header")]
        public FatturaElettronicaHeader FatturaElettronicaHeader { get { return this.FatturaElettronicaHeaderOption; } set { this.FatturaElettronicaHeaderOption = new Option<FatturaElettronicaHeader>(value); } }

        /// <summary>
        /// Used to track the state of FatturaElettronicaBody
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FatturaElettronicaBody>> FatturaElettronicaBodyOption { get; private set; }

        /// <summary>
        /// Gets or Sets FatturaElettronicaBody
        /// </summary>
        [JsonPropertyName("fattura_elettronica_body")]
        public List<FatturaElettronicaBody> FatturaElettronicaBody { get { return this.FatturaElettronicaBodyOption; } set { this.FatturaElettronicaBodyOption = new Option<List<FatturaElettronicaBody>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FatturaOrdinaria {\n");
            sb.Append("  SistemaEmittente: ").Append(SistemaEmittente).Append("\n");
            sb.Append("  FatturaElettronicaHeader: ").Append(FatturaElettronicaHeader).Append("\n");
            sb.Append("  FatturaElettronicaBody: ").Append(FatturaElettronicaBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FatturaOrdinaria" />
    /// </summary>
    public class FatturaOrdinariaJsonConverter : JsonConverter<FatturaOrdinaria>
    {
        /// <summary>
        /// Deserializes json to <see cref="FatturaOrdinaria" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FatturaOrdinaria Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> sistemaEmittente = default;
            Option<FatturaElettronicaHeader> fatturaElettronicaHeader = default;
            Option<List<FatturaElettronicaBody>> fatturaElettronicaBody = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sistema_emittente":
                            sistemaEmittente = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "fattura_elettronica_header":
                            fatturaElettronicaHeader = new Option<FatturaElettronicaHeader>(JsonSerializer.Deserialize<FatturaElettronicaHeader>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fattura_elettronica_body":
                            fatturaElettronicaBody = new Option<List<FatturaElettronicaBody>>(JsonSerializer.Deserialize<List<FatturaElettronicaBody>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fatturaElettronicaHeader.IsSet && fatturaElettronicaHeader.Value == null)
                throw new ArgumentNullException(nameof(fatturaElettronicaHeader), "Property is not nullable for class FatturaOrdinaria.");

            return new FatturaOrdinaria(sistemaEmittente, fatturaElettronicaHeader, fatturaElettronicaBody);
        }

        /// <summary>
        /// Serializes a <see cref="FatturaOrdinaria" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FatturaOrdinaria fatturaOrdinaria, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fatturaOrdinaria, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FatturaOrdinaria" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fatturaOrdinaria"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FatturaOrdinaria fatturaOrdinaria, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fatturaOrdinaria.FatturaElettronicaHeaderOption.IsSet && fatturaOrdinaria.FatturaElettronicaHeader == null)
                throw new ArgumentNullException(nameof(fatturaOrdinaria.FatturaElettronicaHeader), "Property is required for class FatturaOrdinaria.");

            if (fatturaOrdinaria.SistemaEmittenteOption.IsSet)
                if (fatturaOrdinaria.SistemaEmittenteOption.Value != null)
                    writer.WriteString("sistema_emittente", fatturaOrdinaria.SistemaEmittente);
                else
                    writer.WriteNull("sistema_emittente");

            if (fatturaOrdinaria.FatturaElettronicaHeaderOption.IsSet)
            {
                writer.WritePropertyName("fattura_elettronica_header");
                JsonSerializer.Serialize(writer, fatturaOrdinaria.FatturaElettronicaHeader, jsonSerializerOptions);
            }
            if (fatturaOrdinaria.FatturaElettronicaBodyOption.IsSet)
                if (fatturaOrdinaria.FatturaElettronicaBodyOption.Value != null)
                {
                    writer.WritePropertyName("fattura_elettronica_body");
                    JsonSerializer.Serialize(writer, fatturaOrdinaria.FatturaElettronicaBody, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("fattura_elettronica_body");
        }
    }
}
