// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// IscrizioneREA
    /// </summary>
    public partial class IscrizioneREA : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IscrizioneREA" /> class.
        /// </summary>
        /// <param name="ufficio">ufficio</param>
        /// <param name="numeroRea">numeroRea</param>
        /// <param name="capitaleSociale">capitaleSociale</param>
        /// <param name="socioUnico">socioUnico</param>
        /// <param name="statoLiquidazione">statoLiquidazione</param>
        [JsonConstructor]
        public IscrizioneREA(Option<string> ufficio = default, Option<string> numeroRea = default, Option<double?> capitaleSociale = default, Option<string> socioUnico = default, Option<string> statoLiquidazione = default)
        {
            UfficioOption = ufficio;
            NumeroReaOption = numeroRea;
            CapitaleSocialeOption = capitaleSociale;
            SocioUnicoOption = socioUnico;
            StatoLiquidazioneOption = statoLiquidazione;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Ufficio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UfficioOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ufficio
        /// </summary>
        [JsonPropertyName("ufficio")]
        public string Ufficio { get { return this.UfficioOption; } set { this.UfficioOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NumeroRea
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NumeroReaOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumeroRea
        /// </summary>
        [JsonPropertyName("numero_rea")]
        public string NumeroRea { get { return this.NumeroReaOption; } set { this.NumeroReaOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of CapitaleSociale
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CapitaleSocialeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CapitaleSociale
        /// </summary>
        [JsonPropertyName("capitale_sociale")]
        public double? CapitaleSociale { get { return this.CapitaleSocialeOption; } set { this.CapitaleSocialeOption = new Option<double?>(value); } }

        /// <summary>
        /// Used to track the state of SocioUnico
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SocioUnicoOption { get; private set; }

        /// <summary>
        /// Gets or Sets SocioUnico
        /// </summary>
        [JsonPropertyName("socio_unico")]
        public string SocioUnico { get { return this.SocioUnicoOption; } set { this.SocioUnicoOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StatoLiquidazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatoLiquidazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatoLiquidazione
        /// </summary>
        [JsonPropertyName("stato_liquidazione")]
        public string StatoLiquidazione { get { return this.StatoLiquidazioneOption; } set { this.StatoLiquidazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IscrizioneREA {\n");
            sb.Append("  Ufficio: ").Append(Ufficio).Append("\n");
            sb.Append("  NumeroRea: ").Append(NumeroRea).Append("\n");
            sb.Append("  CapitaleSociale: ").Append(CapitaleSociale).Append("\n");
            sb.Append("  SocioUnico: ").Append(SocioUnico).Append("\n");
            sb.Append("  StatoLiquidazione: ").Append(StatoLiquidazione).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IscrizioneREA" />
    /// </summary>
    public class IscrizioneREAJsonConverter : JsonConverter<IscrizioneREA>
    {
        /// <summary>
        /// Deserializes json to <see cref="IscrizioneREA" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IscrizioneREA Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> ufficio = default;
            Option<string> numeroRea = default;
            Option<double?> capitaleSociale = default;
            Option<string> socioUnico = default;
            Option<string> statoLiquidazione = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ufficio":
                            ufficio = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "numero_rea":
                            numeroRea = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "capitale_sociale":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                capitaleSociale = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "socio_unico":
                            socioUnico = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "stato_liquidazione":
                            statoLiquidazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IscrizioneREA(ufficio, numeroRea, capitaleSociale, socioUnico, statoLiquidazione);
        }

        /// <summary>
        /// Serializes a <see cref="IscrizioneREA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iscrizioneREA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IscrizioneREA iscrizioneREA, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, iscrizioneREA, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IscrizioneREA" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iscrizioneREA"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IscrizioneREA iscrizioneREA, JsonSerializerOptions jsonSerializerOptions)
        {
            if (iscrizioneREA.UfficioOption.IsSet)
                if (iscrizioneREA.UfficioOption.Value != null)
                    writer.WriteString("ufficio", iscrizioneREA.Ufficio);
                else
                    writer.WriteNull("ufficio");

            if (iscrizioneREA.NumeroReaOption.IsSet)
                if (iscrizioneREA.NumeroReaOption.Value != null)
                    writer.WriteString("numero_rea", iscrizioneREA.NumeroRea);
                else
                    writer.WriteNull("numero_rea");

            if (iscrizioneREA.CapitaleSocialeOption.IsSet)
                if (iscrizioneREA.CapitaleSocialeOption.Value != null)
                    writer.WriteNumber("capitale_sociale", iscrizioneREA.CapitaleSocialeOption.Value.Value);
                else
                    writer.WriteNull("capitale_sociale");

            if (iscrizioneREA.SocioUnicoOption.IsSet)
                if (iscrizioneREA.SocioUnicoOption.Value != null)
                    writer.WriteString("socio_unico", iscrizioneREA.SocioUnico);
                else
                    writer.WriteNull("socio_unico");

            if (iscrizioneREA.StatoLiquidazioneOption.IsSet)
                if (iscrizioneREA.StatoLiquidazioneOption.Value != null)
                    writer.WriteString("stato_liquidazione", iscrizioneREA.StatoLiquidazione);
                else
                    writer.WriteNull("stato_liquidazione");
        }
    }
}
