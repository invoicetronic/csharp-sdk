// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// RappresentanteFiscale
    /// </summary>
    public partial class RappresentanteFiscale : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RappresentanteFiscale" /> class.
        /// </summary>
        /// <param name="datiAnagrafici">datiAnagrafici</param>
        [JsonConstructor]
        public RappresentanteFiscale(Option<DatiAnagrafici> datiAnagrafici = default)
        {
            DatiAnagraficiOption = datiAnagrafici;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DatiAnagrafici
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DatiAnagrafici> DatiAnagraficiOption { get; private set; }

        /// <summary>
        /// Gets or Sets DatiAnagrafici
        /// </summary>
        [JsonPropertyName("dati_anagrafici")]
        public DatiAnagrafici DatiAnagrafici { get { return this.DatiAnagraficiOption; } set { this.DatiAnagraficiOption = new Option<DatiAnagrafici>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RappresentanteFiscale {\n");
            sb.Append("  DatiAnagrafici: ").Append(DatiAnagrafici).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RappresentanteFiscale" />
    /// </summary>
    public class RappresentanteFiscaleJsonConverter : JsonConverter<RappresentanteFiscale>
    {
        /// <summary>
        /// Deserializes json to <see cref="RappresentanteFiscale" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RappresentanteFiscale Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DatiAnagrafici> datiAnagrafici = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dati_anagrafici":
                            datiAnagrafici = new Option<DatiAnagrafici>(JsonSerializer.Deserialize<DatiAnagrafici>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (datiAnagrafici.IsSet && datiAnagrafici.Value == null)
                throw new ArgumentNullException(nameof(datiAnagrafici), "Property is not nullable for class RappresentanteFiscale.");

            return new RappresentanteFiscale(datiAnagrafici);
        }

        /// <summary>
        /// Serializes a <see cref="RappresentanteFiscale" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rappresentanteFiscale"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RappresentanteFiscale rappresentanteFiscale, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rappresentanteFiscale, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RappresentanteFiscale" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rappresentanteFiscale"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RappresentanteFiscale rappresentanteFiscale, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rappresentanteFiscale.DatiAnagraficiOption.IsSet && rappresentanteFiscale.DatiAnagrafici == null)
                throw new ArgumentNullException(nameof(rappresentanteFiscale.DatiAnagrafici), "Property is required for class RappresentanteFiscale.");

            if (rappresentanteFiscale.DatiAnagraficiOption.IsSet)
            {
                writer.WritePropertyName("dati_anagrafici");
                JsonSerializer.Serialize(writer, rappresentanteFiscale.DatiAnagrafici, jsonSerializerOptions);
            }
        }
    }
}
