// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// RappresentanteFiscaleCessionarioCommittente
    /// </summary>
    public partial class RappresentanteFiscaleCessionarioCommittente : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RappresentanteFiscaleCessionarioCommittente" /> class.
        /// </summary>
        /// <param name="denominazione">denominazione</param>
        /// <param name="nome">nome</param>
        /// <param name="cognome">cognome</param>
        /// <param name="idFiscaleIva">idFiscaleIva</param>
        [JsonConstructor]
        public RappresentanteFiscaleCessionarioCommittente(Option<string> denominazione = default, Option<string> nome = default, Option<string> cognome = default, Option<IdFiscaleIVA> idFiscaleIva = default)
        {
            DenominazioneOption = denominazione;
            NomeOption = nome;
            CognomeOption = cognome;
            IdFiscaleIvaOption = idFiscaleIva;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Denominazione
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DenominazioneOption { get; private set; }

        /// <summary>
        /// Gets or Sets Denominazione
        /// </summary>
        [JsonPropertyName("denominazione")]
        public string Denominazione { get { return this.DenominazioneOption; } set { this.DenominazioneOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Nome
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NomeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [JsonPropertyName("nome")]
        public string Nome { get { return this.NomeOption; } set { this.NomeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Cognome
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CognomeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cognome
        /// </summary>
        [JsonPropertyName("cognome")]
        public string Cognome { get { return this.CognomeOption; } set { this.CognomeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IdFiscaleIva
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IdFiscaleIVA> IdFiscaleIvaOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdFiscaleIva
        /// </summary>
        [JsonPropertyName("id_fiscale_iva")]
        public IdFiscaleIVA IdFiscaleIva { get { return this.IdFiscaleIvaOption; } set { this.IdFiscaleIvaOption = new Option<IdFiscaleIVA>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RappresentanteFiscaleCessionarioCommittente {\n");
            sb.Append("  Denominazione: ").Append(Denominazione).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  Cognome: ").Append(Cognome).Append("\n");
            sb.Append("  IdFiscaleIva: ").Append(IdFiscaleIva).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RappresentanteFiscaleCessionarioCommittente" />
    /// </summary>
    public class RappresentanteFiscaleCessionarioCommittenteJsonConverter : JsonConverter<RappresentanteFiscaleCessionarioCommittente>
    {
        /// <summary>
        /// Deserializes json to <see cref="RappresentanteFiscaleCessionarioCommittente" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RappresentanteFiscaleCessionarioCommittente Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> denominazione = default;
            Option<string> nome = default;
            Option<string> cognome = default;
            Option<IdFiscaleIVA> idFiscaleIva = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "denominazione":
                            denominazione = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nome":
                            nome = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cognome":
                            cognome = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id_fiscale_iva":
                            idFiscaleIva = new Option<IdFiscaleIVA>(JsonSerializer.Deserialize<IdFiscaleIVA>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (idFiscaleIva.IsSet && idFiscaleIva.Value == null)
                throw new ArgumentNullException(nameof(idFiscaleIva), "Property is not nullable for class RappresentanteFiscaleCessionarioCommittente.");

            return new RappresentanteFiscaleCessionarioCommittente(denominazione, nome, cognome, idFiscaleIva);
        }

        /// <summary>
        /// Serializes a <see cref="RappresentanteFiscaleCessionarioCommittente" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rappresentanteFiscaleCessionarioCommittente"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RappresentanteFiscaleCessionarioCommittente rappresentanteFiscaleCessionarioCommittente, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rappresentanteFiscaleCessionarioCommittente, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RappresentanteFiscaleCessionarioCommittente" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rappresentanteFiscaleCessionarioCommittente"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RappresentanteFiscaleCessionarioCommittente rappresentanteFiscaleCessionarioCommittente, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rappresentanteFiscaleCessionarioCommittente.IdFiscaleIvaOption.IsSet && rappresentanteFiscaleCessionarioCommittente.IdFiscaleIva == null)
                throw new ArgumentNullException(nameof(rappresentanteFiscaleCessionarioCommittente.IdFiscaleIva), "Property is required for class RappresentanteFiscaleCessionarioCommittente.");

            if (rappresentanteFiscaleCessionarioCommittente.DenominazioneOption.IsSet)
                if (rappresentanteFiscaleCessionarioCommittente.DenominazioneOption.Value != null)
                    writer.WriteString("denominazione", rappresentanteFiscaleCessionarioCommittente.Denominazione);
                else
                    writer.WriteNull("denominazione");

            if (rappresentanteFiscaleCessionarioCommittente.NomeOption.IsSet)
                if (rappresentanteFiscaleCessionarioCommittente.NomeOption.Value != null)
                    writer.WriteString("nome", rappresentanteFiscaleCessionarioCommittente.Nome);
                else
                    writer.WriteNull("nome");

            if (rappresentanteFiscaleCessionarioCommittente.CognomeOption.IsSet)
                if (rappresentanteFiscaleCessionarioCommittente.CognomeOption.Value != null)
                    writer.WriteString("cognome", rappresentanteFiscaleCessionarioCommittente.Cognome);
                else
                    writer.WriteNull("cognome");

            if (rappresentanteFiscaleCessionarioCommittente.IdFiscaleIvaOption.IsSet)
            {
                writer.WritePropertyName("id_fiscale_iva");
                JsonSerializer.Serialize(writer, rappresentanteFiscaleCessionarioCommittente.IdFiscaleIva, jsonSerializerOptions);
            }
        }
    }
}
