// <auto-generated>
/*
 * Invoicetronic API
 *
 * The [Invoicetronic API][2] is a RESTful service that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed to be simple and easy to use, abstracting away SDI complexity while providing complete control over the invoice send/receive process. It provides advanced features as encryption at rest, multi-language pre-flight invoice validation, multiple upload formats, webhooks, event logging, client SDKs, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/
 *
 * The version of the OpenAPI document: 1
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Invoicetronic.Sdk.Client;

namespace Invoicetronic.Sdk.Model
{
    /// <summary>
    /// Webhook history.
    /// </summary>
    public partial class WebHookHistory : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookHistory" /> class.
        /// </summary>
        /// <param name="id">Unique identifier. Leave it at 0 for new records as it will be set automatically.</param>
        /// <param name="created">Creation date. It is set automatically.</param>
        /// <param name="varVersion">Row version, for optimistic concurrency. It is set automatically.</param>
        /// <param name="webHookId">Webhook id.</param>
        /// <param name="userId">User id.</param>
        /// <param name="event">Event name.</param>
        /// <param name="statusCode">Status code.</param>
        /// <param name="dateTime">Date and time of the request.</param>
        /// <param name="success">Wether the request was successful.</param>
        [JsonConstructor]
        public WebHookHistory(Option<int?> id = default, Option<DateTime?> created = default, Option<int?> varVersion = default, Option<int?> webHookId = default, Option<int?> userId = default, Option<string> @event = default, Option<int?> statusCode = default, Option<DateTime?> dateTime = default, Option<bool?> success = default)
        {
            IdOption = id;
            CreatedOption = created;
            VarVersionOption = varVersion;
            WebHookIdOption = webHookId;
            UserIdOption = userId;
            EventOption = @event;
            StatusCodeOption = statusCode;
            DateTimeOption = dateTime;
            SuccessOption = success;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Unique identifier. Leave it at 0 for new records as it will be set automatically.
        /// </summary>
        /// <value>Unique identifier. Leave it at 0 for new records as it will be set automatically.</value>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedOption { get; private set; }

        /// <summary>
        /// Creation date. It is set automatically.
        /// </summary>
        /// <value>Creation date. It is set automatically.</value>
        [JsonPropertyName("created")]
        public DateTime? Created { get { return this.CreatedOption; } set { this.CreatedOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VarVersionOption { get; private set; }

        /// <summary>
        /// Row version, for optimistic concurrency. It is set automatically.
        /// </summary>
        /// <value>Row version, for optimistic concurrency. It is set automatically.</value>
        [JsonPropertyName("version")]
        public int? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of WebHookId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WebHookIdOption { get; private set; }

        /// <summary>
        /// Webhook id.
        /// </summary>
        /// <value>Webhook id.</value>
        [JsonPropertyName("web_hook_id")]
        public int? WebHookId { get { return this.WebHookIdOption; } set { this.WebHookIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UserIdOption { get; private set; }

        /// <summary>
        /// User id.
        /// </summary>
        /// <value>User id.</value>
        [JsonPropertyName("user_id")]
        public int? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Event
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EventOption { get; private set; }

        /// <summary>
        /// Event name.
        /// </summary>
        /// <value>Event name.</value>
        [JsonPropertyName("event")]
        public string Event { get { return this.EventOption; } set { this.EventOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of StatusCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusCodeOption { get; private set; }

        /// <summary>
        /// Status code.
        /// </summary>
        /// <value>Status code.</value>
        [JsonPropertyName("status_code")]
        public int? StatusCode { get { return this.StatusCodeOption; } set { this.StatusCodeOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of DateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DateTimeOption { get; private set; }

        /// <summary>
        /// Date and time of the request.
        /// </summary>
        /// <value>Date and time of the request.</value>
        [JsonPropertyName("date_time")]
        public DateTime? DateTime { get { return this.DateTimeOption; } set { this.DateTimeOption = new Option<DateTime?>(value); } }

        /// <summary>
        /// Used to track the state of Success
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SuccessOption { get; }

        /// <summary>
        /// Wether the request was successful.
        /// </summary>
        /// <value>Wether the request was successful.</value>
        [JsonPropertyName("success")]
        public bool? Success { get { return this.SuccessOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebHookHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WebHookId: ").Append(WebHookId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebHookHistory" />
    /// </summary>
    public class WebHookHistoryJsonConverter : JsonConverter<WebHookHistory>
    {
        /// <summary>
        /// The format to use to serialize Created
        /// </summary>
        public static string CreatedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DateTime
        /// </summary>
        public static string DateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebHookHistory" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebHookHistory Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateTime?> created = default;
            Option<int?> varVersion = default;
            Option<int?> webHookId = default;
            Option<int?> userId = default;
            Option<string> varEvent = default;
            Option<int?> statusCode = default;
            Option<DateTime?> dateTime = default;
            Option<bool?> success = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created":
                            created = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "version":
                            varVersion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "web_hook_id":
                            webHookId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "user_id":
                            userId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "event":
                            varEvent = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "status_code":
                            statusCode = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "date_time":
                            dateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebHookHistory.");

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class WebHookHistory.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class WebHookHistory.");

            if (webHookId.IsSet && webHookId.Value == null)
                throw new ArgumentNullException(nameof(webHookId), "Property is not nullable for class WebHookHistory.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebHookHistory.");

            if (statusCode.IsSet && statusCode.Value == null)
                throw new ArgumentNullException(nameof(statusCode), "Property is not nullable for class WebHookHistory.");

            if (dateTime.IsSet && dateTime.Value == null)
                throw new ArgumentNullException(nameof(dateTime), "Property is not nullable for class WebHookHistory.");

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class WebHookHistory.");

            return new WebHookHistory(id, created, varVersion, webHookId, userId, varEvent, statusCode, dateTime, success);
        }

        /// <summary>
        /// Serializes a <see cref="WebHookHistory" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webHookHistory"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebHookHistory webHookHistory, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webHookHistory, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebHookHistory" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webHookHistory"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebHookHistory webHookHistory, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webHookHistory.IdOption.IsSet)
                writer.WriteNumber("id", webHookHistory.IdOption.Value.Value);

            if (webHookHistory.CreatedOption.IsSet)
                writer.WriteString("created", webHookHistory.CreatedOption.Value.Value.ToString(CreatedFormat));

            if (webHookHistory.VarVersionOption.IsSet)
                writer.WriteNumber("version", webHookHistory.VarVersionOption.Value.Value);

            if (webHookHistory.WebHookIdOption.IsSet)
                writer.WriteNumber("web_hook_id", webHookHistory.WebHookIdOption.Value.Value);

            if (webHookHistory.UserIdOption.IsSet)
                writer.WriteNumber("user_id", webHookHistory.UserIdOption.Value.Value);

            if (webHookHistory.EventOption.IsSet)
                if (webHookHistory.EventOption.Value != null)
                    writer.WriteString("event", webHookHistory.Event);
                else
                    writer.WriteNull("event");

            if (webHookHistory.StatusCodeOption.IsSet)
                writer.WriteNumber("status_code", webHookHistory.StatusCodeOption.Value.Value);

            if (webHookHistory.DateTimeOption.IsSet)
                writer.WriteString("date_time", webHookHistory.DateTimeOption.Value.Value.ToString(DateTimeFormat));

            if (webHookHistory.SuccessOption.IsSet)
                writer.WriteBoolean("success", webHookHistory.SuccessOption.Value.Value);
        }
    }
}
