/*
 * Italian eInvoice API
 *
 * The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1] (Interchange Service). The API is designed by Invoicetronic to be simple and easy to use, abstracting away the Interchange Service's complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see:  - [Invoicetronic website][2] - [Invoice API reference][3]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/ [3]: https://api.invoicetronic.com/invoice/v1/docs 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@invoicetronic.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Invoicetronic.eInvoice.Sdk.Client.OpenAPIDateConverter;

namespace Invoicetronic.eInvoice.Sdk.Model
{
    /// <summary>
    /// DatiTrasporto
    /// </summary>
    [DataContract(Name = "DatiTrasporto")]
    public partial class DatiTrasporto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatiTrasporto" /> class.
        /// </summary>
        /// <param name="datiAnagraficiVettore">datiAnagraficiVettore.</param>
        /// <param name="mezzoTrasporto">mezzoTrasporto.</param>
        /// <param name="causaleTrasporto">causaleTrasporto.</param>
        /// <param name="numeroColli">numeroColli.</param>
        /// <param name="descrizione">descrizione.</param>
        /// <param name="unitaMisuraPeso">unitaMisuraPeso.</param>
        /// <param name="pesoLordo">pesoLordo.</param>
        /// <param name="pesoNetto">pesoNetto.</param>
        /// <param name="dataOraRitiro">dataOraRitiro.</param>
        /// <param name="dataInizioTrasporto">dataInizioTrasporto.</param>
        /// <param name="tipoResa">tipoResa.</param>
        /// <param name="indirizzoResa">indirizzoResa.</param>
        /// <param name="dataOraConsegna">dataOraConsegna.</param>
        public DatiTrasporto(DatiAnagraficiVettore datiAnagraficiVettore = default(DatiAnagraficiVettore), string mezzoTrasporto = default(string), string causaleTrasporto = default(string), int? numeroColli = default(int?), string descrizione = default(string), string unitaMisuraPeso = default(string), double? pesoLordo = default(double?), double? pesoNetto = default(double?), DateTime? dataOraRitiro = default(DateTime?), DateTime? dataInizioTrasporto = default(DateTime?), string tipoResa = default(string), IndirizzoResa indirizzoResa = default(IndirizzoResa), DateTime? dataOraConsegna = default(DateTime?))
        {
            this.DatiAnagraficiVettore = datiAnagraficiVettore;
            this.MezzoTrasporto = mezzoTrasporto;
            this.CausaleTrasporto = causaleTrasporto;
            this.NumeroColli = numeroColli;
            this.Descrizione = descrizione;
            this.UnitaMisuraPeso = unitaMisuraPeso;
            this.PesoLordo = pesoLordo;
            this.PesoNetto = pesoNetto;
            this.DataOraRitiro = dataOraRitiro;
            this.DataInizioTrasporto = dataInizioTrasporto;
            this.TipoResa = tipoResa;
            this.IndirizzoResa = indirizzoResa;
            this.DataOraConsegna = dataOraConsegna;
        }

        /// <summary>
        /// Gets or Sets DatiAnagraficiVettore
        /// </summary>
        [DataMember(Name = "dati_anagrafici_vettore", EmitDefaultValue = false)]
        public DatiAnagraficiVettore DatiAnagraficiVettore { get; set; }

        /// <summary>
        /// Gets or Sets MezzoTrasporto
        /// </summary>
        [DataMember(Name = "mezzo_trasporto", EmitDefaultValue = true)]
        public string MezzoTrasporto { get; set; }

        /// <summary>
        /// Gets or Sets CausaleTrasporto
        /// </summary>
        [DataMember(Name = "causale_trasporto", EmitDefaultValue = true)]
        public string CausaleTrasporto { get; set; }

        /// <summary>
        /// Gets or Sets NumeroColli
        /// </summary>
        [DataMember(Name = "numero_colli", EmitDefaultValue = true)]
        public int? NumeroColli { get; set; }

        /// <summary>
        /// Gets or Sets Descrizione
        /// </summary>
        [DataMember(Name = "descrizione", EmitDefaultValue = true)]
        public string Descrizione { get; set; }

        /// <summary>
        /// Gets or Sets UnitaMisuraPeso
        /// </summary>
        [DataMember(Name = "unita_misura_peso", EmitDefaultValue = true)]
        public string UnitaMisuraPeso { get; set; }

        /// <summary>
        /// Gets or Sets PesoLordo
        /// </summary>
        [DataMember(Name = "peso_lordo", EmitDefaultValue = true)]
        public double? PesoLordo { get; set; }

        /// <summary>
        /// Gets or Sets PesoNetto
        /// </summary>
        [DataMember(Name = "peso_netto", EmitDefaultValue = true)]
        public double? PesoNetto { get; set; }

        /// <summary>
        /// Gets or Sets DataOraRitiro
        /// </summary>
        [DataMember(Name = "data_ora_ritiro", EmitDefaultValue = true)]
        public DateTime? DataOraRitiro { get; set; }

        /// <summary>
        /// Gets or Sets DataInizioTrasporto
        /// </summary>
        [DataMember(Name = "data_inizio_trasporto", EmitDefaultValue = true)]
        public DateTime? DataInizioTrasporto { get; set; }

        /// <summary>
        /// Gets or Sets TipoResa
        /// </summary>
        [DataMember(Name = "tipo_resa", EmitDefaultValue = true)]
        public string TipoResa { get; set; }

        /// <summary>
        /// Gets or Sets IndirizzoResa
        /// </summary>
        [DataMember(Name = "indirizzo_resa", EmitDefaultValue = false)]
        public IndirizzoResa IndirizzoResa { get; set; }

        /// <summary>
        /// Gets or Sets DataOraConsegna
        /// </summary>
        [DataMember(Name = "data_ora_consegna", EmitDefaultValue = true)]
        public DateTime? DataOraConsegna { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatiTrasporto {\n");
            sb.Append("  DatiAnagraficiVettore: ").Append(DatiAnagraficiVettore).Append("\n");
            sb.Append("  MezzoTrasporto: ").Append(MezzoTrasporto).Append("\n");
            sb.Append("  CausaleTrasporto: ").Append(CausaleTrasporto).Append("\n");
            sb.Append("  NumeroColli: ").Append(NumeroColli).Append("\n");
            sb.Append("  Descrizione: ").Append(Descrizione).Append("\n");
            sb.Append("  UnitaMisuraPeso: ").Append(UnitaMisuraPeso).Append("\n");
            sb.Append("  PesoLordo: ").Append(PesoLordo).Append("\n");
            sb.Append("  PesoNetto: ").Append(PesoNetto).Append("\n");
            sb.Append("  DataOraRitiro: ").Append(DataOraRitiro).Append("\n");
            sb.Append("  DataInizioTrasporto: ").Append(DataInizioTrasporto).Append("\n");
            sb.Append("  TipoResa: ").Append(TipoResa).Append("\n");
            sb.Append("  IndirizzoResa: ").Append(IndirizzoResa).Append("\n");
            sb.Append("  DataOraConsegna: ").Append(DataOraConsegna).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
